<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.edutem.lms.mapper.AdminMapper">

	<!-- security -->
	<!--  
	<select id="selectAdminById" parameterType="string" resultType="hashmap">
		select * from user where id=#{id} and status = 1
	</select>
	<select id="selectRoleByNo" parameterType="hashmap" resultType="string">
		select r.role_name 
		  from user a join role r on a.role = r.no 
		 where a.no = #{no}		
	</select>
	-->
	
	<!-- user 정보 -->
	<select id="selectUserInfo" parameterType="int" resultType="hashmap">
		select * from user where no=#{user_no}
	</select>

	
	<select id ="setRownum">
		set @rownum := 0
	</select>
	
	<!-- 아이디 중복체크 -->
	<select id="idCheck" resultType="int">
		select count(*) from user where id = #{id}
	</select>
	
	<!-- @@ 학생 @@ -->
	<!-- 무료 레벨 테스트 정보 가져오기 -->
	<select id="getLevelTestLogByStudent" parameterType="hashmap" resultType="hashmap">
		select l.*
		, concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as user_name
		, t.name as teacher_name
		  from level_test_log l inner join level_test_application a on l.lt_application_no = a.no
								inner join user u on a.user_no = u.no
								inner join user t on l.teacher_no = t.no
		  where a.user_no = #{user_no} 
	</select>
	
	
	
	<!-- 해당 과정 - 수업 일정 -->
	<select id="selectClassLog" parameterType="hashmap" resultType="hashmap">
		select l.no as log_no, c.no as class_no, l.class_date, l.class_time, c.class_week, c.class_time as time, t.title 		     
			 , u.name as teacher_name, m.name as user_name
			 , l.status
		  from class c inner join class_category t on c.class_category = t.no
					   inner join class_log l on c.no = l.class_no
					   inner join user u on l.teacher_no = u.no
					   inner join user m on c.user_no = m.no
		 where c.no = #{class_no}		   
		 order by class_date 
	</select>
	
	
	
	
	
	<!-- @강사 -->
	<!-- 강사 - 해당학생 수업 일정 : 중간에 강사가 바뀔수도있어서 class_log에 teacher_no 까지 걸어줘야함 -->
	<select id="selectClassLogByTeacher" parameterType="hashmap" resultType="hashmap">
		select l.no as log_no, c.no as class_no, l.class_date, l.class_time, c.class_week, c.class_time as time, t.title 		     
			 , u.name as teacher_name, m.name as user_name
			 , l.status
		  from class c inner join class_category t on c.class_category = t.no
					   inner join class_log l on c.no = l.class_no
					   inner join user u on l.teacher_no = u.no
					   inner join user m on c.user_no = m.no
		 where c.no = #{class_no}
		   and l.teacher_no = #{teacher_no}
		 order by class_date		  
	</select>
		
	
	<!-- 강사 -->
	<select id="countClass" parameterType="hashmap" resultType="int">
		  select count(*) 
			from (select a.class_no, a.teacher_no, a.class_no as no, c.user_no
					     , ct.title as company_name, d.title as class_name
					     , u.name as user_name, t.name as teacher_name  
					     , concat( DATE_FORMAT(c.start_dt, '%Y.%m.%d'), ' ~ ' , DATE_FORMAT(c.end_dt, '%Y.%m.%d')) as period
					     , (select count(*) from level_test_log where user_no = c.user_no) as levelLogCnt     
					     , c.start_dt, c.end_dt, c.reg_dt
					  from class_log a inner join class c on a.class_no = c.no
					                   inner join user u on c.user_no = u.no
					                   inner join company_category ct on u.company_code = ct.code
					                   inner join class_category d on c.class_category = d.no
					                   inner join user t on a.teacher_no = t.no
					 where a.teacher_no = #{teacher_no}
					 group by a.class_no, a.teacher_no
					 ) base
		   where 1=1
			   <if test="searchStudent != null and searchStudent != '' and searchStudent != 'all'"> and user_name = #{searchStudent}</if>
	</select>
	
	<select id="selectClass" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.class_no, a.teacher_no, a.class_no as no, c.user_no
						     , ct.title as company_name, d.title as class_name
						     , u.name as user_name, t.name as teacher_name  
						     , concat( DATE_FORMAT(c.start_dt, '%Y.%m.%d'), ' ~ ' , DATE_FORMAT(c.end_dt, '%Y.%m.%d')) as period
						     , (select count(*) from level_test_log where user_no = c.user_no) as levelLogCnt     
						     , c.start_dt, c.end_dt, c.reg_dt
						     , c.class_week, c.class_time
						     , ifnull(u.nickname, "") as nickname
     						 , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name
     						 , u.etc     
						  from class_log a inner join class c on a.class_no = c.no
						                   inner join user u on c.user_no = u.no
						                   inner join company_category ct on u.company_code = ct.code
						                   inner join class_category d on c.class_category = d.no
						                   inner join user t on a.teacher_no = t.no
						 where a.teacher_no = #{teacher_no}
						 group by a.class_no, a.teacher_no
						 ) base
			   where 1=1
			   <if test="searchStudent != null and searchStudent != '' and searchStudent != 'all'"> and user_name = #{searchStudent}</if>				
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	
		<!--  
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.*
						   , c.title as company_name, b.name as user_name, d.title as class_name, e.name as teacher_name					 
		                   , concat( DATE_FORMAT(a.start_dt, '%Y.%m.%d'), ' ~ ' , DATE_FORMAT(a.end_dt, '%Y.%m.%d')) as period
		                   , (select count(*) from level_test_log where user_no = a.user_no) as levelLogCnt
						from class a inner join user b on a.user_no = b.no
									 inner join company_category c on b.company_code = c.code               
									 inner join class_category d on a.class_category = d.no
									 inner join user e on a.teacher_no = e.no 
					   where a.teacher_no = #{teacher_no} ) base
			   where 1=1
			   <if test="searchStudent != null and searchStudent != '' and searchStudent != 'all'"> and user_name = #{searchStudent}</if>				
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
		-->
	</select>
	
	<!-- 담당 학생 리스트 (검색 콤보박스) -->
	<select id="selectStudentComboByTeacher" parameterType="hashmap" resultType="hashmap">
		select distinct u.name as student_name
		              , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name
		  from class a inner join user u on a.user_no = u.no
		 where a.teacher_no = #{teacher_no}
	</select>
	
	
	<!-- 수업일정 - 학생 영어이름(수업용 이름) update -->	
	<update id="updateUserEnglishName" parameterType="hashmap">
		update user
		   set nickname = #{nickname}		     
		 where no = #{no}	     
	</update>
	
	
	
	<!-- 레벨테스트 신청자 강사 배정 -->
	<select id="countLevelTest" parameterType="hashmap" resultType="int">
		select count(*) 
		  from (select a.user_no, u.name as user_name, c.title as company_name, a.process, a.self_level as level_test_application
				     , l.class_date, l.class_time, a.no as application_no, l.no as log_no
				  from level_test_application a inner join level_test_log l on a.no = l.lt_application_no
				  							  inner join user u on a.user_no = u.no
											  inner join company_category c on u.company_code = c.code
			     where l.teacher_no =  #{teacher_no} ) base
	     where 1=1
	</select>
	
	
	<!-- 레벨테스트 신청자 조회 - 무료 레벨테스트 강사 배정받은 화면 조회 -->
	<select id="selectLevelTest" parameterType="hashmap" resultType="hashmap">	
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.user_no	
						   , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as user_name
						   , c.title as company_name, a.process
						   , l.class_date, l.class_time, a.no as application_no, l.no as log_no, l.status
						   , cc.type, cc.level, cc.title
						   , u.etc, u.tel
						from level_test_application a inner join level_test_log l on a.no = l.lt_application_no
						  							  inner join user u on a.user_no = u.no
													  inner join company_category c on u.company_code = c.code
													  inner join class_category cc on a.class_category = cc.no													  
					   where l.teacher_no =  #{teacher_no} ) base
			   where 1=1		 
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.class_date
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	
	
	<!-- 강사 - 무료 레벨 테스트 정보 가져오기 -->
	<select id="getLevelTestLog" parameterType="hashmap" resultType="hashmap">		
		 select l.*
		 	  , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as user_name
		 	  , t.name as teacher_name, a.user_no
		  from level_test_log l inner join level_test_application a on l.lt_application_no = a.no
		                        inner join user u on a.user_no = u.no
								inner join user t on l.teacher_no = t.no
		 where l.no = #{log_no}	 
		 
	</select>
		
	<!-- 무료 레벨테스트 결과 insert -->	
	<insert id="insertLevelTestLogByTeacher" parameterType="hashmap">
		insert into level_test_log(user_no, teacher_no, level_test_date, level_test_time, reply1, reply1_percent
								 , reply2, reply2_percent, reply3, reply3_percent, reply4, reply4_percent, reply5, reply5_percent
								 , comment, status)
		values(#{user_no}, #{teacher_no}, #{level_test_date}, #{level_test_time}, #{reply1}, #{reply1_percent}
			 , #{reply2}, #{reply2_percent}, #{reply3}, #{reply3_percent}, #{reply4}, #{reply4_percent}, #{reply5}, #{reply5_percent}
		     , #{comment}, 0)     
	</insert>
	
	<!-- 무료 레벨테스트 결과 update -->
	<update id="updateLevelTestLogByTeacher" parameterType="hashmap">
		update level_test_log
		   set reply1=#{reply1}
			 , reply1_percent=#{reply1_percent}
			 , reply2=#{reply2}
			 , reply2_percent=#{reply2_percent}
			 , reply3=#{reply3}
			 , reply3_percent=#{reply3_percent}
			 , reply4=#{reply4}
			 , reply4_percent=#{reply4_percent}
			 , reply5=#{reply5}
			 , reply5_percent=#{reply5_percent}
			 , comment=#{comment}
			 , class_date=#{class_date}
			 , class_time=#{class_time}
			 , status=1
		 where no = #{no}		
	</update>


	<!-- 수업피드백 등록/수정 정보 가져오기 -->
	<select id="getClassLog" parameterType="hashmap" resultType="hashmap">
		  select l.*
		  	   , c.user_no
		  	   , concat(m.name, if(ifnull(m.nickname, "") = "", "", concat(" (",m.nickname,")"))) as user_name
		  	   , t.name as teacher_name
			from class c inner join class_log l on c.no = l.class_no 
			  		     inner join user m on c.user_no = m.no
						 inner join user t on c.teacher_no = t.no
		   where l.no = #{no}
	
	</select>
	
	
	<!-- 일일 피드백 결과 update -->
	<update id="updateClassLogByTeacher" parameterType="hashmap">
		update class_log
		   set class_date=#{class_date}
			 , class_time=#{class_time}			 
			 , teacher_no=#{teacher_no}			
			 , comment=#{comment}
		     , status = #{status}
		 where no = #{log_no}		
	</update>
	
	
	
	
	
	
	<select id="getWeeklyDays" parameterType="hashmap" resultType="hashmap">
		SELECT
			ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 0 ) AS day1,
			ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 1 ) AS day2,
			ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 2 ) AS day3,
			ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 3 ) AS day4,
			ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 4 ) AS day5,	
			
			date_format(ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 0 ),'%m.%d') as t1,
			date_format(ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 1 ),'%m.%d') as t2,
			date_format(ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 2 ),'%m.%d') as t3,
			date_format(ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 3 ),'%m.%d') as t4,
			date_format(ADDDATE( #{thisDay}, - WEEKDAY(#{thisDay}) + 4 ),'%m.%d') as t5    
		FROM
			DUAL

	</select>
	
	<select id="selectClassLogExist" parameterType="hashmap" resultType="hashmap">
		select * from class_log 
		where class_no = #{class_no} and class_date = #{compareDay}
	</select>
	
	<select id="selectClassLogExistToday" parameterType="hashmap" resultType="hashmap">
		select * from class_log 
		where class_no = #{class_no} and class_date = #{thisDay}
	</select>
	
	
	
	<!-- 금주 수업일정 -->
	<select id="selectWeeklySchedule" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select c.no as class_no, cc.title as company_name, c.user_no, c.reg_dt, u.name as user_name
						     , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name
						     , ct.title, c.class_week, c.class_time, concat(date_format(c.start_dt,'%Y.%m.%d'), " ~ " , date_format(c.end_dt,'%Y.%m.%d')) as period     
						from class c inner join user u on c.user_no = u.no
						             left join class_category ct on c.class_category = ct.no
						             inner join company_category cc on u.company_code = cc.code
						where c.teacher_no = #{teacher_no} ) base
			   where 1=1
			   <if test="searchStudent != null and searchStudent != '' and searchStudent != 'all'"> and user_name = #{searchStudent}</if>	 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<select id="countWeeklySchedule" parameterType="hashmap" resultType="int">
		select count(*) 
		  from (select c.no as class_no, cc.title as company_name, c.user_no, c.reg_dt, u.name as user_name
				     , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name
				     , ct.title, c.class_week, c.class_time, concat(date_format(c.start_dt,'%Y.%m.%d'), " ~ " , date_format(c.end_dt,'%Y.%m.%d')) as period     
				from class c inner join user u on c.user_no = u.no
				             left join class_category ct on c.class_category = ct.no
				             inner join company_category cc on u.company_code = cc.code
				where c.teacher_no = #{teacher_no} ) base
	     where 1=1		 				 
	     <if test="searchStudent != null and searchStudent != '' and searchStudent != 'all'"> and user_name = #{searchStudent}</if>
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- @티칭센터 관리자 -->
	<select id="selectStudentComboByCenter" parameterType="hashmap" resultType="hashmap">
		select distinct u.name as student_name
		              , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name
		  from class a inner join user u on a.user_no = u.no
		 where a.teacher_no = #{cri.searchTeacher}
	</select>
	
	<select id="selectWeeklyScheduleByCenter" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select c.no as class_no, cc.title as company_name, c.user_no, c.reg_dt, u.name as user_name
						     , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name
						     , ct.title, c.class_week, c.class_time, concat(date_format(c.start_dt,'%Y.%m.%d'), " ~ " , date_format(c.end_dt,'%Y.%m.%d')) as period
						     , c.teacher_no, t.name as teacher_name     
						from class c inner join user u on c.user_no = u.no
						             left join class_category ct on c.class_category = ct.no
						             inner join company_category cc on u.company_code = cc.code
						             inner join user t on c.teacher_no = t.no
						where t.company_code = #{company_code} ) base
			   where 1=1
			   <if test="searchTeacher != null and searchTeacher != '' "> and teacher_no = #{searchTeacher}</if>
			   <if test="searchStudent != null and searchStudent != '' "> and user_name = #{searchStudent}</if>	 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<select id="countWeeklyScheduleByCenter" parameterType="hashmap" resultType="int">
		select count(*) 
		  from (select c.no as class_no, cc.title as company_name, c.user_no, c.reg_dt, u.name as user_name
				     , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name
				     , ct.title, c.class_week, c.class_time, concat(date_format(c.start_dt,'%Y.%m.%d'), " ~ " , date_format(c.end_dt,'%Y.%m.%d')) as period
				     , c.teacher_no     
				from class c inner join user u on c.user_no = u.no
				             left join class_category ct on c.class_category = ct.no
				             inner join company_category cc on u.company_code = cc.code
				             inner join user t on c.teacher_no = t.no
				where t.company_code = #{company_code} ) base
	     where 1=1		 				 
	     <if test="searchTeacher != null and searchTeacher != '' "> and teacher_no = #{searchTeacher}</if>
		 <if test="searchStudent != null and searchStudent != '' "> and user_name = #{searchStudent}</if>
	</select>
	
	
	<!--  
	<select id="getClassLogInfo" parameterType="hashmap" resultType="hashmap">				
		select 'class' as flag, l.no, l.class_no, l.teacher_no, l.class_date, l.class_time
     			, t.tel as teacher_tel, ct.title, c.class_week, c.class_time as lesson_time, c.pick_time1
     			, c.start_dt, c.end_dt
     			, l.status
			    , case when l.status = 0 then '수업예정' 
			           when l.status = 1 then '수업완료' 
			           when l.status = 2 then '결석' 
			           when l.status = 3 then '취소' 
			           when l.status = 4 then '보강' end as statusText
			           
		from class_log l inner join user t on l.teacher_no = t.no
		                 inner join class c on l.class_no = c.no
		                 left join class_category ct on c.class_category = ct.no
		where l.no = #{no}
	</select>
	-->
	
	
	<!-- Weekly Schedule 상세보기 - 수강목록 -->
	<select id="countClassByUserNo" parameterType="hashmap" resultType="int">
		  select count(*) 
			from (select c.no, c.cl_application_no, c.user_no, c.teacher_no, c.class_category				    
					from class c inner join user u on c.user_no = u.no
							     inner join company_category cc on u.company_code = cc.code
								 inner join user t on c.teacher_no = t.no
								 left join class_category ct on c.class_category = ct.no
					where c.user_no = #{user_no}
					 ) base
		   where 1=1			   
	</select>
	
	<select id="selectClassByUserNo" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select c.no, c.cl_application_no, c.user_no, c.teacher_no, c.class_category
						     , c.start_dt, c.end_dt, c.process, c.period_moths, c.class_week, c.class_time, c.pick_time1, c.pick_time2
						     , c.reg_dt, c.status
						     , cc.title as company_name
						     , t.name as teacher_name, t.nickname as teacher_nickname
						     , ct.type, ct.level, ct.title
						from class c inner join user u on c.user_no = u.no
								     inner join company_category cc on u.company_code = cc.code
									 inner join user t on c.teacher_no = t.no
									 left join class_category ct on c.class_category = ct.no
						where c.user_no = #{user_no}
						 ) base
			   where 1=1			   				
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.start_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	
	
	
	
	
	
	<!-- 휴무일 등록 -->
	<select id="countHoliday" parameterType="hashmap" resultType="int">
		select count(*) 
		  from (select h.*, cc.title as company_name
				  from holiday h inner join company_category cc on h.company_code = cc.code
			     where h.company_code = #{company_code}
					) base
	     where 1=1
	     <if test="cri.keyword != '' ">		
				AND ( holiday_name Like CONCAT('%', TRIM(#{cri.keyword}), '%')
					or DATE_FORMAT(holiday_dt, '%Y-%m-%d') Like CONCAT('%', TRIM(#{cri.keyword}), '%')
				)				
		 </if>		 				 
	</select>
	
	<select id="selectHoliday" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select h.*, cc.title as company_name
						from holiday h inner join company_category cc on h.company_code = cc.code
					   where h.company_code = #{company_code}				
					  ) base
			   where 1=1		 
			   <if test="cri.keyword != '' ">		
					AND ( holiday_name Like CONCAT('%', TRIM(#{cri.keyword}), '%')
						or DATE_FORMAT(holiday_dt, '%Y-%m-%d') Like CONCAT('%', TRIM(#{cri.keyword}), '%')
					)				
			   </if>
			   
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.holiday_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<select id="holidayCheck" parameterType="hashmap" resultType="hashmap">
		select * from holiday 
		where company_code =  #{company_code} 
		and holiday_dt = #{holiday_dt}
	</select>		
	
	<select id="getDuplHolidayCnt" resultType="int" parameterType="hashmap">
		select count(*) duplCnt
		from holiday
		where company_code = #{company_code}
		and holiday_dt = #{holiday_dt}
	</select>
	
	
	<!-- 강사 배정 전 해당 티칭센터 휴무일 리스트 가져오기 -->
	<select id="selectHolidayByCenter" parameterType="hashmap" resultType="hashmap">
		select holiday_dt
		  from holiday
	     where company_code = #{company_code}
	     order by holiday_dt
	</select>
	
	
	
	
	<!-- 유료수강자 강사 배정 -->
	<select id="countClassApp" parameterType="hashmap" resultType="int">
		select count(*) 
		  from (select a.no as application_no, a.user_no, u.name as user_name, a.reg_dt, u.company_code				
					from class_application a
					inner join user u on u.no=a.user_no					
					left join class c on a.no = c.cl_application_no			-- 실수업 내용
					left join user t on c.teacher_no = t.no					-- 실수업 강사명
					left join class_category ct on c.class_category = ct.no	-- 과정명(실수업)	--
					left join class_category ct_app on a.class_category = ct_app.no	-- 과정명(신청서)	--
					<!-- where cg.tc_code= #{company_code} --> 
					where a.tc_code = #{company_code}
					) base
	     where 1=1		 				 
	</select>
	
	<select id="selectClassApp" parameterType="hashmap" resultType="hashmap">
		<!-- select a.*, u.company_code, u.name as user_name 
			   from class_application a inner join user u on a.user_no = u.no  
			  where u.company_code = #{company_code} -->
	
	
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.no as application_no, a.user_no, u.name as user_name, a.reg_dt, u.company_code 
							, ifnull(c.no, 0) class_no
							, ifnull(c.process, a.process) process
							, ifnull(c.level, ct_app.level) as level	
							, ifnull(c.class_category, a.class_category) as class_category	
							, ifnull(ct.title, ct_app.title) as class_category_name	
							, ifnull(c.period_moths, a.period_moths) period_moths	-- 1개월, 3개월...
							, ifnull(c.class_week, a.class_week) class_week		-- 주2회 (화,목)
							, ifnull(c.class_time, a.class_time) class_time		-- 20분
							, ifnull(c.pick_time1, a.pick_time1) pick_time1		-- 19:00
							, ifnull(c.pick_time2, a.pick_time2) pick_time2		-- 19:30
							, ifnull(c.start_dt, a.start_dt) start_dt				-- 수업시작일
							, ifnull(c.end_dt, DATE_ADD(a.start_dt, INTERVAL replace(a.period_moths, "개월", "") MONTH)) end_dt						-- 수업종료일
							, ifnull(c.no, "배정") as btnFlag
							, ifnull(t.name, "-") as teacher_name  
							, cc.title as company_name
							
							, ifnull(c.status, '-1') saveStat
							
							from class_application a
							inner join user u on u.no=a.user_no							
							left join class c on a.no = c.cl_application_no			-- 실수업 내용
							left join user t on c.teacher_no = t.no					-- 실수업 강사명
							left join class_category ct on c.class_category = ct.no	-- 과정명(실수업)	--
							left join class_category ct_app on a.class_category = ct_app.no	-- 과정명(신청서)	--
							inner join company_category cc on u.company_code = cc.code
							
							where a.tc_code = #{company_code}
							<!-- where cg.tc_code= #{company_code} --> 
							) base
			   where 1=1		 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	
	<!-- 회원정보 수정 -->	
	<update id="updateUserByCenter" parameterType="hashmap">
		update user
		   set etc = #{etc}
		 where no = #{no}	     
	</update>	
	
	
	
	<select id="getClassCategoryNo" parameterType="hashmap" resultType="hashmap">
		select max(no) as no 
		from class_category 
		where 1=1
		and company_code = #{company_code}
		and type = #{type} and level = #{level} and title = #{title} 
	</select>
	
	
	
	<!-- class 생성 전 - 신청서 정보 가져오기 -->
	<select id="getClassAppInfo" parameterType="hashmap" resultType="hashmap">
		select a.no, a.user_no, a.subject, a.process, a.class_category, a.period_moths, a.class_week, a.class_time
		     , a.start_dt, a.pick_time1, a.pick_time2, a.reg_dt, a.status
		     , u.name as user_name
		     , a.no as application_no, ct.title as class_category_name  --
			 , DATE_ADD(a.start_dt, INTERVAL replace(a.period_moths, "개월", "") MONTH) as end_dt
		     , ct.category, ct.type, ct.level, ct.title
		     , lower(a.class_week) as class_week_lower
			  from class_application a inner join user u on a.user_no = u.no
									   inner join class_category ct on a.class_category = ct.no 
		 where a.no = #{application_no}
	</select>
	
	<!-- class 생성 후 - 과정 정보 가져오기 -->
	<select id="getClassAssignInfo" parameterType="hashmap" resultType="hashmap">
		select c.no as class_no, c.user_no, u.name as user_name, c.teacher_no, c.process, c.period_moths
		     , c.class_week, c.class_time, c.start_dt, c.end_dt, c.pick_time1, c.pick_time2, c.reg_dt, c.status
		     , c.cl_application_no as application_no
		     , c.class_category, ct.category
		     , tc.no as textbook_category_no, ct.type, ct.level, ct.title
		     , lower(c.class_week) as class_week_lower
		     , ifnull(c.status, '-1') saveStat
		  from class c inner join user u on c.user_no = u.no
		               inner join class_category ct on c.class_category = ct.no
		               inner join textbook_category tc on ct.category = tc.no 
		 where c.no = #{class_no}
	</select>
	
	
	
	
	<!-- 유료수강자 강사배정 - class insert -->
	<insert id="insertClass" parameterType="hashmap">
		insert into class (cl_application_no, user_no, teacher_no, class_category, start_dt, end_dt, process, period_moths
                 , class_week, class_time, pick_time1, pick_time2, type, level, reg_dt, status)
		values (#{application_no}, #{user_no}, #{teacher_no}, #{class_category_no}, #{start_dt}, #{end_dt}, #{process}, #{period_moths}
       			, #{class_week}, #{class_time}, #{pick_time1}, #{pick_time2}, #{type}, #{level}, now(), 1)
	</insert>
	
	
	<!-- 유료수강자 강사배정 - class tempSave -->
	<insert id="tempSaveClass" parameterType="hashmap">
		insert into class (cl_application_no, user_no
						<if test="teacher_no != '' ">
							, teacher_no	
						</if>
						, class_category, start_dt, end_dt, process, period_moths
                 		, class_week, class_time, pick_time1, pick_time2, type, level, reg_dt, status)
		values (#{application_no}, #{user_no}
				<if test="teacher_no != '' ">
					, #{teacher_no}
				</if>
				, #{class_category_no}, #{start_dt}, #{end_dt}, #{process}, #{period_moths}
       			, #{class_week}, #{class_time}, #{pick_time1}, #{pick_time2}, #{type}, #{level}, now(), 0)
	</insert>
	
	<!-- 유료수강자 강사배정 - class tempUpdate 임시저장 후 임시저장.. -->
	<update id="tempUpdateClass" parameterType="hashmap">
		update class 
		set pick_time1 = #{pick_time1}
		 , pick_time2 = #{pick_time2}
		 , start_dt = #{start_dt}
		 , end_dt = #{end_dt}
		 <if test="teacher_no != '' ">
		 	, teacher_no = #{teacher_no}
		 </if>
		 <if test="teacher_no == '' ">
		 	, teacher_no = null
		 </if>		 
		 , class_category = #{class_category_no}
		 , period_moths = #{period_moths}
		 , class_time = #{class_time}
		 , process = #{process}
		 , class_week = #{class_week}
					 
		where no = #{class_no}
	</update>
	
	
	<update id="updateClass" parameterType="hashmap">
		update class 
		set pick_time1 = #{pick_time1}
		 , pick_time2 = #{pick_time2}
		 , start_dt = #{start_dt}
		 , end_dt = #{end_dt}
		 
		 , teacher_no = #{teacher_no}
		 
		 , class_category = #{class_category_no}
		 , period_moths = #{period_moths}
		 , class_time = #{class_time}
		 , process = #{process}
		 , class_week = #{class_week}
		 , status = 1
		where no = #{class_no}
	</update>
	
	
	<select id="selectLastAIClass" resultType="int">
		select auto_increment from information_schema.tables where table_name = 'class' and table_schema = 'edutem_lms'
	</select>
	
	
	<!-- 유료수강자 강사배정 변경 -->
	<update id="updateClassByAssign" parameterType="hashmap">
		update class 
		   set teacher_no = #{teacher_no}
		     , pick_time1 = #{pick_time1}
		     , pick_time2 = #{pick_time2}
		     , start_dt = #{start_dt}
		     , end_dt = #{finalEndDt}
		     
		     , class_category = #{class_category_no}
		     , period_moths = #{period_moths}
		     , class_time = #{class_time}
		     , process = #{process}
		     , class_week = #{class_week}
		     		     
		 where no = #{class_no}
	</update>
	
	<!-- 유료수강자 강사배정 변경 -status 0인 log들만 -> 출석완료 말고 수업예정일들만 변경 가능 -->
	<update id="updateClassLogByAssign" parameterType="hashmap">
		update class_log
		   set teacher_no = #{teacher_no}
		     , class_time = #{pick_time1}
		 where class_no = #{class_no}
		   and status = 0
	</update>
	
	
	<!-- 요일, 수강일 변경 관련 delete 후 insert -->
	<delete id="deleteClassLogByAssign" parameterType="hashmap">
		delete from class_log
		where class_no = #{class_no}
		and class_date >= #{change_startDt}
	</delete>	
	
	
	<select id="getClassLogTest" parameterType="hashmap" resultType="hashmap">	
		select * 
		from class_log
		where class_no = #{class_no}
		and teacher_no = #{teacher_no}
		and class_time = #{class_time}
		and class_date = #{class_date}
	</select>
	
	<update id="updateEndDt" parameterType="hashmap">
		update class
		set end_dt = #{finalEndDt}
		,   start_dt = #{start_dt}
		where no = #{class_no}
	</update>
	
	
	<delete id="deleteClassLogByStartDt" parameterType="hashmap">
		delete from class_log
		where class_no = #{class_no} 
		and class_date <![CDATA[<]]> #{start_dt}
	</delete>
	
	<delete id="deleteClassLogByEndDt" parameterType="hashmap">
		delete from class_log
		where class_no = #{class_no} 
		and class_date <![CDATA[>]]> #{finalEndDt}
	</delete>
	
	
	
	<!-- 강사등록 -->
	<select id="countTeacher" parameterType="hashmap" resultType="int">
		select count(*) 
		  from (select u.*, ct.title center_name
			    from user u inner join company_category ct on u.company_code = ct.code
			   where u.company_code = #{company_code}
			     and u.role = 5
			     and u.status = 1 ) base
	     where 1=1		 				 
	</select>
	
	<select id="selectTeacher" parameterType="hashmap" resultType="hashmap">	
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select u.*, ct.title center_name
					    from user u inner join company_category ct on u.company_code = ct.code
					   where u.company_code = #{company_code}
					     and u.role = 5
					     and u.status = 1 ) base
			   where 1=1		 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	
	
	
	<!-- 레벨테스트 신청자 강사 배정 -->
	<select id="countLevelTestApp" parameterType="hashmap" resultType="int">
		select count(*) 
		  from (select a.no as application_no, a.reg_dt, u.name as user_name, a.process, a.self_level as level
					, ifnull(l.no, 0) log_no
					, ifnull(l.class_date, a.pick_date) test_date
					, a.pick_time1
					, a.pick_time2
					, ifnull(l.class_time, "-") as test_time
					, ifnull(t.name, "-") as teacher_name
					, ifnull(l.comment, "null") as result
				from level_test_application a inner join user u on a.user_no = u.no
											  left join level_test_log l on a.no = l.lt_application_no
											  left join user t on l.teacher_no = t.no
				where a.tc_code = #{company_code} ) base
	     where 1=1		 				 
	</select>
	
	<select id="selectLevelTestApp" parameterType="hashmap" resultType="hashmap">	
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.no as application_no, a.reg_dt, u.name as user_name, a.process, u.no as user_no
							, ifnull(l.no, 0) log_no
							, ifnull(l.class_date, a.pick_date) test_date
							, a.pick_time1
							, a.pick_time2
							, ifnull(l.class_time, "-") as test_time
							, ifnull(t.name, "-") as teacher_name
							, ifnull(l.comment, "null") as result
							, cc.title as company_name
							, ct.type, ct.level, ct.title
							, u.etc
						from level_test_application a inner join user u on a.user_no = u.no
													  left join level_test_log l on a.no = l.lt_application_no
													  left join user t on l.teacher_no = t.no
													  inner join company_category cc on u.company_code = cc.code
													  inner join class_category ct on a.class_category = ct.no
						where a.tc_code = #{company_code} ) base
			   where 1=1		 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	
	<!-- 해당 티칭센터 강사 리스트 (콤보박스) param: company_code -->
	<select id="selectPayTeacherComboByCenter" parameterType="hashmap" resultType="hashmap">
		select no as teacher_no, name as teacher_name, company_code, role
		  from user 
		 where role = 5
		   and kind like '%유료%'
		   and company_code = #{company_code}
	</select>
	
	<!-- 해당 티칭센터 강사 리스트 (콤보박스) param: company_code -->
	<select id="selectTeacherComboByCenter" parameterType="hashmap" resultType="hashmap">
		select no as teacher_no, name as teacher_name, company_code, role
		  from user 
		 where role = 5
		   and company_code = #{company_code}
	</select>
	
	<!-- 해당 티칭센터 강사 리스트 (콤보박스) param: company_code, process (전화,화상수업 강사) -->
	<select id="selectTeacherComboByClassAssign" parameterType="hashmap" resultType="hashmap">
		select no as teacher_no, name as teacher_name, company_code, role
		  from user 
		 where role = 5
		   and company_code = #{company_code}
		   and process like concat('%', #{process}, '%')
	</select>
	
	
	<!-- 과정 리스트 (콤보박스용) 사용 x -->
	<select id="selectClassCategoryCombo" parameterType="hashmap" resultType="hashmap">
		select * from class_category
	</select>
	
	<!-- 해당 company_code로 등록되어있는 구분 리스트 (오피아,보라구영어 / 보라구중국어 ... ) -->
	<select id="selectCategoryComboByCenter" parameterType="hashmap" resultType="hashmap">
		select * from textbook_category where company_code = #{company_code}	
	</select>
	
	<!-- 해당 company_code, category로 등록되어있는 유형 리스트 (일반회화, 토론, 비즈니스, 뉴스, ...) -->
	<select id="selectTypeComboByCenter" parameterType="hashmap" resultType="hashmap">
		select distinct type 
		from class_category 
		where company_code = #{company_code}
		and category = #{category}
	</select>
	
	<!-- 해당 company_code, category, type으로 등록되어있는 레벨 리스트 (Starter, Beginner, Intermediate, ...) -->
	<select id="selectLevelComboByCenter" parameterType="hashmap" resultType="hashmap">
		select distinct level
		from class_category 
		where company_code = #{company_code}
		and category = #{category}
		and type = #{type}
	</select>
	
	<!-- 해당 company_code, category, type으로 등록되어있는 레벨 리스트 (Starter, Beginner, Intermediate, ...) -->
	<select id="selectTitleComboByCenter" parameterType="hashmap" resultType="hashmap">
		select distinct title
		from class_category 
		where company_code = #{company_code}
		and category = #{category}
		and type = #{type}
		and level = #{level}
	</select>
	
	
	
	
	<!-- level_test_log 생성 전 - 신청서 정보 가져오기 -->
	<select id="getLevelTestAppInfo" parameterType="hashmap" resultType="hashmap">
		select a.*, u.name as user_name, a.no as application_no
		  from level_test_application a inner join user u on a.user_no = u.no
		 where a.no = #{application_no}
	</select>
	
	<!-- 무료 레벨테스트 강사 배정 insert -->
	<insert id="insertLevelTestAssign" parameterType="hashmap">
		insert into level_test_log(lt_application_no, teacher_no, class_date, class_time, reg_dt, status)
		values(#{application_no}, #{teacher_no}, #{class_date}, #{class_time}, now(), 0)
	</insert>
	
	<!-- 무료 레벨테스트 강사 배정 update -->
	<update id="updateLevelTestAssign" parameterType="hashmap">
		update level_test_log
		   set teacher_no = #{teacher_no}
		     , class_date = #{class_date}
		     , class_time = #{class_time}
		 where no = #{log_no}
	</update>
	
	
	<!-- level_test_log 생성 후 - log 정보 가져오기 -->
	<select id="getLevelTestLogInfo" parameterType="hashmap" resultType="hashmap">
		select l.no as log_no, l.teacher_no, l.class_date, l.class_time, u.name as user_name, l.status, l.reg_dt, a.process
  		  from level_test_application a inner join user u on a.user_no = u.no
                                 	 	inner join level_test_log l on a.no = l.lt_application_no
 		 where l.no = #{log_no}
	</select>
	
	
	
	<select id="getTextbook" parameterType="hashmap" resultType="hashmap">
		select * from class_category where no = #{no}
	</select>
	
	
	<!-- 티칭센터 - 강사별 수업현황 -->
	<select id="countClassByCenter" parameterType="hashmap" resultType="int">
		  select count(*) 
			from (select c.no, c.user_no, c.teacher_no, u.name as user_name, t.name as teacher_name
						 , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name     
					     , ifnull(u.nickname, "") as nickname
					     , ct.title as company_name, d.title as class_name     
					     , c.class_week, c.class_time
					     , concat( DATE_FORMAT(c.start_dt, '%Y.%m.%d'), ' ~ ' , DATE_FORMAT(c.end_dt, '%Y.%m.%d')) as period
					     , c.start_dt, c.end_dt, c.reg_dt
					from class c inner join user u on c.user_no = u.no
								 inner join user t on c.teacher_no = t.no
					             inner join company_category ct on u.company_code = ct.code
								 inner join class_category d on c.class_category = d.no
					where t.company_code = #{company_code}
					 ) base
					 
		   where 1=1			   
	</select>
	
	<select id="selectClassByCenter" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select c.no, c.user_no, c.teacher_no, u.name as user_name, t.name as teacher_name
							 , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name     
						     , ifnull(u.nickname, "") as nickname
						     , ct.title as company_name, d.title as class_name     
						     , c.class_week, c.class_time
						     , concat( DATE_FORMAT(c.start_dt, '%Y.%m.%d'), ' ~ ' , DATE_FORMAT(c.end_dt, '%Y.%m.%d')) as period
						     , c.start_dt, c.end_dt, c.reg_dt
						     , tc.title as tc_center
						from class c inner join user u on c.user_no = u.no
									 inner join user t on c.teacher_no = t.no
						             inner join company_category ct on u.company_code = ct.code
									 inner join class_category d on c.class_category = d.no									 
									 inner join company_category tc on t.company_code = tc.code
						where t.company_code = #{company_code}
						 ) base
			   where 1=1			   				
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.start_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	
		
	</select>	
	
	
	<update id="updateUserByClassDetail" parameterType="hashmap">
		update user
		set name = #{name}
		  , nickname = #{nickname}
		  , tel = #{tel}
		  , email = #{email}
		  , etc = #{etc}
		where no = #{user_no}     
	</update>
	
	
	<!-- @@@@@@@@@@@@@@@@ 공지사항 @@@@@@@@@@@@@@@ -->
	<!-- 학생공지사항 -->
	<select id="selectShowNoticeAllByStudent" parameterType="hashmap" resultType="hashmap">
		select
		@rownum:=@rownum+1 as num,
		t.*
		from
		(select no, title, content, reg_date, status, share from notice 
		  where status=2 and title like concat('%',#{cri.keyword},'%')
		    <if test="!showNoArr.isEmpty()">		 	
			 	and no in	 
			   <foreach collection="showNoArr" item="showNoArr" index="index" separator="," open="(" close=")">
			 	  #{showNoArr}
			   </foreach>
	 	 	</if>
	 	 	<if test="showNoArr.isEmpty()">		 	
			 	and 1=0
	 	 	</if>
	 	 	 
		  order by reg_date asc) as t,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<select id="countShowNoticeByStudent" parameterType="hashmap" resultType="int">
		select count(*) from notice 
		where status=2 and title like concat('%',#{cri.keyword},'%')
		<if test="!showNoArr.isEmpty()">		 	
			 	and no in	 
			   <foreach collection="showNoArr" item="showNoArr" index="index" separator="," open="(" close=")">
			 	  #{showNoArr}
			   </foreach>
	 	 	</if>
	 	 	<if test="showNoArr.isEmpty()">		 	
			 	and 1=0
	 	 	</if>
	</select>
	
	
	
	
	<select id="selectNoticeAllByStudent" parameterType="hashmap" resultType="hashmap">
		select
		@rownum:=@rownum+1 as num,
		t.*
		from
		(select no, title, content, reg_date, status, share from notice where status=2 and title like concat('%',#{cri.keyword},'%') order by reg_date asc) as t,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<select id="countNoticeByStudent" parameterType="hashmap" resultType="int">
		select count(*) from notice where status=2 and title like concat('%',#{cri.keyword},'%')
	</select>
	
	<select id="selectNoticeSpecialByStudent" resultType="hashmap">
		select * from notice 
		where status != 2 
			<if test="!showNoArr.isEmpty()">		 	
			 	and no in	 
			   <foreach collection="showNoArr" item="showNoArr" index="index" separator="," open="(" close=")">
			 	  #{showNoArr}
			   </foreach>
	 	 	</if>
	 	 	<if test="showNoArr.isEmpty()">		 	
			 	and 1=0
	 	 	</if>
		order by status asc, reg_date desc
		
	</select>
	
	
	
	<select id="selectNoticeSpecial" resultType="hashmap">
		select * from notice where reg_company = #{company_code} and status != 2 order by status asc, reg_date desc
	</select>
	<select id="selectNoticeAll" parameterType="hashmap" resultType="hashmap">
		select
		@rownum:=@rownum+1 as num,
		t.*
		from
		(select no, title, content, reg_date, status, share from notice where reg_company = #{company_code} and status=2 and title like concat('%',#{cri.keyword},'%') order by reg_date asc) as t,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<select id="countNotice" parameterType="hashmap" resultType="int">
		select count(*) from notice where reg_company = #{company_code} and status=2 and title like concat('%',#{cri.keyword},'%')
	</select>
	<select id="selectNoticeOne" parameterType="hashmap" resultType="hashmap">
		select * from notice where no=#{no}
	</select>
	<insert id="insertNotice" parameterType="hashmap">
		insert into notice(title, content, reg_date, status, share, reg_company) values(#{title}, #{content}, now(), #{status}, #{share}, #{reg_company})
	</insert>
	
	
	<select id="selectNoticeSpecialByAdmin" resultType="hashmap">
		select * from notice where status != 2 order by status asc, reg_date desc
	</select>
	
	
	<!-- 공지사항 수정 -->
	<update id="updateNotice" parameterType="hashmap">		
		update notice
		   set status = #{status}
		     , title = #{title}
		     , content = #{content}
		     , share = #{share}
		 where no = #{no}
	</update>	
	<!-- 공지사항 삭제 -->
	<delete id="deleteNotice" parameterType="hashmap">		
		delete from notice where no = #{no}
	</delete>
	
	
	<!-- @@@@@@@@@@@@@@@@ 1:1문의 @@@@@@@@@@@@@@@ -->
	<insert id="addInquiry" parameterType="hashmap">
		insert into inquiry(user_no, type, title, content, reg_date, status) values(#{user_no}, #{type}, #{title}, #{content}, now(), 0)
	</insert>
	<select id="selectInquiryAll" resultType="hashmap">
		select
		@rownum:=@rownum+1 as num,
		t.*
		from
		(select i.*, u.name, u.company_code, cc.title as company_name 
		from inquiry i inner join user u on u.no=i.user_no
		               inner join company_category cc on u.company_code = cc.code 
		where i.title like concat('%',#{cri.keyword},'%') order by i.reg_date asc) as t,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countInquiry" parameterType="hashmap" resultType="int">
		select count(*) from inquiry where title like concat('%',#{cri.keyword},'%')
	</select>
	<select id="selectInquiryOne" parameterType="hashmap" resultType="hashmap">
		select i.*, u.name, u.tel from inquiry i inner join user u on u.no=i.user_no where i.no=#{no}
	</select>
	<update id="updateInquiry" parameterType="hashmap">
		update inquiry set status=#{status} where no=#{no}
	</update>
	
	<!-- 교재관련 -->
	<select id="selectTextbook" parameterType="hashmap" resultType="hashmap">
		select cc.*, tc.category_name
		from class_category cc left join textbook_category tc on cc.category = tc.no
		where cc.company_code = #{company_code} order by cc.reg_dt desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countTextbook" parameterType="hashmap" resultType="int">
		select count(*) from class_category where company_code = #{company_code}
	</select>
	<select id="selectAItextbook" resultType="int">
		select auto_increment from information_schema.tables where table_name = 'class_category' and table_schema = 'edutem_lms'
	</select>
	<insert id="addTextbook" parameterType="hashmap">
		insert into class_category(title, reg_dt, file_url, company_code, category, type, level) 
		values(#{title}, now(), #{file_url}, #{company_code}, #{category}, #{type}, #{level})
	</insert>
	
	<select id="selectTextbookByStudent" parameterType="hashmap" resultType="hashmap">
		select cc.* from class c
		inner join class_category cc on cc.no=c.class_category
		where c.user_no=#{user_no}		
		and now() between start_dt and end_dt
	</select>
	
	<!-- 교재 사용 고객사 구분 리스트 (콤보박스용)	// param: company_code -->
	<select id="selectTextbookCategoryCombo" parameterType="hashmap" resultType="hashmap">
		select * from textbook_category where company_code = #{company_code}
	</select>




	<!-- @고객사 관리자 (오피아) -->
	<!-- 해당 category로 티칭센터 company_code 가져오기 -->
	<select id="getCenterCodeByCategory" parameterType="hashmap" resultType="hashmap">
		select * from textbook_category where no = #{category}
	</select>
	
	
	<!-- 해당 고객사의 티칭센터 company_cde로 등록되어있는 구분 리스트 (오피아,보라구영어 / 보라구중국어 ... ) -->
	<select id="selectCategoryComboByCompany" parameterType="hashmap" resultType="hashmap">
		select a.*, cc.title as company_name
		from textbook_category a inner join company_category cc on a.company_code = cc.code
		where company_code in (select tc_code from company_group where cp_code = #{cp_code})
	</select>
	
	<!-- 회원현황 -->
	<select id="countUser" parameterType="hashmap" resultType="int">
		select count(*) 
		  from (select u.* from user u
				where u.role = 3
				and u.status = 1
				and u.company_code = #{company_code} ) base
	     where 1=1		 				 
	</select>
	
	<select id="selectUser" parameterType="hashmap" resultType="hashmap">	
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select u.* from user u
					  where u.role = 3
					  and u.status = 1
					  and u.company_code = #{company_code}
						 ) base
			   where 1=1		 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	
	<select id="selectUserOne" parameterType="hashmap" resultType="hashmap">	
		select u.*, cc.title as company_name
		from user u inner join company_category cc on u.company_code = cc.code
		where u.no = #{no}
	</select>
	
	
	<!-- 1:1문의 -->
	<select id="selectInquiryAllByCompany" resultType="hashmap">
		select
		@rownum:=@rownum+1 as num,
		t.*
		from
		(select i.*, u.name, u.company_code, cc.title as company_name 
		from inquiry i inner join user u on u.no=i.user_no
		               inner join company_category cc on u.company_code = cc.code 
		where u.company_code = #{company_code}
		  and i.title like concat('%',#{cri.keyword},'%') order by i.reg_date asc) as t,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countInquiryByCompany" parameterType="hashmap" resultType="int">
		select count(*) from inquiry i inner join user u on u.no=i.user_no
		where u.company_code = #{company_code} 
		and i.title like concat('%',#{cri.keyword},'%')
	</select>
	
	
	<!-- 티칭센터 로그인정보 -->
	<select id="getTcLoginInfo" parameterType="hashmap" resultType="hashmap">
		select u.* from user u 
		where u.role = 4
		and u.company_code = #{tc_code}
	</select>
	
	
	<!-- 유료수강자 강사 배정 -->
	<sql id="classApplicationSearch">
		<if test="searchType != null">		
			<choose>
				<when test="searchType == 'all' and keyword != ''">
					AND ( user_name Like CONCAT('%', TRIM(#{keyword}), '%')
					    or type Like CONCAT('%', TRIM(#{keyword}), '%')
						or level Like CONCAT('%', TRIM(#{keyword}), '%')
						or class_category_name Like CONCAT('%', TRIM(#{keyword}), '%')	
					)
				</when>				
				<when test="searchType == 'name'">AND user_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'type'">AND type Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'level'">AND level Like CONCAT('%', TRIM(#{keyword}), '%')</when>				
				<when test="searchType == 'title'">AND class_category_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>						
			</choose>						
		</if>		
		<if test="searchStartDt != '' and searchStartDt != null ">	and date_format(reg_dt,'%Y.%m.%d') <![CDATA[>=]]> #{searchStartDt} </if>
		<if test="searchEndDt != '' and searchEndDt != null "> and #{searchEndDt} <![CDATA[>=]]> date_format(reg_dt,'%Y.%m.%d')  </if>
	</sql>
	
	<select id="countClassAppByCompany" parameterType="hashmap" resultType="int">
			select count(*)
			from (select a.no as application_no, a.user_no, u.name as user_name, a.reg_dt, u.company_code, u.code	   
					   , a.process, ct_app.level, a.class_category, ct_app.title as class_category_name
				       , a.period_moths, a.class_week, a.class_time
				       , a.pick_time1, a.pick_time2, a.start_dt
				       , DATE_ADD(a.start_dt, INTERVAL replace(a.period_moths, "개월", "") MONTH) end_dt
					   , ct_app.type 
					from class_application a inner join user u on a.user_no = u.no    							 
											 inner join class_category ct_app on a.class_category = ct_app.no	
					where u.company_code = #{company_code} ) base
		   where 1=1
		   <include refid="classApplicationSearch"></include>		 				 
	</select>
	
	<select id="selectClassAppByCompany" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.no, a.no as application_no, a.user_no, u.name as user_name, a.reg_dt, u.company_code, u.code, u.tel	   
						   , a.process, ct_app.level, a.class_category, ct_app.title as class_category_name
					       , a.period_moths, a.class_week, a.class_time
					       , a.pick_time1, a.pick_time2, a.start_dt
					       , DATE_ADD(a.start_dt, INTERVAL replace(a.period_moths, "개월", "") MONTH) end_dt
						   , ct_app.type 
						   , ifnull(a.tc_code, '') as tc_code
   						   , ifnull(cc.title, '-') as tc_name
   						   , ifnull(c.no, 0) as classExist
						from class_application a inner join user u on a.user_no = u.no    							 
												 left join class_category ct_app on a.class_category = ct_app.no
												 left join company_category cc on a.tc_code = cc.code
												 left join class c on a.no = c.cl_application_no												 	
						where u.company_code = #{company_code} ) base
			   where 1=1
			   <include refid="classApplicationSearch"></include>		 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<!-- 그룹되어있는 티칭센터 리스트 (콤보박스용) -->
	<select id="selectCenterComboByCompany" parameterType="hashmap" resultType="hashmap">
		select tc.no, tc.code, tc.title
		from company_group g inner join company_category tc on g.tc_code = tc.code
		where cp_code = #{company_code}
	</select>
	
	<!-- 고객사 관리자 - 유료수강신청 - 티칭센터 매칭 수정 -->
	<update id="updateTcCodeByCompany" parameterType="hashmap">
		update class_application
		set tc_code = #{tc_code}
		where no = #{application_no}		     
	</update>
	
	<!-- 고객사 관리자 - 레벨테스트신청 - 티칭센터 매칭 수정 -->
	<update id="updateLevelAppTcCodeByCompany" parameterType="hashmap">
		update level_test_application
		set tc_code = #{tc_code}
		where no = #{application_no}		     
	</update>
	


	<!-- 신청서 코드(연락처)로 생성된 유저 있는지 확인용 -->
	<select id="getUserByCode" parameterType="hashmap" resultType="hashmap">
		select u.*, r.role_name, c.title as company_name 
		  from user u inner join role r on u.role = r.no
					  inner join company_category c on u.company_code = c.code 
		 where u.code=#{code}
	</select>

	


	<!-- 무료 레벨테스트 결과 insert -->	
	<insert id="inserUserByApplication" parameterType="hashmap">
		insert into user(role, company_code, code, name, tel, email, reg_dt, status, nickname)
		values(#{role}, #{company_code}, #{code}, #{name}, #{tel}, #{email}, now(), 1, #{eng_name})		     
	</insert>

	<!-- 신청서 (유형,레벨,과정명)에 따른 class_category No 가져오기   (로그인 고객사 티칭센터 company_code로 등록된 교재중에서..) -->
	<select id="getClassCategoryByApp" parameterType="hashmap" resultType="hashmap">
		select max(no) as class_category_no 
		from class_category 
		where 1=1
		and company_code in (select tc_code from company_group where cp_code = #{company_code})
		and type = #{type} and level = #{level} and title = #{title}
	</select>
	
	<!-- 유료수강 신청서 insert -->	
	<insert id="insertClassAppication" parameterType="hashmap">
		insert into class_application(user_no, subject, process, class_category, period_moths, class_week, class_time
		                            , start_dt, pick_time1, pick_time2, reg_dt, status, kind, com_name, req_content)
		values(#{user_no}, #{subject}, #{process}, #{class_category}, #{period_moths}, #{class_week}, #{class_time}
			 , #{start_dt}, #{pick_time1}, #{pick_time2}, #{reg_dt}, 0, #{kind}, #{com_name}, #{req_content})			     
	</insert>
	
	<!-- 무료수강 신청서 insert -->	
	<insert id="insertLevelTestAppication" parameterType="hashmap">
		insert into level_test_application(user_no, class_category, subject, process, pick_date, pick_time1, pick_time2, reg_dt, status)
		values(#{user_no}, #{class_category}, #{subject}, #{process}, #{pick_date}, #{pick_time1}, #{pick_time2}, #{reg_dt}, 1)						     
	</insert>
	

	<!-- 유료수강신청 정보 엑셀다운로드 (체크) -->
	<select id="classApplicationExcelDownload" parameterType="hashmap" resultType="hashmap">
		select u.company_code, cc.title as flag, a.reg_dt, u.name, u.tel, u.email, u.nickname as eng_name
		     , cl.type, cl.level, cl.title
			 , a.period_moths, a.class_week, a.class_time, a.start_dt, a.pick_time1, a.pick_time2, a.process, a.kind
			 , a.com_name, a.req_content
		from class_application a inner join user u on a.user_no = u.no
		                         inner join company_category cc on u.company_code = cc.code
		                         left join class_category cl on a.class_category = cl.no
		where 1=1	   
		 <if test="selectedArr != null">
		 	and a.no in		   
		   <foreach collection="selectedArr" item="selectedArr" index="index" separator="," open="(" close=")">
              #{selectedArr}
           </foreach>
	     </if>  
	    order by a.kind, a.reg_dt desc
	     
	</select>
	
	<!-- 무료레벨테스트 신청 정보 엑셀다운로드 (체크) -->
	<select id="levelTestApplicationExcelDownload" parameterType="hashmap" resultType="hashmap">
		select a.user_no, u.company_code, cc.title as flag, a.reg_dt, u.name, u.tel, u.email, u.nickname as eng_name
		     , cl.type, cl.level, cl.title
		     , a.pick_date, a.pick_time1, a.pick_time2, a.process
		from level_test_application a inner join user u on a.user_no = u.no
									  inner join company_category cc on u.company_code = cc.code
		                              left join class_category cl on a.class_category = cl.no
		where 1=1	
			<if test="selectedArr != null">
			 	and a.no in		   
			   <foreach collection="selectedArr" item="selectedArr" index="index" separator="," open="(" close=")">
	              #{selectedArr}
	           </foreach>
		    </if>   
		order by a.reg_dt desc
	     
	</select>
	
	
	<!-- 유료수강신청 - 회원정보 조회 및 수정 페이지 -->
	<select id="getUserByUserNo" parameterType="hashmap" resultType="hashmap">
		select u.*, cc.title as company_name
		from user u inner join company_category cc on u.company_code = cc.code
		where u.no = #{user_no}
	</select>
	
	
	<!-- 회원정보 수정 -->	
	<update id="updateUserByCompany" parameterType="hashmap">
		update user
		   set name = #{name}
		     , tel = #{tel}
		     , email = #{email}
		     , etc = #{etc}
		 where no = #{no}	     
	</update>
	
	<!-- 회원정보 수정 -->	
	<delete id="deleteUserByCompany" parameterType="hashmap">
		delete from user where no = #{no}	     
	</delete>
	
	
	
	<select id="getDuplClassAppCnt" resultType="int" parameterType="hashmap">
		select count(*) duplCnt
		from class_application
		where user_no = #{user_no}
		and class_category = #{class_category}
		and period_moths = #{period_moths}
		and class_week = #{class_week}
		and start_dt = #{start_dt}
		and pick_time1 = #{pick_time1}
		and pick_time2 = #{pick_time2}
		and reg_dt = #{reg_dt}
		and kind = #{kind}
		and process = #{process}
	</select>
	
	<select id="getDuplLevelTestAppCnt" resultType="int" parameterType="hashmap">
		select count(*) duplCnt
		from level_test_application
		where user_no = #{user_no}
		and class_category = #{class_category}
		and pick_date = #{pick_date}
		and pick_time1 = #{pick_time1}
		and pick_time2 = #{pick_time2}
		and reg_dt = #{reg_dt}
		and process = #{process}
	</select>
	
	
	
	
	
	<!-- @ 레벨테스트 신청 -->
	<sql id="levelTestApplicationSearch">	  
		<if test="searchType != null">		
			<choose>
				<when test="searchType == 'all' and keyword != ''">
					AND ( user_name Like CONCAT('%', TRIM(#{keyword}), '%')
					    or type Like CONCAT('%', TRIM(#{keyword}), '%')
						or level Like CONCAT('%', TRIM(#{keyword}), '%')
						or title Like CONCAT('%', TRIM(#{keyword}), '%')	
					)
				</when>				
				<when test="searchType == 'name'">AND user_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'type'">AND type Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'level'">AND level Like CONCAT('%', TRIM(#{keyword}), '%')</when>				
				<when test="searchType == 'title'">AND title Like CONCAT('%', TRIM(#{keyword}), '%')</when>						
			</choose>						
		</if>		
		<if test="searchStartDt != '' and searchStartDt != null ">	and date_format(reg_dt,'%Y.%m.%d') <![CDATA[>=]]> #{searchStartDt} </if>
		<if test="searchEndDt != '' and searchEndDt != null "> and #{searchEndDt} <![CDATA[>=]]> date_format(reg_dt,'%Y.%m.%d')  </if>
	
	</sql>
	
	<select id="countlevelTestAppByCompany" parameterType="hashmap" resultType="int">
			select count(*)
			from (select a.no as application_no, a.reg_dt, u.name as user_name, a.process, u.code, u.no as user_no
					     , a.class_category, ct.type, ct.level, ct.title
						 , a.pick_date, a.pick_time1, a.pick_time2
					from level_test_application a inner join user u on a.user_no = u.no
					                              left join class_category ct on a.class_category = ct.no
					where u.company_code = #{company_code}) base
		   where 1=1
		   <include refid="levelTestApplicationSearch"></include>	 				 
	</select>
	
	
	<select id="selectlevelTestAppByCompany" parameterType="hashmap" resultType="hashmap">	
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.no, a.no as application_no, a.reg_dt, u.name as user_name, a.process, u.code, u.no as user_no, u.tel
						     , a.class_category, ct.type, ct.level, ct.title
							 , a.pick_date, a.pick_time1, a.pick_time2							 
     						 , ifnull(l.no, 0) as logExist
     						 , ifnull(a.tc_code, '') as tc_code
   	 						 , ifnull(cc.title, '-') as tc_name  
						from level_test_application a inner join user u on a.user_no = u.no													  							  
						                              left join class_category ct on a.class_category = ct.no
						                              left join company_category cc on a.tc_code = cc.code
                              						  left join level_test_log l on a.no = l.lt_application_no						                              
						where u.company_code = #{company_code} 
						) base
			   where 1=1		
			   <include refid="levelTestApplicationSearch"></include> 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	


	<!-- 공지사항 - 티칭센터와 그룹인 고객사 리스트 (동적 체크박스용)	// param: company_code (tc_code) -->
	<select id="selectCompanyCheckbox" parameterType="hashmap" resultType="hashmap">
		select c.no, c.code, c.title 
		from company_group g inner join company_category c on g.cp_code = c.code
		where g.tc_code = #{company_code}
	</select>
	
	
	
	<!-- 고객사 - 강사별 수업현황 -->
	<select id="countClassByCompany" parameterType="hashmap" resultType="int">
		  select count(*) 
			from (select c.no, c.user_no, c.teacher_no, u.name as user_name, t.name as teacher_name
						 , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name     
					     , ifnull(u.nickname, "") as nickname
					     , ct.title as company_name, d.title as class_name     
					     , c.class_week, c.class_time
					     , concat( DATE_FORMAT(c.start_dt, '%Y.%m.%d'), ' ~ ' , DATE_FORMAT(c.end_dt, '%Y.%m.%d')) as period
					     , c.start_dt, c.end_dt, c.reg_dt
					from class c inner join user u on c.user_no = u.no
								 inner join user t on c.teacher_no = t.no
					             inner join company_category ct on u.company_code = ct.code
								 inner join class_category d on c.class_category = d.no
					where t.company_code in (select ic.tc_code from company_group ic where ic.cp_code = #{company_code}) 
					 ) base
					 
		   where 1=1			   
	</select>
	
	<select id="selectClassByCompany" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select c.no, c.user_no, c.teacher_no, u.name as user_name, t.name as teacher_name
							 , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name     
						     , ifnull(u.nickname, "") as nickname
						     , ct.title as company_name, d.title as class_name     
						     , c.class_week, c.class_time
						     , concat( DATE_FORMAT(c.start_dt, '%Y.%m.%d'), ' ~ ' , DATE_FORMAT(c.end_dt, '%Y.%m.%d')) as period
						     , c.start_dt, c.end_dt, c.reg_dt
						     , tc.title as tc_center
						from class c inner join user u on c.user_no = u.no
									 inner join user t on c.teacher_no = t.no
						             inner join company_category ct on u.company_code = ct.code
									 inner join class_category d on c.class_category = d.no									 
									 inner join company_category tc on t.company_code = tc.code
						where t.company_code in (select ic.tc_code from company_group ic where ic.cp_code = #{company_code})
						 ) base
			   where 1=1			   				
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.start_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	
		
	</select>
	
	
	
	
	
	
	
	
	<!-- @슈퍼관리자 -->
	
	<select id="selectNoticeAllByAdmin" parameterType="hashmap" resultType="hashmap">
		select
		@rownum:=@rownum+1 as num,
		t.*
		from
		(select n.*, cc.title as reg_company_name
		 from notice n inner join company_category cc on n.reg_company = cc.code 
		 where n.status=2 and n.title like concat('%',#{cri.keyword},'%') order by n.reg_date asc) as t,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<select id="countNoticeByAdmin" parameterType="hashmap" resultType="int">
		select count(*) from notice where status=2 and title like concat('%',#{cri.keyword},'%')
	</select>
	
	<!-- 공지사항 - 고객사 리스트 (동적 체크박스용) -->
	<select id="selectCompanyCheckboxByAdmin" parameterType="hashmap" resultType="hashmap">
		select c.no, c.code, c.title 
		from company_group g inner join company_category c on g.cp_code = c.code
		group by c.code	
	</select>
	
	
	
	<sql id="classApplicationSearchByAdmin">
		<if test="searchType != null">		
			<choose>
				<when test="searchType == 'all' and keyword != ''">
					AND ( user_name Like CONCAT('%', TRIM(#{keyword}), '%')
					    or type Like CONCAT('%', TRIM(#{keyword}), '%')
						or level Like CONCAT('%', TRIM(#{keyword}), '%')
						or class_category_name Like CONCAT('%', TRIM(#{keyword}), '%')
						or company_name Like CONCAT('%', TRIM(#{keyword}), '%')	
					)
				</when>				
				<when test="searchType == 'name'">AND user_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'type'">AND type Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'level'">AND level Like CONCAT('%', TRIM(#{keyword}), '%')</when>				
				<when test="searchType == 'title'">AND class_category_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'company_name'">AND company_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>						
			</choose>						
		</if>		
		<if test="searchStartDt != '' and searchStartDt != null ">	and date_format(reg_dt,'%Y.%m.%d') <![CDATA[>=]]> #{searchStartDt} </if>
		<if test="searchEndDt != '' and searchEndDt != null "> and #{searchEndDt} <![CDATA[>=]]> date_format(reg_dt,'%Y.%m.%d')  </if>
	</sql>
	
	<select id="countClassAppByAdmin" parameterType="hashmap" resultType="int">
			select count(*)
			from (select a.no as application_no, a.user_no, u.name as user_name, a.reg_dt, u.company_code, u.code	   
					   , a.process, ct_app.level, a.class_category, ct_app.title as class_category_name
				       , a.period_moths, a.class_week, a.class_time
				       , a.pick_time1, a.pick_time2, a.start_dt
				       , DATE_ADD(a.start_dt, INTERVAL replace(a.period_moths, "개월", "") MONTH) end_dt
					   , ct_app.type, cc.title as company_name  
					from class_application a inner join user u on a.user_no = u.no    							 
											 inner join class_category ct_app on a.class_category = ct_app.no
											 inner join company_category cc on u.company_code = cc.code	
					where 1=1 ) base
		   where 1=1
		   <include refid="classApplicationSearchByAdmin"></include>		 				 
	</select>
	
	<select id="selectClassAppByAdmin" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.no as application_no, a.user_no, u.name as user_name, a.reg_dt, u.company_code, u.code, u.tel	   
						   , a.process, ct_app.level, a.class_category, ct_app.title as class_category_name
					       , a.period_moths, a.class_week, a.class_time
					       , a.pick_time1, a.pick_time2, a.start_dt
					       , DATE_ADD(a.start_dt, INTERVAL replace(a.period_moths, "개월", "") MONTH) end_dt
						   , ct_app.type, cc.title as company_name  
						from class_application a inner join user u on a.user_no = u.no    							 
												 left join class_category ct_app on a.class_category = ct_app.no
												 inner join company_category cc on u.company_code = cc.code	
						where 1=1) base
			   where 1=1
			   <include refid="classApplicationSearchByAdmin"></include>		 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	
	
	<select id="countlevelTestAppByAdmin" parameterType="hashmap" resultType="int">
			select count(*)
			from (select a.no as application_no, a.reg_dt, u.name as user_name, a.process, u.code, u.no as user_no, u.tel 
							 , a.class_category, ct.type, ct.level, ct.title
							 , a.pick_date, a.pick_time1, a.pick_time2
						     , cc.title as company_name
						     , ifnull(l.no, 0) as log_no
						from level_test_application a 
						inner join user u on a.user_no = u.no  
						left join class_category ct on a.class_category = ct.no
						inner join company_category cc on u.company_code = cc.code
						left join level_test_log l on a.no = l.lt_application_no) base
		   where 1=1
		   <include refid="levelTestApplicationSearch"></include>	 				 
	</select>
	
	
	<select id="selectlevelTestAppByAdmin" parameterType="hashmap" resultType="hashmap">	
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.no as application_no, a.reg_dt, u.name as user_name, a.process, u.code, u.no as user_no, u.tel 
							 , a.class_category, ct.type, ct.level, ct.title
							 , a.pick_date, a.pick_time1, a.pick_time2
						     , cc.title as company_name
						     , ifnull(l.no, 0) as log_no
						from level_test_application a 
						inner join user u on a.user_no = u.no  
						left join class_category ct on a.class_category = ct.no
						inner join company_category cc on u.company_code = cc.code
						left join level_test_log l on a.no = l.lt_application_no ) base
			   where 1=1		
			   <include refid="levelTestApplicationSearch"></include> 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	
	<!-- 무료 레벨 테스트 정보 가져오기 -->
	<select id="getLevelTestLogByAdmin" parameterType="hashmap" resultType="hashmap">
		select l.*
		, concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as user_name
		, t.name as teacher_name
		  from level_test_log l inner join level_test_application a on l.lt_application_no = a.no
								inner join user u on a.user_no = u.no
								inner join user t on l.teacher_no = t.no
		  where l.no = #{log_no}
	</select>
	
	
	
	
	<sql id="adminTextbookSearch">
		<if test="cri.keyword != '' ">		
			AND ( cc.title Like CONCAT('%', TRIM(#{keyword}), '%')
				or c.category Like CONCAT('%', TRIM(#{keyword}), '%')
			    or c.type Like CONCAT('%', TRIM(#{keyword}), '%')
			    or c.level Like CONCAT('%', TRIM(#{keyword}), '%')
			    or c.title Like CONCAT('%', TRIM(#{keyword}), '%')
			)				
		</if>	
	</sql>
	
	<select id="selectTextbookByAdmin" parameterType="hashmap" resultType="hashmap">
		select c.*, cc.title as company_name, tc.category_name
		from class_category c inner join company_category cc on c.company_code = cc.code
							  inner join textbook_category tc on c.category = tc.no
		where 1=1
		<include refid="adminTextbookSearch"></include>
		order by c.company_code desc, c.reg_dt desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countTextbookByAdmin" parameterType="hashmap" resultType="int">
		select count(*) 
		from class_category c inner join company_category cc on c.company_code = cc.code
		where 1=1		
		<include refid="adminTextbookSearch"></include>
	</select>
	

	
	<!-- 강사현황 -->
	<sql id="teacherSearch">
		<if test="searchType != null">				
			<choose>
				<when test="searchType == 'all' and keyword != ''">					
					AND ( center_name Like CONCAT('%', TRIM(#{keyword}), '%')
					    or nickname Like CONCAT('%', TRIM(#{keyword}), '%')
						or subject Like CONCAT('%', TRIM(#{keyword}), '%')
						or nation Like CONCAT('%', TRIM(#{keyword}), '%')							
					) 
				</when>				
				<when test="searchType == 'center_name'">AND center_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'nickname'">AND nickname Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'subject'">AND subject Like CONCAT('%', TRIM(#{keyword}), '%')</when>				
				<when test="searchType == 'nation'">AND nation Like CONCAT('%', TRIM(#{keyword}), '%')</when>										
			</choose>						
		</if>
	</sql>
	
	<select id="countTeacherByAdmin" parameterType="hashmap" resultType="int">
		select count(*) 
		  from (select u.*, ct.title center_name
			    from user u inner join company_category ct on u.company_code = ct.code
			   where u.role = 5
			     and u.status = 1 ) base
	     where 1=1		 				
	     <include refid="teacherSearch"></include> 
	</select>
	
	<select id="selectTeacherByAdmin" parameterType="hashmap" resultType="hashmap">	
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select u.*, ct.title center_name
					    from user u inner join company_category ct on u.company_code = ct.code
					   where u.role = 5
					     and u.status = 1 ) base
			   where 1=1		
			   <include refid="teacherSearch"></include> 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.reg_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>	
	
	<!-- 슈퍼관리자 - 강사별 수업현황 -->
	<select id="countClassByAdmin" parameterType="hashmap" resultType="int">
		  select count(*) 
			from (select c.no, c.user_no, c.teacher_no, u.name as user_name, t.name as teacher_name
							 , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name     
						     , ifnull(u.nickname, "") as nickname
						     , ct.title as company_name, d.title as class_name     
						     , c.class_week, c.class_time
						     , concat( DATE_FORMAT(c.start_dt, '%Y.%m.%d'), ' ~ ' , DATE_FORMAT(c.end_dt, '%Y.%m.%d')) as period
						     , c.start_dt, c.end_dt, c.reg_dt
						from class c inner join user u on c.user_no = u.no
									 inner join user t on c.teacher_no = t.no
						             inner join company_category ct on u.company_code = ct.code
									 inner join class_category d on c.class_category = d.no
					 ) base
		   where 1=1			   
	</select>
	
	<select id="selectClassByAdmin" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select c.no, c.user_no, c.teacher_no, u.name as user_name, t.name as teacher_name
							 , concat(u.name, if(ifnull(u.nickname, "") = "", "", concat(" (",u.nickname,")"))) as full_name     
						     , ifnull(u.nickname, "") as nickname
						     , ct.title as company_name, d.title as class_name     
						     , c.class_week, c.class_time
						     , concat( DATE_FORMAT(c.start_dt, '%Y.%m.%d'), ' ~ ' , DATE_FORMAT(c.end_dt, '%Y.%m.%d')) as period
						     , c.start_dt, c.end_dt, c.reg_dt
						     , tc.title as tc_center
						from class c inner join user u on c.user_no = u.no
									 inner join user t on c.teacher_no = t.no
						             inner join company_category ct on u.company_code = ct.code
									 inner join class_category d on c.class_category = d.no
									 
									 inner join company_category tc on t.company_code = tc.code
						 ) base
			   where 1=1			   				
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.start_dt
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	
		
	</select>
	
	
	<!-- 슈퍼관리자 - 레벨테스트 현황
	select l.no as log_no
	     , a.user_no, u.company_name as user_company, u.name as user_name
	     , l.teacher_no, t.company_name as teacher_company, t.name as teacher_no
	     , l.class_date, l.class_time
	     , ct.category, ct.type, ct.level, ct.title
	from level_test_log l inner join level_test_application a on l.lt_application_no = a.no
						  inner join (select iu.*, ic.title as company_name
										from user iu inner join company_category ic on iu.company_code = ic.code) u on a.user_no = u.no                      
	                      inner join (select iu.*, ic.title as company_name
										from user iu inner join company_category ic on iu.company_code = ic.code) t on l.teacher_no = t.no                                                        
						  inner join class_category ct on a.class_category = ct.no		
	-->
	
	
	<select id="getClassCategoryNoByApplication" parameterType="hashmap" resultType="hashmap">
		select max(no) as no 
		from class_category 
		where 1=1
		and category = #{category}
		and type = #{type} and level = #{level} and title = #{title}
	</select>

	
	<select id="getClassApplication" parameterType="hashmap" resultType="hashmap">
		select a.*, u.name, u.nickname, u.tel, u.email
		     , substring_index(a.pick_time1, ':', 1) as pick_hour1
     		 , substring_index(a.pick_time1, ':', -1) as pick_min1
     		 , substring_index(a.pick_time2, ':', 1) as pick_hour2
     		 , substring_index(a.pick_time2, ':', -1) as pick_min2 
     		 , lower(a.class_week) as class_week_lower 
			 , ct.category, ct.type, ct.level, ct.title, ct.company_code as center_code
		from class_application a inner join class_category ct on a.class_category = ct.no 
		                         inner join user u on a.user_no = u.no
		where a.no = #{no}
	</select>
	
	
	<update id="updateClassAppication" parameterType="hashmap">
		update class_application
		   set kind = #{kind}
		     , reg_dt = #{reg_dt}
		     , process = #{process}
		     , class_category = #{class_category}
		     , period_moths = #{period_moths}
		     , class_time = #{class_time}
		     , class_week = #{class_week}
		     , pick_time1 = #{pick_time1} 
		     , pick_time2 = #{pick_time2} 
		     , start_dt = #{start_dt}
		     , com_name = #{com_name}
		     , req_content = #{req_content}
		     , subject = #{subject}
		 where no = #{no}
	</update>
	
	<!-- 신청서 내용으로 배정완료된 수강 과정이 있는지 정보 가져오기 -->
	<select id="getClassExist" parameterType="hashmap" resultType="hashmap">
		select a.no as application_no, ifnull(c.no, 0) as class_no		     
		from class_application a left join (select * from class where status = 1) c on a.no = c.cl_application_no
		where a.no = #{no}
	</select>
		
	<delete id="deleteClassAppication" parameterType="hashmap">
		delete from class_application where no = #{no}
	</delete>
	
	
	<select id="getLevelTestApplication" parameterType="hashmap" resultType="hashmap">
		select a.*, u.name, u.nickname, u.tel, u.email
		     , substring_index(a.pick_time1, ':', 1) as pick_hour1
			 , substring_index(a.pick_time1, ':', -1) as pick_min1
			 , substring_index(a.pick_time2, ':', 1) as pick_hour2
			 , substring_index(a.pick_time2, ':', -1) as pick_min2 
		     , ct.category, ct.type, ct.level, ct.title, ct.company_code as center_code
		from level_test_application a inner join class_category ct on a.class_category = ct.no 
									  inner join user u on a.user_no = u.no
		where a.no = #{no}
	</select>
	
	
	<update id="updateLevelTestAppication" parameterType="hashmap">
		update level_test_application
		set pick_date = #{pick_date}
		  , reg_dt = #{reg_dt}
		  , process = #{process}
		  , class_category = #{class_category}
		  , subject = #{subject}
		  , pick_time1 = #{pick_time1}
		  , pick_time2 = #{pick_time2}
		where no = #{no}
	</update>
	
	<!-- 신청서 내용으로 배정완료된 수강 과정이 있는지 정보 가져오기 -->
	<select id="getLevelTestExist" parameterType="hashmap" resultType="hashmap">
		select a.* 
		     , (select count(*) from level_test_log where lt_application_no = a.no) as cnt
		from level_test_application a
		where a.no = #{no}
	</select>
	

	<delete id="deleteLevelTestAppication" parameterType="hashmap">
		delete from level_test_application where no = #{no}
	</delete>
	
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ saeha LMS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	
	<!-- 학생로그인 페이지 로그인 -->
	<select id="selectUserByStudent" parameterType="hashmap" resultType="hashmap">
		select u.*, r.name as role_name
		     , s.student_name as name
			 , s.student_eng_name as eng_name	 
		from user u
		inner join role r on u.role = r.role_no
		inner join user_student s on u.user_no = s.user_no
		where role = 3
		and u.id=#{id} <!--  and u.pwd=#{password} -->
	</select>
	
	<!-- 관리자로그인 페이지 로그인 -->
	<select id="selectUserByAdmin" parameterType="hashmap" resultType="hashmap">
		select u.*, r.name as role_name
			 , case when u.role = 1 then '관리자'
					when u.role = 2 then t.teacher_name else '' end as name
			 , case when u.role = 1 then 'Admin'
					when u.role = 2 then t.teacher_nickname else '' end as eng_name              
		from user u
		inner join role r on u.role = r.role_no
		left join user_teacher t on u.user_no = t.user_no
		where u.role in (1, 2)
		and u.id=#{id} <!-- and u.pwd=#{password} -->
	</select>
		
	
	
	
	<!-- id/pwd 로그인 -->
	<select id="selectUserById" parameterType="hashmap" resultType="hashmap">
		select u.*, r.name as role_name
             , case when u.role = 1 then '관리자'
                    when u.role = 2 then t.teacher_name else s.student_name end as name
             , case when u.role = 1 then 'Admin'
            		when u.role = 2 then t.teacher_nickname else  s.student_eng_name end as eng_name              
		from user u
		inner join role r on u.role = r.role_no
		left join user_teacher t on u.user_no = t.user_no
		left join user_student s on u.user_no = s.user_no
		where u.id=#{id} and u.pwd=#{password}
	</select>
	
	<!-- code 로그인 -->
	<select id="selectUserByCode" parameterType="hashmap" resultType="hashmap">
		select u.*, r.name as role_name, s.student_name as name 
		from user u
		inner join role r on u.role = r.role_no
		inner join user_student s on u.user_no = s.user_no
		where u.code=#{code} and s.student_status=1
	</select>
	
	<!-- user_student -->
	<select id="selectStudentAll" parameterType="hashmap" resultType="hashmap">
		select @rownum:=@rownum+1 as num, result.* from (
			select u.id, s.site_name, us.* from user_student us
			inner join user u on u.user_no=us.user_no
			inner join site s on s.site_no=us.site_no
			<where>
				<if test="keyword != null">
					<choose>
						<when test="searchType == 'all'">
							and (
								s.site_name like concat('%',#{keyword},'%') or
								us.student_name like concat('%',#{keyword},'%') or
								us.student_phone like concat('%',#{keyword},'%') or
								us.student_tel like concat('%',#{keyword},'%') or
								us.student_parent_name like concat('%',#{keyword},'%') or
								us.student_parent_phone like concat('%',#{keyword},'%')
							)
						</when>
						<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'student_name'">and us.student_name like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'student_phone'">and us.student_phone like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'student_tel'">and us.student_tel like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'student_parent_name'">and us.student_parent_name like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'student_parent_phone'">and us.student_parent_phone like concat('%',#{keyword},'%')</when>
					</choose>
				</if>
				  
				<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
					and us.site_no = #{searchSite}
				</if>
				<if test="searchStatus != null and searchStatus != '' and searchStatus != 'all'">
					and us.student_status = #{searchStatus}
				</if>
				
				<if test="searchStartDate != null and searchStartDate != '' and searchEndDate != null and searchEndDate != '' ">
					and date_format(us.student_regdate, '%Y-%m-%d') between #{searchStartDate} and #{searchEndDate}
				</if>
				<if test="(searchStartDate != null and searchStartDate != '') and (searchEndDate == null or searchEndDate == '') ">
					and date_format(us.student_regdate, '%Y-%m-%d') <![CDATA[ >= ]]> #{searchStartDate}
				</if>
				<if test="(searchStartDate == null or searchStartDate == '') and (searchEndDate != null and searchEndDate != '') ">
					and date_format(us.student_regdate, '%Y-%m-%d') <![CDATA[ <= ]]> #{searchEndDate}
				</if>
			</where>
			order by us.student_regdate asc
		) as result,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countStudentAll" parameterType="hashmap" resultType="int">
		select count(*) from user_student us
		inner join site s on s.site_no=us.site_no
		<where>
			<if test="keyword != null">
				<choose>
					<when test="searchType == 'all'">
						and (
							s.site_name like concat('%',#{keyword},'%') or
							us.student_name like concat('%',#{keyword},'%') or
							us.student_phone like concat('%',#{keyword},'%') or
							us.student_tel like concat('%',#{keyword},'%') or
							us.student_parent_name like concat('%',#{keyword},'%') or
							us.student_parent_phone like concat('%',#{keyword},'%')
						)
					</when>
					<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_name'">and us.student_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_phone'">and us.student_phone like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_tel'">and us.student_tel like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_parent_name'">and us.student_parent_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_parent_phone'">and us.student_parent_phone like concat('%',#{keyword},'%')</when>
				</choose>
			</if>
			<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
				and us.site_no = #{searchSite}
			</if>
			<if test="searchStatus != null and searchStatus != '' and searchStatus != 'all'">
				and us.student_status = #{searchStatus}
			</if>
			
			<if test="searchStartDate != null and searchStartDate != '' and searchEndDate != null and searchEndDate != '' ">
				and date_format(us.student_regdate, '%Y-%m-%d') between #{searchStartDate} and #{searchEndDate}
			</if>
			<if test="(searchStartDate != null and searchStartDate != '') and (searchEndDate == null or searchEndDate == '') ">
				and date_format(us.student_regdate, '%Y-%m-%d') <![CDATA[ >= ]]> #{searchStartDate}
			</if>
			<if test="(searchStartDate == null or searchStartDate == '') and (searchEndDate != null and searchEndDate != '') ">
				and date_format(us.student_regdate, '%Y-%m-%d') <![CDATA[ <= ]]> #{searchEndDate}
			</if>
		</where>
	</select>
	<update id="deleteUser" parameterType="hashmap">
		update user_student set student_status=0 where user_student_no=#{user_student_no}
	</update>
	<update id="restoreUser" parameterType="hashmap">
		update user_student set student_status=1 where user_student_no=#{user_student_no}
	</update>
	<select id="selectStudentOne" parameterType="hashmap" resultType="hashmap">
		select * from user_student where user_student_no=#{user_student_no}
	</select>
	<insert id="insertUser" parameterType="hashmap">
		insert into user(id, pwd, role) values(#{student_id}, #{student_pwd}, 3)
	</insert>
	<select id="selectUserPK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'user' and table_schema = 'SAEHALMSver31'
	</select>
	<insert id="insertUserStudent" parameterType="hashmap">
		insert into user_student(user_no, site_no, student_type, student_type_status, student_name, student_eng_name, student_birth, student_birth_type, student_sex, student_grade, student_email, student_email_status, student_phone, student_phone_status, student_tel, student_address, student_profile, student_etc, student_parent_name, student_parent_phone, student_parent_phone_status, student_invite, student_regdate, student_status)
		values(#{user_no}, #{site_no}, #{student_type}, #{student_type_status}, #{student_name}, #{student_eng_name}, #{student_birth}, #{student_birth_type}, #{student_sex}, #{student_grade}, #{student_email}, #{student_email_status}, #{student_phone}, #{student_phone_status}, #{student_tel}, #{student_address}, #{student_profile}, #{student_etc}, #{student_parent_name}, #{student_parent_phone}, #{student_parent_phone_status}, #{student_invite}, now(), #{student_status})
	</insert>
	<update id="updateUser" parameterType="hashmap">
		update user set code=#{student_phone} where user_no=#{user_no}
	</update>
	<update id="updateUserStudent" parameterType="hashmap">
		update user_student set
		site_no=#{site_no}, student_type=#{student_type}, student_type_status=#{student_type_status},
		student_name=#{student_name}, student_eng_name=#{student_eng_name}, student_birth=#{student_birth},
		student_birth_type=#{student_birth_type}, student_sex=#{student_sex}, student_grade=#{student_grade},
		student_email=#{student_email}, student_email_status=#{student_email_status}, student_phone=#{student_phone},
		student_phone_status=#{student_phone_status}, student_tel=#{student_tel}, student_address=#{student_address},
		student_profile=#{student_profile}, student_etc=#{student_etc}, student_parent_name=#{student_parent_name},
		student_parent_phone=#{student_parent_phone}, student_parent_phone_status=#{student_parent_phone_status},
		student_invite=#{student_invite}, student_status=#{student_status}
		where user_student_no=#{user_student_no}
	</update>
	<select id="selectUserStudentExcel" parameterType="hashmap" resultType="hashmap">
		select u.id, s.site_name, us.* from user_student us
		inner join user u on u.user_no=us.user_no
		inner join site s on s.site_no=us.site_no
		<where>
			<if test="keyword != null">
				<choose>
					<when test="searchType == 'all'">
						and (
							s.site_name like concat('%',#{keyword},'%') or
							us.student_name like concat('%',#{keyword},'%') or
							us.student_phone like concat('%',#{keyword},'%') or
							us.student_tel like concat('%',#{keyword},'%') or
							us.student_parent_name like concat('%',#{keyword},'%') or
							us.student_parent_phone like concat('%',#{keyword},'%')
						)
					</when>
					<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_name'">and us.student_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_phone'">and us.student_phone like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_tel'">and us.student_tel like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_parent_name'">and us.student_parent_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_parent_phone'">and us.student_parent_phone like concat('%',#{keyword},'%')</when>
				</choose>
			</if>
		</where>
	</select>
	<select id="selectUserStatus1" resultType="int">
		select user_student_no from user_student where student_status=1
	</select>
	
	<!-- user -->
	<select id="userIDCheck" parameterType="hashmap" resultType="int">
		select count(*) from user where id=#{id}
	</select>
	
	<!-- site -->
	<select id="selectSiteList" resultType="hashmap">
		select * from site
	</select>


	<select id="selectClassRoomAll" parameterType="hashmap" resultType="hashmap">
		select c.*, t.name as teacher_name, s.subject_name
		from saeha_class c inner join saeha_user t on c.teacher_no = t.no
		                   inner join saeha_subject s on c.subject_no = s.no
		where c.meeting_id is not null
		<if test="keyword != null">
			and (
				c.class_name like concat('%',#{keyword},'%') or
				t.name like concat('%',#{keyword},'%')
			)
		</if>
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countClassRoomAll" parameterType="hashmap" resultType="int">
		select count(*) 
		from saeha_class c inner join saeha_user t on c.teacher_no = t.no
		                   inner join saeha_subject s on c.subject_no = s.no
		where c.meeting_id is not null
		<if test="keyword != null">
			and (
				c.class_name like concat('%',#{keyword},'%') or
				t.name like concat('%',#{keyword},'%')
			)
		</if>
	</select>	
	
	<select id="selectTeacherAll" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select u.user_no, u.id, u.pwd, u.role 
							 , t.user_teacher_no, t.center_no, t.teacher_language_type, t.teacher_name, t.teacher_nickname
							 , t.teacher_class_type, t.teacher_national, t.teacher_phone, t.teacher_regdate, t.teacher_status, t.teacher_open_status		     
							 , c.center_name
						from user u inner join user_teacher t on u.user_no = t.user_no
									inner join center c on c.center_no = t.center_no
						where u.role = 2 
		                  <if test="searchCenter != null and searchCenter != 'all' and searchCenter != ''"> AND t.center_no = #{searchCenter} </if>
							<if test="searchTeacherNo != null and searchTeacherNo != 'all' and searchTeacherNo != ''"> AND t.user_teacher_no = #{searchTeacherNo}	</if>
							<if test="searchNation != null and searchNation != 'all' and searchNation != ''"> AND t.teacher_national = #{searchNation}	</if>
							<if test="searchClassType != null and searchClassType != 'all' and searchClassType != ''"> AND t.teacher_class_type = #{searchClassType} </if>
							<if test="searchStatus != null and searchStatus != 'all' and searchStatus != ''"> AND t.teacher_status = #{searchStatus} </if>
							<if test="searchOpenStatus != null and searchOpenStatus != 'all' and searchOpenStatus != ''"> AND t.teacher_open_status = #{searchOpenStatus} </if>
							<if test="searchTeacherName != null and searchTeacherName != 'all' and searchTeacherName != ''">
								AND ( u.id LIKE CONCAT('%', TRIM(#{searchTeacherName}), '%') or t.teacher_name LIKE CONCAT('%', TRIM(#{searchTeacherName}), '%') )
							</if>                
		              ) base
			   where 1=1
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.user_teacher_no
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countTeacherAll" parameterType="hashmap" resultType="int">
		select count(*)
		from user u inner join user_teacher t on u.user_no = t.user_no
		            inner join center c on c.center_no = t.center_no
		where u.role = 2	
		<if test="searchCenter != null and searchCenter != 'all' and searchCenter != ''"> AND t.center_no = #{searchCenter} </if>
		<if test="searchTeacherNo != null and searchTeacherNo != 'all' and searchTeacherNo != ''"> AND t.user_teacher_no = #{searchTeacherNo}	</if>
		<if test="searchNation != null and searchNation != 'all' and searchNation != ''"> AND t.teacher_national = #{searchNation}	</if>
		<if test="searchClassType != null and searchClassType != 'all' and searchClassType != ''"> AND t.teacher_class_type = #{searchClassType} </if>
		<if test="searchStatus != null and searchStatus != 'all' and searchStatus != ''"> AND t.teacher_status = #{searchStatus} </if>
		<if test="searchOpenStatus != null and searchOpenStatus != 'all' and searchOpenStatus != ''"> AND t.teacher_open_status = #{searchOpenStatus} </if>
		<if test="searchTeacherName != null and searchTeacherName != 'all' and searchTeacherName != ''">
			AND ( u.id LIKE CONCAT('%', TRIM(#{searchTeacherName}), '%') or t.teacher_name LIKE CONCAT('%', TRIM(#{searchTeacherName}), '%') )
		</if> 
	</select>
	
	<select id="selectCenterCombo" resultType="hashmap">
		select * from center
	</select>		
	<delete id="deleteTeacher" parameterType="hashmap">		
		delete from saeha_user where no = #{no}
	</delete>			
			
	
	<select id="selectCenterAll" parameterType="hashmap" resultType="hashmap">
		select t.* from (  
		   select @rownum:=@rownum+1 as rownum, sub.*  from ( 
		   
			  select base.* 
				from (select * from center ) base
			   where 1=1
				<if test="searchStatus != null and searchStatus != 'all' and searchStatus != ''">
					and center_status = #{searchStatus}
				</if>
				<if test="searchType != null and searchType != ''">		
					<choose>
						<when test="searchType == 'all' and keyword != ''">
							AND ( center_name Like CONCAT('%', TRIM(#{keyword}), '%')
							    or center_code Like CONCAT('%', TRIM(#{keyword}), '%')
								or center_ceo_phone Like CONCAT('%', TRIM(#{keyword}), '%')													
							)
						</when>				
						<when test="searchType == 'center_name'">AND center_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'center_code'">AND center_code Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'center_ceo_phone'">AND center_ceo_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
					</choose>						
				</if>  
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.center_no
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
		
	</select>
	<select id="countCenterAll" parameterType="hashmap" resultType="int">
		select count(*) from center
		where 1=1
		<if test="searchStatus != null and searchStatus != 'all' and searchStatus != '' ">
			and center_status = #{searchStatus}
		</if>
		<if test="searchType != null and searchType != ''">		
			<choose>
				<when test="searchType == 'all' and keyword != ''">
					AND ( center_name Like CONCAT('%', TRIM(#{keyword}), '%')
					    or center_code Like CONCAT('%', TRIM(#{keyword}), '%')
						or center_ceo_phone Like CONCAT('%', TRIM(#{keyword}), '%')													
					)
				</when>				
				<when test="searchType == 'center_name'">AND center_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'center_code'">AND center_code Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'center_ceo_phone'">AND center_ceo_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
			</choose>						
		</if>		
	</select>
	<select id="selectCenterOne" parameterType="hashmap" resultType="hashmap">
		select center_no, center_code, center_name, center_corporate_name, center_ceo, center_registration_number, center_telecommunication_number
			 , center_ceo_phone, center_ceo_email, center_ceo_fax, center_address
		     , center_manager_name, center_manager_phone, center_manager_email
		     , center_service_center_phone, center_service_center_normal_time, center_service_center_lunch_time, center_service_center_explain
		     , center_remote_center_phone, center_remote_center_normal_time, center_remote_center_lunch_time, center_remote_center_explain
		     , center_status, center_regdate
		     
		     , left(substring_index(center_service_center_normal_time, '/', 1), 2) as start_service_normal_hour 
		     , right(substring_index(center_service_center_normal_time, '/', 1), 2) as start_service_normal_min     
		     , left(substring_index(center_service_center_normal_time, '/', -1), 2) as end_service_normal_hour
		     , right(substring_index(center_service_center_normal_time, '/', -1), 2) as end_service_normal_min
		     
		     , left(substring_index(center_service_center_lunch_time, '/', 1), 2) as start_service_lunch_hour 
		     , right(substring_index(center_service_center_lunch_time, '/', 1), 2) as start_service_lunch_min     
		     , left(substring_index(center_service_center_lunch_time, '/', -1), 2) as end_service_lunch_hour
		     , right(substring_index(center_service_center_lunch_time, '/', -1), 2) as end_service_lunch_min     
		     
		     , left(substring_index(center_remote_center_normal_time, '/', 1), 2) as start_remote_normal_hour 
		     , right(substring_index(center_remote_center_normal_time, '/', 1), 2) as start_remote_normal_min     
		     , left(substring_index(center_remote_center_normal_time, '/', -1), 2) as end_remote_normal_hour
		     , right(substring_index(center_remote_center_normal_time, '/', -1), 2) as end_remote_normal_min
		     
		     , left(substring_index(center_remote_center_lunch_time, '/', 1), 2) as start_remote_lunch_hour 
		     , right(substring_index(center_remote_center_lunch_time, '/', 1), 2) as start_remote_lunch_min     
		     , left(substring_index(center_remote_center_lunch_time, '/', -1), 2) as end_remote_lunch_hour
		     , right(substring_index(center_remote_center_lunch_time, '/', -1), 2) as end_remote_lunch_min
		from center 
		where center_no = #{center_no}
	</select>
	
	<select id="getCenterCodeMaxNumber" resultType="hashmap">
		select max(RIGHT(center_code, 4)) as codeMaxNumber from center	
	</select>
	<insert id="insertCenter" parameterType="hashmap">		
		insert into center(center_code, center_name, center_corporate_name, center_ceo, center_registration_number, center_telecommunication_number
			 , center_ceo_phone, center_ceo_email, center_ceo_fax, center_address
		     , center_manager_name, center_manager_phone, center_manager_email
		     , center_service_center_phone, center_service_center_normal_time, center_service_center_lunch_time, center_service_center_explain
		     , center_remote_center_phone, center_remote_center_normal_time, center_remote_center_lunch_time, center_remote_center_explain
		     , center_status, center_regdate)
		values( #{center_code}, #{center_name}, #{center_corporate_name}, #{center_ceo}, #{center_registration_number}, #{center_telecommunication_number}
			 , #{center_ceo_phone}, #{center_ceo_email}, #{center_ceo_fax}, #{center_address}
		     , #{center_manager_name}, #{center_manager_phone}, #{center_manager_email}
		     , #{center_service_center_phone}, #{center_service_center_normal_time}, #{center_service_center_lunch_time}, #{center_service_center_explain}
		     , #{center_remote_center_phone}, #{center_remote_center_normal_time}, #{center_remote_center_lunch_time}, #{center_remote_center_explain}
		     , #{center_status}, now() )
	</insert>
	<update id="updateCenter" parameterType="hashmap">		
		update center
		set center_name = #{center_name}
		  , center_corporate_name = #{center_corporate_name}
		  , center_ceo = #{center_ceo}
		  , center_registration_number = #{center_registration_number}
		  , center_telecommunication_number = #{center_telecommunication_number}
		  , center_ceo_phone = #{center_ceo_phone}
		  , center_ceo_email = #{center_ceo_email}
		  , center_ceo_fax = #{center_ceo_fax}
		  , center_address = #{center_address}
		  , center_manager_name = #{center_manager_name}
		  , center_manager_phone = #{center_manager_phone}
		  , center_manager_email = #{center_manager_email}
		  , center_service_center_phone = #{center_service_center_phone}
		  , center_service_center_normal_time = #{center_service_center_normal_time}
		  , center_service_center_lunch_time = #{center_service_center_lunch_time}
		  , center_service_center_explain = #{center_service_center_explain}
		  , center_remote_center_phone = #{center_remote_center_phone}
		  , center_remote_center_normal_time = #{center_remote_center_normal_time}
		  , center_remote_center_lunch_time = #{center_remote_center_lunch_time}
		  , center_remote_center_explain = #{center_remote_center_explain}
		  , center_status = #{center_status}
		where center_no = #{center_no}
	</update>
	
	<select id="selectSiteAll" parameterType="hashmap" resultType="hashmap">
		select t.* from (  
		   select @rownum:=@rownum+1 as rownum, sub.*  from ( 
		   
			  select base.* 
				from (select * from site ) base
			   where 1=1
				<if test="searchStatus != null and searchStatus != 'all' and searchStatus != '' ">
					and site_status = #{searchStatus}
				</if>
				<if test="searchType != null and searchType != ''">		
					<choose>
						<when test="searchType == 'all' and keyword != ''">
							AND ( site_name Like CONCAT('%', TRIM(#{keyword}), '%')
							    or site_code Like CONCAT('%', TRIM(#{keyword}), '%')
								or site_ceo_phone Like CONCAT('%', TRIM(#{keyword}), '%')
								or site_url Like CONCAT('%', TRIM(#{keyword}), '%')													
							)
						</when>				
						<when test="searchType == 'site_name'">AND site_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'site_code'">AND site_code Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'site_ceo_phone'">AND site_ceo_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'site_url'">AND site_url Like CONCAT('%', TRIM(#{keyword}), '%')</when>
					</choose>						
				</if>         
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.site_code
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
		
	</select>
	<select id="countSiteAll" parameterType="hashmap" resultType="int">
		select count(*) from site
		where 1=1
		<if test="searchStatus != null and searchStatus != 'all' and searchStatus != '' ">
			and site_status = #{searchStatus}
		</if>
		<if test="searchType != null and searchType != ''">		
			<choose>
				<when test="searchType == 'all' and keyword != ''">
					AND ( site_name Like CONCAT('%', TRIM(#{keyword}), '%')
					    or site_code Like CONCAT('%', TRIM(#{keyword}), '%')
						or site_ceo_phone Like CONCAT('%', TRIM(#{keyword}), '%')
						or site_url Like CONCAT('%', TRIM(#{keyword}), '%')													
					)
				</when>				
				<when test="searchType == 'site_name'">AND site_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'site_code'">AND site_code Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'site_ceo_phone'">AND site_ceo_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'site_url'">AND site_url Like CONCAT('%', TRIM(#{keyword}), '%')</when>
			</choose>						
		</if>		
	</select>
	<select id="selectSiteOne" parameterType="hashmap" resultType="hashmap">
		select site_no, site_code, site_name, site_corporate_name, site_ceo, site_registration_number, site_telecommunication_number, site_ceo_phone
		     , site_ceo_email, site_ceo_fax, site_address, site_manager_name, site_manager_phone, site_manager_email
		     , site_service_center_phone, site_service_center_normal_time, site_service_center_lunch_time, site_service_center_explain
		     , site_remote_center_phone, site_remote_center_normal_time, site_remote_center_lunch_time, site_remote_center_explain
		     , site_url, site_top_logo, site_bottom_logo, site_status, site_regdate
		     , site_leveltest_limit, site_leveltest_status, site_face_type, site_call_type
		     , site_enrolment_way, site_common_product_status, site_study_startdate_way, site_bank_name1, site_bank_number1, site_bank_owner1
		     , site_bank_name2, site_bank_number2, site_bank_owner2, site_parcel, site_enrolment_text, site_free_study_status, site_teacher_select
		     , site_study_ticket_status, site_ebook_status, site_language
		     , center_no
		     , teacher_group_no 
		     
		     , left(substring_index(site_service_center_normal_time, '/', 1), 2) as start_service_normal_hour 
			 , right(substring_index(site_service_center_normal_time, '/', 1), 2) as start_service_normal_min     
			 , left(substring_index(site_service_center_normal_time, '/', -1), 2) as end_service_normal_hour
			 , right(substring_index(site_service_center_normal_time, '/', -1), 2) as end_service_normal_min
			 
			 , left(substring_index(site_service_center_lunch_time, '/', 1), 2) as start_service_lunch_hour 
			 , right(substring_index(site_service_center_lunch_time, '/', 1), 2) as start_service_lunch_min     
			 , left(substring_index(site_service_center_lunch_time, '/', -1), 2) as end_service_lunch_hour
			 , right(substring_index(site_service_center_lunch_time, '/', -1), 2) as end_service_lunch_min     
			 
			 , left(substring_index(site_remote_center_normal_time, '/', 1), 2) as start_remote_normal_hour 
			 , right(substring_index(site_remote_center_normal_time, '/', 1), 2) as start_remote_normal_min     
			 , left(substring_index(site_remote_center_normal_time, '/', -1), 2) as end_remote_normal_hour
			 , right(substring_index(site_remote_center_normal_time, '/', -1), 2) as end_remote_normal_min
			 
			 , left(substring_index(site_remote_center_lunch_time, '/', 1), 2) as start_remote_lunch_hour 
			 , right(substring_index(site_remote_center_lunch_time, '/', 1), 2) as start_remote_lunch_min     
			 , left(substring_index(site_remote_center_lunch_time, '/', -1), 2) as end_remote_lunch_hour
			 , right(substring_index(site_remote_center_lunch_time, '/', -1), 2) as end_remote_lunch_min
		     
		from site
		where site_no = #{site_no}
	</select>	
	<select id="getSiteCodeMaxNumber" resultType="hashmap">
		select max(RIGHT(site_code, 4)) as codeMaxNumber from site	
	</select>
	<insert id="insertSite" parameterType="hashmap">		
		insert into site (site_code, site_name, site_corporate_name, site_ceo, site_registration_number, site_telecommunication_number, site_ceo_phone
		     , site_ceo_email, site_ceo_fax, site_address, site_manager_name, site_manager_phone, site_manager_email
		     , site_service_center_phone, site_service_center_normal_time, site_service_center_lunch_time, site_service_center_explain
		     , site_remote_center_phone, site_remote_center_normal_time, site_remote_center_lunch_time, site_remote_center_explain
		     , site_url, site_top_logo, site_bottom_logo, site_status, site_regdate
		     , site_leveltest_limit, site_leveltest_status, site_face_type, site_call_type
		     , site_enrolment_way, site_common_product_status, site_study_startdate_way, site_bank_name1, site_bank_number1, site_bank_owner1
		     , site_bank_name2, site_bank_number2, site_bank_owner2, site_parcel, site_enrolment_text, site_free_study_status, site_teacher_select
		     , site_study_ticket_status, site_ebook_status, site_language
		     <if test="center_no != '' ">
				, center_no	
			 </if>
			 <if test="teacher_group_no != '' ">
				, teacher_group_no	
			 </if>
		     
		     )
		values ( #{site_code}, #{site_name}, #{site_corporate_name}, #{site_ceo}, #{site_registration_number}, #{site_telecommunication_number}, #{site_ceo_phone}
		     , #{site_ceo_email}, #{site_ceo_fax}, #{site_address}, #{site_manager_name}, #{site_manager_phone}, #{site_manager_email}
		     , #{site_service_center_phone}, #{site_service_center_normal_time}, #{site_service_center_lunch_time}, #{site_service_center_explain}
		     , #{site_remote_center_phone}, #{site_remote_center_normal_time}, #{site_remote_center_lunch_time}, #{site_remote_center_explain}
		     , #{site_url}, #{site_top_logo}, #{site_bottom_logo}, #{site_status}, now()
		     , #{site_leveltest_limit}, #{site_leveltest_status}, #{site_face_type}, #{site_call_type}
		     , #{site_enrolment_way}, #{site_common_product_status}, #{site_study_startdate_way}, #{site_bank_name1}, #{site_bank_number1}, #{site_bank_owner1}
		     , #{site_bank_name2}, #{site_bank_number2}, #{site_bank_owner2}, #{site_parcel}, #{site_enrolment_text}, #{site_free_study_status}, #{site_teacher_select}
		     , #{site_study_ticket_status}, #{site_ebook_status}, #{site_language}
		     <if test="center_no != '' ">
				, #{center_no}
			 </if>
		     <if test="teacher_group_no != '' ">
				, #{teacher_group_no}	
			 </if>
			 		     
		     )
	</insert>
	<update id="updateSite" parameterType="hashmap">		
		update site
		set site_name = #{site_name}
		  , site_corporate_name = #{site_corporate_name}
		  , site_ceo = #{site_ceo}
		  , site_registration_number = #{site_registration_number}
		  , site_telecommunication_number = #{site_telecommunication_number}
		  , site_ceo_phone = #{site_ceo_phone}
		  , site_ceo_email = #{site_ceo_email}
		  , site_ceo_fax = #{site_ceo_fax}
		  , site_address = #{site_address}
		  , site_manager_name = #{site_manager_name}
		  , site_manager_phone = #{site_manager_phone}
		  , site_manager_email = #{site_manager_email}
		  , site_service_center_phone = #{site_service_center_phone}
		  , site_service_center_normal_time = #{site_service_center_normal_time}
		  , site_service_center_lunch_time = #{site_service_center_lunch_time}
		  , site_service_center_explain = #{site_service_center_explain}
		  , site_remote_center_phone = #{site_remote_center_phone}
		  , site_remote_center_normal_time = #{site_remote_center_normal_time}
		  , site_remote_center_lunch_time = #{site_remote_center_lunch_time}
		  , site_remote_center_explain = #{site_remote_center_explain}
		  , site_url = #{site_url}
		  , site_top_logo = #{site_top_logo}
		  , site_bottom_logo = #{site_bottom_logo}
		  , site_status = #{site_status}  
		  , site_leveltest_limit = #{site_leveltest_limit}
		  , site_leveltest_status = #{site_leveltest_status}
		  , site_face_type = #{site_face_type}
		  , site_call_type = #{site_call_type}
		  , site_enrolment_way = #{site_enrolment_way}
		  , site_common_product_status = #{site_common_product_status}
		  , site_study_startdate_way = #{site_study_startdate_way}
		  , site_bank_name1 = #{site_bank_name1}
		  , site_bank_number1 = #{site_bank_number1}
		  , site_bank_owner1 = #{site_bank_owner1}
		  , site_bank_name2 = #{site_bank_name2}
		  , site_bank_number2 = #{site_bank_number2}
		  , site_bank_owner2 = #{site_bank_owner2}
		  , site_parcel = #{site_parcel}
		  , site_enrolment_text = #{site_enrolment_text}
		  , site_free_study_status = #{site_free_study_status}
		  , site_teacher_select = #{site_teacher_select}
		  , site_study_ticket_status = #{site_study_ticket_status}
		  , site_ebook_status = #{site_ebook_status}
		  , site_language = #{site_language}
		    
		  <if test="center_no != '' ">
			, center_no = #{center_no}
		  </if> 
		  <if test="center_no == '' ">
			, center_no = null
		  </if>
		  
		  <if test="teacher_group_no != '' ">
			, teacher_group_no = #{teacher_group_no}
		  </if> 
		  <if test="teacher_group_no == '' ">
			, teacher_group_no = null
		  </if>
		where site_no = #{site_no}
	</update>	
	<select id="selectLastAISite" resultType="int">
		select auto_increment from information_schema.tables where table_name = 'site' and table_schema = 'SAEHALMSver31'
	</select>
	<select id="selectSiteLeveltestLimit" parameterType="hashmap" resultType="int">
		select site_leveltest_limit from site where site_no=#{site_no}
	</select>
	
	<insert id="insertUserByTeacher" parameterType="hashmap">
		insert into user(id, pwd, role)
		values(#{id}, #{pwd}, 2)
	</insert>
	<insert id="insertTeacher" parameterType="hashmap">
		insert into user_teacher(user_no, center_no, teacher_language_type, teacher_nickname, teacher_name, teacher_class_type, teacher_national
							, teacher_phone , teacher_regdate, teacher_open_status, teacher_status, teacher_study_time)
		values (#{user_no}, #{center_no}, #{teacher_language_type}, #{teacher_nickname}, #{teacher_name}, #{teacher_class_type}, #{teacher_national}
							, #{teacher_phone} , now(), 0, 1, '0000/0000')
	</insert>
	<select id="selectTeacherOne" parameterType="hashmap" resultType="hashmap">
		select t.user_teacher_no, t.user_no, t.center_no, t.teacher_language_type, t.teacher_nickname, t.teacher_name, t.teacher_class_type, t.teacher_national 
		     , t.teacher_phone , t.teacher_regdate, t.teacher_open_status, t.teacher_status, u.id, u.pwd, u.role, c.center_name, t.teacher_study_time   
		     , substring_index(t.teacher_study_time, '/', 1) as start_time
			 , left(substring_index(t.teacher_study_time, '/', 1), 2) start_hour
		     , right(substring_index(t.teacher_study_time, '/', 1), 2) start_min     
		     , substring_index(t.teacher_study_time, '/', -1) as end_time
		     , left(substring_index(t.teacher_study_time, '/', -1), 2) end_hour
		     , right(substring_index(t.teacher_study_time, '/', -1), 2) end_min     
		from user_teacher t inner join user u on t.user_no = u.user_no
		                    inner join center c on t.center_no = c.center_no
		where t.user_teacher_no = #{user_teacher_no}
	</select>
	
	<select id="getTeacherInfo" parameterType="hashmap" resultType="hashmap">
		select t.*, u.id, u.pwd
		from user_teacher t
		inner join user u on u.user_no = t.user_no
		where t.user_no = #{user_no}
	</select>	
	
	<select id="getTimeTable" parameterType="hashmap" resultType="String">
		select able_time from teacher_timetable where user_teacher_no = #{user_teacher_no}				
	</select>
	<update id="updateUserByTeacher" parameterType="hashmap">		
		update user
		set pwd = #{pwd}		  
		where user_no = #{user_no}
	</update>
	<update id="updateTeacher" parameterType="hashmap">
		update user_teacher
		set teacher_nickname = #{teacher_nickname}
		  , teacher_language_type = #{teacher_language_type}
		  , teacher_name = #{teacher_name}
		  , teacher_open_status = #{teacher_open_status}
		  , teacher_status = #{teacher_status}
		  , teacher_class_type = #{teacher_class_type}
		  , teacher_national = #{teacher_national}
		  , teacher_study_time = #{teacher_study_time}
		where user_teacher_no = #{user_teacher_no}
	</update>
	<delete id="deleteTimeTable" parameterType="hashmap">		
		delete from teacher_timetable where user_teacher_no = #{user_teacher_no}
	</delete>	
	<insert id="insertTimeTable" parameterType="hashmap">		
		insert into teacher_timetable(user_teacher_no, able_time)
		values(#{user_teacher_no}, #{able_time})
	</insert>
	<select id="selectTeacherCombo" resultType="hashmap">
		select * from user_teacher
	</select>			
	<delete id="deleteTeacherCheckedItem" parameterType="int">
		delete from user where user_no = #{userNo}
	</delete>
	<select id="selectTeacherComboByCenterNo" resultType="hashmap" parameterType="hashmap">
		select * from user_teacher where center_no = #{searchCenter}
	</select>
	<select id="getTeacherHoliday" resultType="hashmap" parameterType="hashmap">
		select * from teacher_holiday where user_teacher_no = #{user_teacher_no}
		order by teacher_holiday_date desc
	</select>	
	<delete id="deleteTeacherHoliday" parameterType="hashmap">		
		delete from teacher_holiday where teacher_holiday_no = #{teacher_holiday_no}
	</delete>
	<insert id="insertTeacherHoliday" parameterType="hashmap">		
		insert into teacher_holiday(user_teacher_no, teacher_holiday_date)
		values(#{user_teacher_no}, #{teacher_holiday_date})
	</insert>
	<select id="getDuplTeacherHoliday" resultType="int" parameterType="hashmap">
		select count(*) from teacher_holiday where user_teacher_no = #{user_teacher_no} and teacher_holiday_date = #{teacher_holiday_date}
	</select>
	
	<!-- study -->
	<select id="selectStudyAll" parameterType="hashmap" resultType="hashmap">
		select * from study
		<where>
			<if test="keyword != null">
				and (
					study_name like concat('%',#{keyword},'%')
				)
			</if>
		</where>
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countStudyAll" resultType="int">
		select count(*) from study
	</select>
	<select id="selectStudyOne" parameterType="hashmap" resultType="hashmap">
		select * from study where study_no=#{study_no}
	</select>
	<insert id="insertStudy" parameterType="hashmap">
		insert into study(study_language, study_name, study_target, study_type, study_target_explain, study_purpose, study_point, study_regdate, study_status)
		values(#{study_language}, #{study_name}, #{study_target}, #{study_type}, #{study_target_explain}, #{study_purpose}, #{study_point}, now(), #{study_status})
	</insert>
	<select id="selectStudyPK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'study' and table_schema = 'SAEHALMSver31'
	</select>
	<update id="updateStudy" parameterType="hashmap">
		update study set study_language=#{study_language}, study_name=#{study_name}, study_target=#{study_target}, study_type=#{study_type},
		study_target_explain=#{study_target_explain}, study_purpose=#{study_purpose}, study_point=#{study_point}, study_status=#{study_status}
		where study_no=#{study_no}
	</update>
	<delete id="deleteStudy" parameterType="hashmap">
		delete from study where study_no=#{study_no}
	</delete>
	<select id="selectStudyLang" parameterType="hashmap" resultType="hashmap">
		select * from study where study_language=#{study_language} and study_status=#{study_status}
	</select>
	<select id="selectStudyHaveLevel" resultType="hashmap">
		select s.* from study s
		inner join study_level sl on s.study_no=sl.study_no
		group by s.study_no
	</select>
	
	<!-- study_level -->
	<select id="selectStudyLevelAll" parameterType="hashmap" resultType="hashmap">
		select * from study_level where study_no=#{study_no} order by level asc
	</select>
	<select id="selectStudyLevelMax" parameterType="hashmap" resultType="int">
		select ifnull(max(level), 0) from study_level where study_no=#{study_no}
	</select>
	<insert id="insertStudyLevel" parameterType="hashmap">
		insert into study_level(study_no, level, level_name, level_eng_name, study_level_status)
		values(#{study_no}, #{level}, #{level_name}, #{level_eng_name}, 1)
	</insert>
	<update id="updateStudyLevel" parameterType="hashmap">
		update study_level set level=#{level}, level_name=#{level_name}, level_eng_name=#{level_eng_name}, study_level_status=#{study_level_status} where study_level_no=#{study_level_no}
	</update>
	<delete id="deleteStudyLevel" parameterType="hashmap">
		delete from study_level where study_level_no=#{study_level_no}
	</delete>
	
	<!-- study_not_used_site -->
	<insert id="insertStudyNotUsedSite" parameterType="hashmap">
		insert into study_not_used_site(study_no, site_no) values(#{study_no}, #{site_no})
	</insert>
	<select id="selectStudyNotUsedSite" parameterType="hashmap" resultType="hashmap">
		select * from study_not_used_site where study_no=#{study_no}
	</select>
	<delete id="deleteStudyNotUsedSite" parameterType="hashmap">
		delete from study_not_used_site where study_no=#{study_no}
	</delete>
	
	<select id="selectStartTimeAll" parameterType="hashmap" resultType="hashmap">
		select t.* from (  
		   select @rownum:=@rownum+1 as rownum, sub.*  from ( 
		   
			  select base.* 
				from (select s.*, ifnull(l.start_time, "") as start_time
						from study_start_time s		
						left join (select study_start_time_no, group_concat(concat( left(start_time, 2), ":", right(start_time, 2) )) start_time 
									 from study_start_time_log group by study_start_time_no) l on s.study_start_time_no = l.study_start_time_no ) base
			   where 1=1
				<if test="searchLanguage != null and searchLanguage != 'all' ">
					and language_type = #{searchLanguage}
				</if>
				<if test="searchRunningTime != null and searchRunningTime != 'all' ">
					and running_time = #{searchRunningTime}
				</if>
		         
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.language_type, sub.running_time desc
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countStartTimeAll" parameterType="hashmap" resultType="int">
		select count(*)
		from study_start_time s
		left join (select study_start_time_no, group_concat(start_time) start_time from study_start_time_log) l on s.study_start_time_no = l.study_start_time_no
		where 1=1 		
		<if test="searchLanguage != null and searchLanguage != 'all' ">
			and s.language_type = #{searchLanguage}
		</if>
		<if test="searchRunningTime != null and searchRunningTime != 'all' ">
			and s.running_time = #{searchRunningTime}
		</if>
	</select>
	<select id="getStartTimeDuplCnt" parameterType="hashmap" resultType="int">
		select count(*) from study_start_time_log where study_start_time_no = #{study_start_time_no} and start_time = #{start_time}
	</select>
	<insert id="insertStartTime" parameterType="hashmap">
		insert into study_start_time(language_type, running_time)
		values(#{language_type}, #{running_time})
	</insert>
	<select id="selectStartTimeOne" parameterType="hashmap" resultType="hashmap">
		select * from study_start_time where language_type = #{language_type} and running_time = #{running_time} 		
	</select>
	<select id="selectLastAIStudyStartTime" resultType="int">
		select auto_increment from information_schema.tables where table_name = 'study_start_time' and table_schema = 'SAEHALMSver31'
	</select>
	<insert id="insertStartTimeLog" parameterType="hashmap">
		insert into study_start_time_log(study_start_time_no, start_time)
		values(#{study_start_time_no}, #{start_time})
	</insert>
	<select id="selectStartTimeLogAll" parameterType="hashmap" resultType="hashmap">
		select * from study_start_time_log where study_start_time_no = #{study_start_time_no}
	</select>
	<select id="getStudyStartTime" parameterType="hashmap" resultType="hashmap">
		select * from study_start_time where study_start_time_no = #{study_start_time_no}
	</select>
	<delete id="deleteStartTimeLog" parameterType="hashmap">
		delete from study_start_time_log where study_start_time_no = #{study_start_time_no}
	</delete>
	<delete id="deleteStartTimeCheckedItem" parameterType="hashmap">
		delete from study_start_time where study_start_time_no=#{study_start_time_no}
	</delete>
	<select id="selectHolidayAll" parameterType="hashmap" resultType="hashmap">
		select t.* from (  
		   select @rownum:=@rownum+1 as rownum, sub.*  from ( 
		   
			  select base.* 
				from (select * from holiday ) base
			   where 1=1				 
				 <if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != '' ">
					and language_type = #{searchLanguage}
				 </if>	
		         
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.holiday_date
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}	
	</select>
	<select id="countHolidayAll" parameterType="hashmap" resultType="int">
		select count(*)
		from holiday		
		where 1=1		  		  	  
		<if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != '' ">
			and language_type = #{searchLanguage}
		</if>		
	</select>
	<select id="getDuplHoliday" resultType="int" parameterType="hashmap">
		select count(*) from holiday where language_type = #{language_type} and holiday_date = #{holiday_date}
	</select>
	<insert id="insertHoliday" parameterType="hashmap">
		insert into holiday(language_type, holiday_date, holiday_name)
		values(#{language_type}, #{holiday_date}, #{holiday_name})
	</insert>
	<select id="selectHolidayOne" parameterType="hashmap" resultType="hashmap">
		select * from holiday where holiday_no = #{holiday_no}
	</select>
	<update id="updateHoliday" parameterType="hashmap">
		update holiday
		set holiday_date = #{holiday_date}
		  , holiday_name = #{holiday_name}
		where holiday_no = #{holiday_no}
	</update>
	<delete id="deleteHolidayCheckedItem" parameterType="int">
		delete from holiday where holiday_no = #{holiday_no}
	</delete>
	<select id="selectClassScheduleAll" parameterType="hashmap" resultType="hashmap">
		select t.* from (  
		   select @rownum:=@rownum+1 as rownum, sub.*  from ( 
		   
			  select base.* 
				from (select * from schedule_class ) base
			   where 1=1			     
				<if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != '' ">
					and language_type = #{searchLanguage}
				</if>
				
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.semester_ym
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countClassScheduleAll" parameterType="hashmap" resultType="int">
		select count(*)
		from schedule_class		
		where 1=1
		<if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != '' ">
			and language_type = #{searchLanguage}
		</if>		
	</select>
	<select id="getDuplClassSchedule" parameterType="hashmap" resultType="int">
		select count(*) from schedule_class where language_type = #{language_type} and semester_ym = #{semester_ym}
	</select>
	<select id="getContainClassSchedule" parameterType="hashmap" resultType="int">
		select count(*)
		from schedule_class
		where language_type = #{language_type}
		and ((class_start_date between #{class_start_date} and #{class_end_date}) or (class_end_date between #{class_start_date} and #{class_end_date}))
	</select>
	<select id="getContainReAppCntClassSchedule" parameterType="hashmap" resultType="int">
		select count(*)
		from schedule_class
		where language_type = #{language_type}
		and ((reapplication_start_date between #{reapplication_start_date} and #{reapplication_end_date}) or (reapplication_end_date between #{reapplication_start_date} and #{reapplication_end_date}))
	</select>
	<select id="getContainAppCntClassSchedule" parameterType="hashmap" resultType="int">
		select count(*)
		from schedule_class
		where language_type = #{language_type}
		and ((application_start_date between #{application_start_date} and #{application_end_date}) or (application_end_date between #{application_start_date} and #{application_end_date}))
	</select>
	<select id="getContainClassScheduleByUpdate" parameterType="hashmap" resultType="int">
		select count(*)
		from schedule_class
		where schedule_class_no != #{schedule_class_no}
		and language_type = #{language_type}
		and ((class_start_date between #{class_start_date} and #{class_end_date}) or (class_end_date between #{class_start_date} and #{class_end_date}))
	</select>
	<select id="getContainReAppCntClassScheduleByUpdate" parameterType="hashmap" resultType="int">
		select count(*)
		from schedule_class
		where schedule_class_no != #{schedule_class_no} 
		and language_type = #{language_type}
		and ((reapplication_start_date between #{reapplication_start_date} and #{reapplication_end_date}) or (reapplication_end_date between #{reapplication_start_date} and #{reapplication_end_date}))
	</select>
	<select id="getContainAppCntClassScheduleByUpdate" parameterType="hashmap" resultType="int">
		select count(*)
		from schedule_class
		where schedule_class_no != #{schedule_class_no} 
		and language_type = #{language_type}
		and ((application_start_date between #{application_start_date} and #{application_end_date}) or (application_end_date between #{application_start_date} and #{application_end_date}))
	</select>
	<insert id="insertClassSchedule" parameterType="hashmap">
		insert into schedule_class(language_type, semester_ym, reapplication_start_date, reapplication_end_date
		               , application_start_date, application_end_date, class_start_date, class_end_date
		               , level_application_start_date, level_application_end_date
		               , schedule_class_status, saturday_status, sunday_status)
		values (#{language_type}, #{semester_ym}, #{reapplication_start_date}, #{reapplication_end_date}
		      , #{application_start_date}, #{application_end_date}, #{class_start_date}, #{class_end_date}
		      , #{level_application_start_date}, #{level_application_end_date}
		      , #{schedule_class_status}, #{saturday_status}, #{sunday_status})
	</insert>
	<select id="selectClassScheduleOne" parameterType="hashmap" resultType="hashmap">
		select * from schedule_class where schedule_class_no = #{schedule_class_no} 		
	</select>
	<update id="updateClassSchedule" parameterType="hashmap">
		update schedule_class
		set semester_ym = #{semester_ym}
		  , reapplication_start_date = #{reapplication_start_date}
		  , reapplication_end_date = #{reapplication_end_date}
		  , application_start_date = #{application_start_date}
		  , application_end_date = #{application_end_date}
		  , class_start_date = #{class_start_date}
		  , class_end_date = #{class_end_date}
		  , schedule_class_status = #{schedule_class_status}
		  , saturday_status = #{saturday_status}
		  , sunday_status = #{sunday_status}
		  , level_application_start_date = #{level_application_start_date}
		  , level_application_end_date = #{level_application_end_date}
		where schedule_class_no = #{schedule_class_no}
	</update>
	<delete id="deleteClassSchedule" parameterType="hashmap">
		delete from schedule_class where schedule_class_no = #{schedule_class_no}
	</delete>
	
	<select id="selectSiteClassScheduleAll" parameterType="hashmap" resultType="hashmap">
		select t.* from (  
		   select @rownum:=@rownum+1 as rownum, sub.*  from ( 
		   
			  select base.* 
				from (select a.*, s.site_name 
						from schedule_class_site a inner join site s on a.site_no = s.site_no ) base
			   where 1=1			     
				<if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != '' ">
					and language_type = #{searchLanguage}
				</if>
				<if test="searchSite != null and searchSite != 'all' and searchSite != '' ">
					and site_no = #{searchSite}
				</if>
				
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.semester_ym
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countSiteClassScheduleAll" parameterType="hashmap" resultType="int">
		select count(*)
		from schedule_class_site		
		where 1=1
		<if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != '' ">
			and language_type = #{searchLanguage}
		</if>
		<if test="searchSite != null and searchSite != 'all' and searchSite != '' ">
			and site_no = #{searchSite}
		</if>		
	</select>
	<select id="selectSemesterYmComboByLanguage" resultType="hashmap" parameterType="hashmap">
		select distinct semester_ym from schedule_class where language_type = #{language_type} 
	</select>
	<select id="getDuplClassScheduleSite" parameterType="hashmap" resultType="int">
		select count(*) from schedule_class_site where site_no = #{site_no} and language_type = #{language_type} and semester_ym = #{semester_ym}
	</select>
	
	<!-- 수업일, 신청시작일 등 관련 검증 추가 -->
	<select id="selectScheduleClassSite" resultType="hashmap" parameterType="hashmap">
		select * from schedule_class_site
		where site_no = #{site_no} and language_type = #{language_type}
	</select>
	<select id="selectProductBySite" resultType="hashmap" parameterType="hashmap">
      select * from product where site_no = #{site_no} and product_language = #{language_type}
    </select>
	<select id="getContainReAppCntClassScheduleBySite" parameterType="hashmap" resultType="int">
		select count(*) from schedule_class_site
		where language_type = #{language_type} and site_no = #{site_no}
		and ((reapplication_start_date between #{reapplication_start_date} and #{reapplication_end_date}) or (reapplication_end_date between #{reapplication_start_date} and #{reapplication_end_date}))
	</select>
	<select id="getContainAppCntClassScheduleBySite" parameterType="hashmap" resultType="int">
		select count(*) from schedule_class_site
		where language_type = #{language_type} and site_no = #{site_no}
		and ((application_start_date between #{application_start_date} and #{application_end_date}) or (application_end_date between #{application_start_date} and #{application_end_date}))
	</select>
	<select id="getContainReAppCntClassScheduleByUpdateSite" parameterType="hashmap" resultType="int">
		select count(*) from schedule_class_site
		where schedule_class_site_no != #{schedule_class_site_no}
		and language_type = #{language_type} and site_no = #{site_no}
		and ((reapplication_start_date between #{reapplication_start_date} and #{reapplication_end_date}) or (reapplication_end_date between #{reapplication_start_date} and #{reapplication_end_date}))
	</select>
	<select id="getContainAppCntClassScheduleByUpdateSite" parameterType="hashmap" resultType="int">
		select count(*) from schedule_class_site
		where schedule_class_site_no != #{schedule_class_site_no} 
		and language_type = #{language_type} and site_no = #{site_no}
		and ((application_start_date between #{application_start_date} and #{application_end_date}) or (application_end_date between #{application_start_date} and #{application_end_date}))
	</select>
	
	<insert id="insertClassScheduleSite" parameterType="hashmap">
		insert into schedule_class_site(site_no, language_type, semester_ym, reapplication_start_date, reapplication_end_date, application_start_date, application_end_date							
		                            , class_start_date, level_application_start_date, level_application_end_date
		)
		values (#{site_no}, #{language_type}, #{semester_ym}, #{reapplication_start_date}, #{reapplication_end_date}, #{application_start_date}, #{application_end_date}
				, #{class_start_date}, #{level_application_start_date}, #{level_application_end_date}
		)
	</insert>
	<select id="selectClassScheduleSiteOne" parameterType="hashmap" resultType="hashmap">
		select a.*, s.site_name from schedule_class_site a inner join site s on a.site_no = s.site_no 
		where a.schedule_class_site_no = #{schedule_class_site_no}
	</select>
	<update id="updateClassScheduleSite" parameterType="hashmap">
		update schedule_class_site
		   set reapplication_start_date = #{reapplication_start_date}
			  , reapplication_end_date = #{reapplication_end_date}
			  , application_start_date = #{application_start_date}
			  , application_end_date = #{application_end_date}
		      , class_start_date = #{class_start_date}
		      , level_application_start_date = #{level_application_start_date}
		      , level_application_end_date = #{level_application_end_date}
		where schedule_class_site_no = #{schedule_class_site_no}
	</update>
	<delete id="deleteClassScheduleSite" parameterType="hashmap">
		delete from schedule_class_site where schedule_class_site_no = #{schedule_class_site_no}
	</delete>
	
	<select id="selectClassInfoAll" parameterType="hashmap" resultType="hashmap">
		select t.* from (  
		   select @rownum:=@rownum+1 as rownum, sub.*  from ( 
		   
			  select base.* 
				from ( select 'class' as flag, c.class_no as no, c.room_no
							 , p.site_name, txt.study_name, 'regular class' as day_type
							 , p.product_name, c.start_date, ifnull(c.end_date, "") as end_date
							 , p.product_type			-- Video, VR ...
							 , p.product_week			-- tue/thu ...
							 , p.product_personnel		-- 1:1, 1:2						     
							 , ifnull(c.class_time, "") as class_time, p.product_running_time as running_time
						     , ifnull(t.teacher_name, "") teacher_name , ifnull(t.teacher_id, "") teacher_id
							 , st.user_student_no, txt.textbook_name, s.student_name, ifnull(s.student_eng_name, "") student_eng_name, s.student_phone
							 , ifnull(s.student_blacklist_status, '0') student_blacklist_status 
							 , (select count(*) from class_student ia where ia.class_no = c.class_no) as class_student_cnt
							 
							 , s.site_no, t.center_no
							 , if(c.class_status = 0, '대기', if(c.class_status = 2, '취소', if(c.class_status = 1, if(c.end_date <![CDATA[ < ]]> current_date(), '학습종료', '수업중'), ''))) as status
							 , if(c.class_status = 0, 'wating', if(c.class_status = 2, 'cancel', if(c.class_status = 1, if(c.end_date <![CDATA[ < ]]> current_date(), '수업종료', 'on class'), ''))) as class_condition
							 , p.product_language as language, txt.study_no, c.textbook_no             
						from class c 
						inner join class_student st on c.class_no = st.class_no
						inner join (select ia.*, ib.site_name                  
									from user_student ia 
									inner join site ib on ia.site_no = ib.site_no
									inner join user ic on ia.user_no = ic.user_no
									) s on st.user_student_no = s.user_student_no
						inner join (select ia.*, ic.study_name, ic.study_no
									from textbook ia inner join study_level ib on ia.study_level_no = ib.study_level_no
									inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
						inner join (select ia.*, ib.site_name from product ia inner join site ib on ia.site_no = ib.site_no) p on c.product_no = p.product_no
						left join (select ia.*, ib.id as teacher_id from user_teacher ia inner join user ib on ia.user_no = ib.user_no) t on c.user_teacher_no = t.user_teacher_no
						where c.user_teacher_no is not null
						
						union all
						
						select 'leveltest' as flag, l.leveltest_no as no, l.room_no
						     , s.site_name, '' as study_name, 'level test' as day_type
						     , concat(l.leveltest_language, ' 레벨 테스트') product_name, ifnull(l.study_date, "") start_date, ifnull(l.study_date, "") end_date
						     , leveltest_type as product_type
						     , '' as product_week
						     , '1:1' product_personnel
						     , ifnull(l.class_time, "") as class_time, 10 as running_time
						     , ifnull(t.teacher_name, "") teacher_name , ifnull(t.teacher_id, "") teacher_id
						     , l.user_student_no, us.student_phone as textbook_name, us.student_name, us.student_eng_name, us.student_phone
						     , ifnull(us.student_blacklist_status, '0') student_blacklist_status 
						     , 1 as class_student_cnt
						     
						     , s.site_no, t.center_no
						     , if(l.leveltest_status = 0, '대기', if(l.leveltest_status = 2, '취소', if(l.leveltest_status = 1, if(l.study_date <![CDATA[ < ]]> current_date(), '학습종료', '수업중'), ''))) as status
						     , if(l.leveltest_status = 0, 'wating', if(l.leveltest_status = 2, 'cancel', if(l.leveltest_status = 1, if(l.study_date <![CDATA[ < ]]> current_date(), '수업종료', 'on class'), ''))) as class_condition
						     , l.leveltest_language as language, 0 as study_no, 0 as textbook_no    
						from leveltest l
						inner join user_student us on l.user_student_no = us.user_student_no
						inner join site s on us.site_no = s.site_no
						left join (select ia.*, ib.id as teacher_id from user_teacher ia inner join user ib on ia.user_no = ib.user_no) t on l.user_teacher_no = t.user_teacher_no
						where l.user_teacher_no is not null
				 ) base
			   where 1=1
			   <if test="searchType != null and searchType != ''">		
					<choose>
						<when test="searchType == 'all' and keyword != ''">
							AND ( student_name Like CONCAT('%', TRIM(#{keyword}), '%')
							    or student_phone Like CONCAT('%', TRIM(#{keyword}), '%')
								or teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')	
								or teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')
								or room_no Like CONCAT('%', TRIM(#{keyword}), '%')											
							)
						</when>				
						<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'student_phone'">AND student_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_id'">AND teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_name'">AND teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'room_no'">AND room_no Like CONCAT('%', TRIM(#{keyword}), '%')</when>						
					</choose>						
				</if>
				<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
					and site_no like CONCAT('%', TRIM(#{searchSite}), '%')
				</if>
				<if test="searchCenter != null and searchCenter != '' and searchCenter != 'all'">
					and center_no like CONCAT('%', TRIM(#{searchCenter}), '%')
				</if>
				<if test="searchClassType != null and searchClassType != '' and searchClassType != 'all'">
					and day_type like CONCAT('%', TRIM(#{searchClassType}), '%')
				</if>
				<if test="searchStartDate != null and searchStartDate != '' and searchEndDate != null and searchEndDate != '' ">
					and ( (#{searchStartDate} between start_date and end_date) 
					   OR (#{searchEndDate} between start_date and end_date)
					)
				</if>
				<if test="(searchStartDate != null and searchStartDate != '') and (searchEndDate == null or searchEndDate == '') ">
					and #{searchStartDate} between start_date and end_date
				</if>
				<if test="(searchStartDate == null or searchStartDate == '') and (searchEndDate != null and searchEndDate != '') ">
					and #{searchEndDate} between start_date and end_date
				</if>
				<if test="searchStatus != null and searchStatus != '' and searchStatus != 'all'">
					and status = #{searchStatus}
				</if>
				
				<if test="searchLanguage != null and searchLanguage != '' and searchLanguage != 'all'">
					and language = #{searchLanguage}
				</if>
				<if test="searchStudy != null and searchStudy != '' and searchStudy != 'all'">
					and study_no = #{searchStudy}
				</if>
				<if test="searchTextBook != null and searchTextBook != '' and searchTextBook != 'all'">
					and textbook_no = #{searchTextBook}
				</if>
				
					
		   ) sub
		   where (@rownum := 0) = 0
		   <!-- order by sub.start_date, sub.room_no -->
		   <if test="(searchTimeOrderBy == null or searchTimeOrderBy == '') and (searchTeacherOrderBy == null or searchTeacherOrderBy == '') ">
		   		order by sub.start_date, sub.room_no
		   </if>
		   <if test="searchTimeOrderBy != null and searchTimeOrderBy != '' ">
		   		<choose>
					<when test="searchTimeOrderBy == 'desc' ">
						order by sub.class_time asc 	<!-- 밑에 rownum으로 한번 더 역순하기 때문에 반대로.. -->
					</when>				
					<when test="searchTimeOrderBy == 'asc' ">
						order by sub.class_time desc
					</when>						
				</choose>
		   </if>
		   <if test="searchTeacherOrderBy != null and searchTeacherOrderBy != '' ">
		   		<choose>
					<when test="searchTeacherOrderBy == 'desc' ">
						order by sub.teacher_name asc 	<!-- 밑에 rownum으로 한번 더 역순하기 때문에 반대로.. -->
					</when>				
					<when test="searchTeacherOrderBy == 'asc' ">
						order by sub.teacher_name desc
					</when>						
				</choose>
		   </if>
		   
		   
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countClassInfoAll" parameterType="hashmap" resultType="int">
		select count(*)
		from ( select 'class' as flag, c.class_no as no, c.room_no
					 , p.site_name, txt.study_name, 'regular class' as day_type
					 , p.product_name, c.start_date, ifnull(c.end_date, "") as end_date
					 , p.product_type			-- Video, VR ...
					 , p.product_week			-- tue/thu ...
					 , p.product_personnel		-- 1:1, 1:2						     
					 , ifnull(c.class_time, "") as class_time, p.product_running_time as running_time
				     , ifnull(t.teacher_name, "") teacher_name , ifnull(t.teacher_id, "") teacher_id
					 , st.user_student_no, txt.textbook_name, s.student_name, ifnull(s.student_eng_name, "") student_eng_name, s.student_phone
					 , ifnull(s.student_blacklist_status, '0') student_blacklist_status 
					 , (select count(*) from class_student ia where ia.class_no = c.class_no) as class_student_cnt
					 
					 , s.site_no, t.center_no
					 , if(c.class_status = 0, '대기', if(c.class_status = 2, '취소', if(c.class_status = 1, if(c.end_date <![CDATA[ < ]]> current_date(), '학습종료', '수업중'), ''))) as status
					 , if(c.class_status = 0, 'wating', if(c.class_status = 2, 'cancel', if(c.class_status = 1, if(c.end_date <![CDATA[ < ]]> current_date(), '수업종료', 'on class'), ''))) as class_condition
					 , p.product_language as language, txt.study_no, c.textbook_no             
				from class c 
				inner join class_student st on c.class_no = st.class_no
				inner join (select ia.*, ib.site_name                  
							from user_student ia 
							inner join site ib on ia.site_no = ib.site_no
							inner join user ic on ia.user_no = ic.user_no
							) s on st.user_student_no = s.user_student_no
				inner join (select ia.*, ic.study_name, ic.study_no
							from textbook ia inner join study_level ib on ia.study_level_no = ib.study_level_no
							inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
				inner join (select ia.*, ib.site_name from product ia inner join site ib on ia.site_no = ib.site_no) p on c.product_no = p.product_no
				left join (select ia.*, ib.id as teacher_id from user_teacher ia inner join user ib on ia.user_no = ib.user_no) t on c.user_teacher_no = t.user_teacher_no
				where c.user_teacher_no is not null
				
				union all
				
				select 'leveltest' as flag, l.leveltest_no as no, l.room_no
				     , s.site_name, '' as study_name, 'level test' as day_type
				     , concat(l.leveltest_language, ' 레벨 테스트') product_name, ifnull(l.study_date, "") start_date, ifnull(l.study_date, "") end_date
				     , leveltest_type as product_type
				     , '' as product_week
				     , '1:1' product_personnel
				     , ifnull(l.class_time, "") as class_time, 10 as running_time
				     , ifnull(t.teacher_name, "") teacher_name , ifnull(t.teacher_id, "") teacher_id
				     , l.user_student_no, us.student_phone as textbook_name, us.student_name, us.student_eng_name, us.student_phone
				     , ifnull(us.student_blacklist_status, '0') student_blacklist_status 
				     , 1 as class_student_cnt
				     
				     , s.site_no, t.center_no
				     , if(l.leveltest_status = 0, '대기', if(l.leveltest_status = 2, '취소', if(l.leveltest_status = 1, if(l.study_date <![CDATA[ < ]]> current_date(), '학습종료', '수업중'), ''))) as status
				     , if(l.leveltest_status = 0, 'wating', if(l.leveltest_status = 2, 'cancel', if(l.leveltest_status = 1, if(l.study_date <![CDATA[ < ]]> current_date(), '수업종료', 'on class'), ''))) as class_condition
				     , l.leveltest_language as language, 0 as study_no, 0 as textbook_no    
				from leveltest l
				inner join user_student us on l.user_student_no = us.user_student_no
				inner join site s on us.site_no = s.site_no
				left join (select ia.*, ib.id as teacher_id from user_teacher ia inner join user ib on ia.user_no = ib.user_no) t on l.user_teacher_no = t.user_teacher_no
				where l.user_teacher_no is not null
		 ) base
	   where 1=1
	   <if test="searchType != null and searchType != ''">		
			<choose>
				<when test="searchType == 'all' and keyword != ''">
					AND ( student_name Like CONCAT('%', TRIM(#{keyword}), '%')
					    or student_phone Like CONCAT('%', TRIM(#{keyword}), '%')
						or teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')	
						or teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')
						or room_no Like CONCAT('%', TRIM(#{keyword}), '%')											
					)
				</when>				
				<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'student_phone'">AND student_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'teacher_id'">AND teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'teacher_name'">AND teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'room_no'">AND room_no Like CONCAT('%', TRIM(#{keyword}), '%')</when>						
			</choose>						
		</if>	
		<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
			and site_no like CONCAT('%', TRIM(#{searchSite}), '%')
		</if>
		<if test="searchCenter != null and searchCenter != '' and searchCenter != 'all'">
			and center_no like CONCAT('%', TRIM(#{searchCenter}), '%')
		</if>
		<if test="searchClassType != null and searchClassType != '' and searchClassType != 'all'">
			and day_type like CONCAT('%', TRIM(#{searchClassType}), '%')
		</if>
		<if test="searchStartDate != null and searchStartDate != '' and searchEndDate != null and searchEndDate != '' ">
			and ( (#{searchStartDate} between start_date and end_date) 
			   OR (#{searchEndDate} between start_date and end_date)
			)
		</if>
		<if test="(searchStartDate != null and searchStartDate != '') and (searchEndDate == null or searchEndDate == '') ">
			and #{searchStartDate} between start_date and end_date
		</if>
		<if test="(searchStartDate == null or searchStartDate == '') and (searchEndDate != null and searchEndDate != '') ">
			and #{searchEndDate} between start_date and end_date
		</if>
		
		<if test="searchStatus != null and searchStatus != '' and searchStatus != 'all'">
			and status = #{searchStatus}
		</if>
		
		<if test="searchLanguage != null and searchLanguage != '' and searchLanguage != 'all'">
			and language = #{searchLanguage}
		</if>
		<if test="searchStudy != null and searchStudy != '' and searchStudy != 'all'">
			and study_no = #{searchStudy}
		</if>
		<if test="searchTextBook != null and searchTextBook != '' and searchTextBook != 'all'">
			and textbook_no = #{searchTextBook}
		</if>
		
	</select>
	<select id="selectClassInfoOne" parameterType="hashmap" resultType="hashmap">
		select c.class_no
			 , s.site_name, 'regular class' as class_type	 
		     , p.product_language, txt.study_name     
			 , p.product_name, p.product_type     
		     , c.start_date, c.end_date
		     , c.class_time, p.product_running_time
		     , p.product_week
		     , txt.textbook_name
			 , ifnull(ct.center_name, "") center_name
		     , ifnull(t.teacher_name, "") teacher_name 
		     , ifnull(t.teacher_nickname, "") teacher_nickname
		from class c
		inner join product p on c.product_no = p.product_no
		inner join site s on p.site_no = s.site_no
		inner join (select ia.*, ic.study_name
					from textbook ia inner join study_level ib on ia.study_level_no = ib.study_level_no
		            inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
		left join user_teacher t on c.user_teacher_no = t.user_teacher_no  
		left join center ct on t.center_no = ct.center_no
		where c.class_no = #{no}
	</select>
	<select id="selectLevelTestInfoOne" parameterType="hashmap" resultType="hashmap">
		select l.leveltest_no
		     , s.site_name, 'level test' as class_type
		     , l.leveltest_language
		     , '' as product_name, l.leveltest_type
		     , l.study_date
		     , l.class_time, 10 as running_time
		     , concat(l.leveltest_language, ' 레벨 테스트') as study_name
		     , c.center_name, t.teacher_name, t.teacher_nickname
		     , if(l.study_date <![CDATA[<]]> current_date(), '학습종료', '학습전') status
		     , ifnull(us.student_name, '') as student_name, ifnull(us.student_eng_name, '') as student_eng_name
		     , us.student_phone
		from leveltest l
		inner join user_student us on l.user_student_no = us.user_student_no
		inner join site s on us.site_no = s.site_no
		left join user_teacher t on l.user_teacher_no = t.user_teacher_no
		left join center c on t.center_no = c.center_no
		where l.leveltest_no = #{no}  
	</select>
	<select id="selectStudentInfoAll" parameterType="hashmap" resultType="hashmap">
		select c.class_no, cs.user_student_no, c.start_date, c.end_date 
			 , s.student_name, ifnull(s.student_eng_name, "") as student_eng_name
		     , s.student_phone, s.student_tel, s.student_parent_phone
		     , u.code, l.class_log_no, l.study_date, cs.class_student_no
		     , z.class_score_no
		from class c
		inner join class_student cs on c.class_no = cs.class_no
		inner join user_student s on cs.user_student_no = s.user_student_no 
		inner join user u on s.user_no = u.user_no
		inner join class_log l on l.class_no = c.class_no and l.study_date = #{study_date}	
		inner join class_score z on z.class_log_no = l.class_log_no and z.class_student_no = cs.class_student_no
		
		where c.class_no = #{class_no}
		and z.study_status not in (2,3)	<!-- ★★★ class_score 취소/보강 상태인 내용은 안나오도록  ★★★ -->
	</select>
	<select id="selectClassInfoStudentAll" parameterType="hashmap" resultType="hashmap">
		select c.class_no as no, cs.user_student_no, c.start_date, c.end_date 
			 , s.student_name, ifnull(s.student_eng_name, "") as student_eng_name
			 , s.student_phone, s.student_tel, s.student_parent_phone			 	 
		from class c
		inner join class_student cs on c.class_no = cs.class_no
		inner join user_student s on cs.user_student_no = s.user_student_no				
		where c.class_no = #{no}				
	</select>
	<delete id="deleteClass" parameterType="hashmap">
		delete from class where class_no = #{class_no}
	</delete>
	<select id="getClassSel" parameterType="hashmap" resultType="hashmap">
		select c.*, p.product_name, p.product_personnel,
		(select count(*) from class_student where class_no=c.class_no) as class_student
		from class c
		inner join product p on p.product_no=c.product_no
		inner join site s on s.site_no=p.site_no
		inner join class_student cs on cs.class_no=c.class_no
		where s.site_no=#{site_no} and p.product_language=#{product_language} and p.product_type=#{product_type} and p.product_personnel=#{product_personnel}
		and #{start_date} <![CDATA[ <= ]]> start_date
		group by c.class_no
	</select>
	<select id="selectClassPK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'class' and table_schema = 'SAEHALMSver31'
	</select>
	<insert id="insertNewClass" parameterType="hashmap">
		insert into class(room_no, product_no, start_date, end_date) values(#{room_no}, #{product_no}, #{start_date}, #{end_date})
	</insert>
	<insert id="insertClassStudent" parameterType="hashmap">
		insert into class_student(class_no, user_student_no, class_phone) values(#{class_no}, #{user_student_no}, #{class_phone})
	</insert>
	<select id="selectClassStudentPK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'class_student' and table_schema = 'SAEHALMSver31'
	</select>
	<update id="updateClassDetail" parameterType="hashmap">
		update class set start_date=#{start_date}, end_date=#{end_date}, class_status=#{class_status} where class_no=#{class_no}
	</update>
	<update id="updateClassStudentDetail" parameterType="hashmap">
		update class_student set class_phone=#{class_phone} where class_student_no=#{class_student_no}
	</update>
	<delete id="deleteClassStudent" parameterType="hashmap">
		delete from class_student where class_student_no=#{class_student_no}
	</delete>
	<delete id="deleteClassLogTermChange" parameterType="hashmap">
		delete from class_log where class_no=#{class_no} and study_date > #{end_date}
	</delete>
	
	<!-- textbook -->
	<select id="selectTextbookAll" parameterType="hashmap" resultType="hashmap">
		select t.*, sl.level_name, s.study_name from textbook t
		inner join study_level sl on sl.study_level_no=t.study_level_no
		inner join study s on s.study_no=sl.study_no
		<where>
			<if test="study_language != null">
				and s.study_language=#{study_language}
			</if>
			<if test="study_no != null">
				and sl.study_no=#{study_no}
			</if>
			<if test="textbook_status != null">
				and t.textbook_status=#{textbook_status}
			</if>
			<if test="keyword != null">
				and (
					t.textbook_name like concat('%',#{keyword},'%')
				)
			</if>
		</where>
		order by t.textbook_order asc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countTextbookAll" parameterType="hashmap" resultType="int">
		select count(*) from textbook t
		inner join study_level sl on sl.study_level_no=t.study_level_no
		inner join study s on s.study_no=sl.study_no
		<where>
			<if test="study_language != null">
				and s.study_language=#{study_language}
			</if>
			<if test="study_no != null">
				and sl.study_no=#{study_no}
			</if>
			<if test="textbook_status != null">
				and t.textbook_status=#{textbook_status}
			</if>
			<if test="keyword != null">
				and (
					t.textbook_name like concat('%',#{keyword},'%')
				)
			</if>
		</where>
	</select>
	<insert id="insertTextbook" parameterType="hashmap">
		insert into textbook(study_level_no, textbook_name, textbook_download, textbook_content, textbook_order, textbook_price, textbook_status)
		values(#{study_level_no}, #{textbook_name}, #{textbook_download}, #{textbook_content}, #{textbook_order}, #{textbook_price}, 1)
	</insert>
	<select id="selectTextbookPK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'textbook' and table_schema = 'SAEHALMSver31'
	</select>
	<select id="selectTextbookOne" parameterType="hashmap" resultType="hashmap">
		select t.*, sl.study_no from textbook t
		inner join study_level sl on sl.study_level_no=t.study_level_no
		inner join study s on s.study_no=sl.study_no
		where t.textbook_no=#{textbook_no}
	</select>
	<update id="updateTextbook" parameterType="hashmap">
		update textbook set study_level_no=#{study_level_no}, textbook_name=#{textbook_name},
		textbook_download=#{textbook_download}, textbook_content=#{textbook_content}, textbook_order=#{textbook_order}, textbook_price=#{textbook_price}, textbook_status=#{textbook_status}
		where textbook_no=#{textbook_no}
	</update>
	<delete id="deleteTextbook" parameterType="hashmap">
		delete from textbook where textbook_no=#{textbook_no}
	</delete>
	<select id="selectTextbookByStudy" parameterType="hashmap" resultType="hashmap">
		select t.* from textbook t
		inner join study_level sl on sl.study_level_no=t.study_level_no
		inner join study s on s.study_no=sl.study_no
		where s.study_no=#{study_no}
	</select>
	
	<!-- textbookTopic -->
	<select id="selectTextbookTopic" parameterType="hashmap" resultType="hashmap">
		select * from textbook_topic where textbook_no=#{textbook_no} order by unit asc
	</select>
	<select id="selectTextbookTopicPK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'textbook_topic' and table_schema = 'SAEHALMSver31'
	</select>
	<select id="selectTextbookTopicUnitMax" parameterType="hashmap" resultType="int">
		select ifnull(max(unit), 0) from textbook_topic where textbook_no=#{textbook_no}
	</select>
	<insert id="insertTextbookTopic" parameterType="hashmap">
		insert into textbook_topic(textbook_no, unit, topic_name, audio_file, pdf_file, other_url)
		values(#{textbook_no}, #{unit}, #{topic_name}, #{audio_file}, #{pdf_file}, #{other_url})
	</insert>
	<update id="updateTextbookTopic" parameterType="hashmap">
		update textbook_topic set unit=#{unit}, topic_name=#{topic_name}, audio_file=#{audio_file}, pdf_file=#{pdf_file}, other_url=#{other_url} where textbook_topic_no=#{textbook_topic_no}
	</update>
	<select id="selectTextbookTopicOne" parameterType="hashmap" resultType="hashmap">
		select * from textbook_topic where textbook_topic_no=#{textbook_topic_no}
	</select>
	<delete id="deleteTextbookTopic" parameterType="hashmap">
		delete from textbook_topic where textbook_topic_no=#{textbook_topic_no}
	</delete>
	<select id="selectTextbookTopicHavePage" parameterType="hashmap" resultType="hashmap">
		select tt.* from textbook_topic tt
		inner join textbook_page p on p.textbook_topic_no=tt.textbook_topic_no
		where textbook_no=#{textbook_no}
		group by tt.textbook_topic_no
		order by unit asc
	</select>
	
	<!-- textbookPage -->
	<select id="countTextbookPage" parameterType="hashmap" resultType="int">
		select count(*) from textbook_page where textbook_topic_no=#{textbook_topic_no}
	</select>
	
	<!-- sms 관련 -->	
	<select id="getUserByUserStudentNo" parameterType="String" resultType="hashmap">
		select * from user_student where user_student_no = #{user_student_no}		
	</select>
	<insert id="insertSmslog" parameterType="hashmap">
		insert into sms_log (user_student_no, content, send_date, send_time, receipt_number, send_number, type, result_msg, status, reserve_yn, reserve_time)
		values (#{user_student_no}, #{content}, #{send_date}, #{send_time}, #{receipt_number}, #{send_number}, #{type}, #{result_msg}, #{status}, #{reserve_yn}, #{reserve_time})
	</insert>
	<select id="countSmsLogByStudentNo" parameterType="hashmap" resultType="int">
		  select count(*) 
			from (select * from sms_log where user_student_no = #{user_student_no}
					 ) base
		   where 1=1		   
	</select>	
	<select id="selectSmsLogByStudentNo" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select * from sms_log where user_student_no = #{user_student_no}
						 ) base
			   where 1=1			   				
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.sms_log_no
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<!-- 회원 상세보기 popup -->
	<select id="getUserByStudentNo" parameterType="String" resultType="hashmap">
		select a.*, s.site_name, u.code, u.id, u.pwd
		from user_student a 
		inner join site s on a.site_no = s.site_no
		inner join user u on a.user_no = u.user_no
		where a.user_student_no = #{user_student_no}		
	</select>
	<select id="countClassAndLevelByStudentNo" parameterType="hashmap" resultType="int">
		  select count(*) 
			from ( select 'class' as flag, a.class_no as no, a.room_no, a.user_teacher_no, a.start_date, a.end_date, a.class_time
						 , p.site_name, ifnull(txt.study_name, "") study_name, p.product_name, c.center_name
					     , t.teacher_name, p.product_type
						 , s.user_student_no
					from class a
					inner join class_student s on a.class_no = s.class_no
					inner join (select ia.*, ib.site_name 
								from product ia inner join site ib on ia.site_no = ib.site_no) p on a.product_no = p.product_no
					left join (select ia.*, ic.study_name
								from textbook ia inner join study_level ib on ia.study_level_no = ib.study_level_no
								inner join study ic on ib.study_no = ic.study_no) txt on a.textbook_no = txt.textbook_no            
					left join user_teacher t on a.user_teacher_no = t.user_teacher_no
					left join center c on t.center_no = c.center_no
					where s.user_student_no = #{user_student_no}
					
					union all
					
					select 'leveltest' as flag, l.leveltest_no as no, l.room_no, l.user_teacher_no, l.study_date as start_date, l.study_date as end_date, l.class_time
					     , s.site_name, '' as study_name, concat(l.leveltest_language, ' 레벨 테스트') as product_name, c.center_name
					     , ut.teacher_name, l.leveltest_type as product_type
					     , l.user_student_no
					from leveltest l
					inner join user_student us on l.user_student_no = us.user_student_no
					inner join site s on us.site_no = s.site_no
					left join user_teacher ut on l.user_teacher_no = ut.user_teacher_no
					left join center c on ut.center_no = c.center_no
					where l.user_student_no = #{user_student_no}
		  ) base
		  where 1=1		   
	</select>	
	<select id="selectClassAndLevelByStudentNo" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from ( select 'class' as flag, a.class_no as no, a.room_no, a.user_teacher_no, a.start_date, a.end_date, a.class_time
							 , p.site_name, ifnull(txt.study_name, "") study_name, p.product_name, c.center_name, g.teacher_group_name
						     , t.teacher_name, p.product_type
							 , s.user_student_no
							 , if(a.class_status = 0, '수업예정', if(a.class_status = 2, '취소', if(a.class_status = 1, if(a.end_date <![CDATA[ < ]]> now(), '수업종료', '수업중'), ''))) as status
						from class a
						inner join class_student s on a.class_no = s.class_no
						inner join (select ia.*, ib.site_name 
									from product ia inner join site ib on ia.site_no = ib.site_no) p on a.product_no = p.product_no
						left join (select ia.*, ic.study_name
									from textbook ia inner join study_level ib on ia.study_level_no = ib.study_level_no
									inner join study ic on ib.study_no = ic.study_no) txt on a.textbook_no = txt.textbook_no            
						left join user_teacher t on a.user_teacher_no = t.user_teacher_no
						left join center c on t.center_no = c.center_no
		                left join teacher_group_member gm on gm.user_teacher_no=t.user_teacher_no
		                left join teacher_group g on g.teacher_group_no=gm.teacher_group_no
						where s.user_student_no = #{user_student_no}
						group by a.class_no
						
						union all
						
						select 'leveltest' as flag, l.leveltest_no as no, l.room_no, l.user_teacher_no, l.study_date as start_date, l.study_date as end_date, l.class_time
						     , s.site_name, '' as study_name, concat(l.leveltest_language, ' 레벨 테스트') as product_name, c.center_name, g.teacher_group_name
						     , ut.teacher_name, l.leveltest_type as product_type
						     , l.user_student_no
							 , if(l.leveltest_status = 0, '수업예정', if(l.leveltest_status = 2, '취소', if(l.leveltest_status = 1, if(l.study_date <![CDATA[ < ]]> now(), '수업종료', '수업중'), ''))) as status    
						from leveltest l
						inner join user_student us on l.user_student_no = us.user_student_no
						inner join site s on us.site_no = s.site_no
						left join user_teacher ut on l.user_teacher_no = ut.user_teacher_no
						left join center c on ut.center_no = c.center_no
                		left join teacher_group g on g.teacher_group_no=l.group_no
						where l.user_student_no = #{user_student_no}
			   ) base
			   where 1=1			   				
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.start_date
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="getClassDetailInfo" parameterType="hashmap" resultType="hashmap">				
		select 'class' as flag, c.*, cs.class_student_no, cs.class_phone, c.class_no as no, cs.user_student_no
		     , s.student_phone, ifnull(txt.study_name, '') study_name, p.product_name, s.student_phone, p.product_type, p.product_personnel
		     , c.class_status
		from class c
		inner join class_student cs on c.class_no = cs.class_no
		inner join user_student s on cs.user_student_no = s.user_student_no
		inner join user u on s.user_no = u.user_no
		left join (select ia.*, ic.study_name
					from textbook ia inner join study_level ib on ia.study_level_no = ib.study_level_no
		            inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
		inner join product p on c.product_no = p.product_no
		where c.class_no = #{no}
		and s.user_student_no = #{user_student_no}
	</select>
	<select id="getLevelDetailInfo" parameterType="hashmap" resultType="hashmap">				
		select 'leveltest' as flag, l.leveltest_no as no, '' as study_name, l.class_phone
		     , l.user_student_no, us.student_name, concat(l.leveltest_language, ' 레벨 테스트') product_name
		     , us.student_phone, ifnull(l.study_date, '') as start_date, ifnull(l.study_date, '') as end_date		     	 
		     , l.leveltest_status
		from leveltest l
		inner join user_student us on l.user_student_no = us.user_student_no
		where l.leveltest_no = #{no}
	</select>
	<update id="updateUserByUserDetail" parameterType="hashmap">				
		update user_student
		set student_name = #{student_name}
			, student_eng_name = #{student_eng_name}
			, student_tel = #{student_tel}
			, student_phone = #{student_phone}
			, student_phone_status = #{student_phone_status}
			, student_email = #{student_email}
			, student_email_status = #{student_email_status}
			, student_address = #{student_address}
			, student_blacklist_status = #{student_blacklist_status}
			, student_etc = #{student_etc}
			, student_parent_name = #{student_parent_name}
			, student_parent_phone = #{student_parent_phone}
			, student_parent_phone_status = #{student_parent_phone_status}
			
			, student_birth = #{student_birth}
			, student_sex = #{student_sex}
			, student_grade = #{student_grade}
			, student_invite = #{student_invite}
			, student_status = #{student_status}
		where user_student_no = #{user_student_no}
	</update>
	<!-- 선생님별 주간수업일정 -->
	<!-- 일요일시작 이번주 날짜 가져오기   param: thisDay (기준일) -->
	<select id="getWeeklyDaysFromSun" parameterType="hashmap" resultType="hashmap">
		select ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 1 ) as day0
		     , ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 2 ) as day1
			 , ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 3 ) as day2
			 , ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 4 ) as day3
			 , ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 5 ) as day4
		     , ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 6 ) as day5
		     , ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 7 ) as day6
		    
			 , date_format(ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 1 ) ,'%m.%d') as t0
		     , date_format(ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 2 ) ,'%m.%d') as t1
		     , date_format(ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 3 ) ,'%m.%d') as t2
		     , date_format(ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 4 ) ,'%m.%d') as t3
		     , date_format(ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 5 ) ,'%m.%d') as t4
		     , date_format(ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 6 ) ,'%m.%d') as t5
		     , date_format(ADDDATE( #{thisDay}, - DAYOFWEEK(#{thisDay}) + 7 ) ,'%m.%d') as t6
	</select>
	<select id="getClassInfoList" parameterType="hashmap" resultType="hashmap">
		select l.class_log_no, l.class_no, l.user_teacher_no, l.study_date
			 , p.product_running_time as lesson_time, l.start_time as class_time            <!--  c.class_time -->
		from class_log l
		inner join class c on l.class_no = c.class_no
		inner join product p on c.product_no = p.product_no
		where l.user_teacher_no = #{user_teacher_no}
		and l.study_date = #{study_date}
		and (l.start_time = #{class_time} or l.start_time = date_format(date_add(str_to_date(#{class_time}, "%H:%i"), interval 5 minute), "%H:%i"))
		and c.class_status not in (0, 2)
		<!-- and c.class_time = #{class_time} -->
	</select>
	<select id="getClassStudentList" parameterType="hashmap" resultType="hashmap">
		select a.class_no, a.user_student_no, b.student_name, b.student_eng_name, u.id
		from class_student a 
		inner join user_student b on a.user_student_no = b.user_student_no
		inner join user u on b.user_no = u.user_no
		where a.class_no = #{class_no}
	</select>
	
	<select id="getLevelTestInfoList" parameterType="hashmap" resultType="hashmap">
		select l.leveltest_no, l.user_teacher_no, l.user_student_no
		     , 10 as lesson_time, l.class_time
		from leveltest l
		where l.user_teacher_no = #{user_teacher_no}
		and l.study_date = #{study_date}
		and l.leveltest_status not in (0, 2)
		<!-- and l.class_time = #{class_time} -->
		and (l.class_time = #{class_time} or l.class_time = date_format(date_add(str_to_date(#{class_time}, "%H:%i"), interval 5 minute), "%H:%i"))
	</select>
	<select id="getLevelTestStudentList" parameterType="hashmap" resultType="hashmap">
		select a.leveltest_no, a.user_student_no, b.student_name, b.student_eng_name, u.id
		from leveltest a
		inner join user_student b on a.user_student_no = b.user_student_no
		inner join user u on b.user_no = u.user_no
		where a.leveltest_no = #{leveltest_no}
	</select>
	
	<select id="selectTextbookPage" parameterType="hashmap" resultType="hashmap">
		select p.*, tt.audio_file from textbook_page p
		inner join textbook_topic tt on tt.textbook_topic_no=p.textbook_topic_no
		where p.textbook_topic_no=#{textbook_topic_no} order by page asc
	</select>
	<select id="selectTextbookPagePK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'textbook_page' and table_schema = 'SAEHALMSver31'
	</select>
	<select id="selectTextbookPagePageMax" parameterType="hashmap" resultType="int">
		select ifnull(max(page), 0) from textbook_page where textbook_topic_no=#{textbook_topic_no}
	</select>
	<insert id="insertTextbookPage" parameterType="hashmap">
		insert into textbook_page(textbook_topic_no, page, page_name, file_url)
		values(#{textbook_topic_no}, #{page}, #{page_name}, #{file_url})
	</insert>
	<select id="selectTextbookPageOne" parameterType="hashmap" resultType="hashmap">
		select * from textbook_page where textbook_page_no=#{textbook_page_no}
	</select>
	<update id="updateTextbookPage" parameterType="hashmap">
		update textbook_page set page=#{page}, page_name=#{page_name}, file_url=#{file_url} where textbook_page_no=#{textbook_page_no}
	</update>
	<delete id="deleteTextbookPage" parameterType="hashmap">
		delete from textbook_page where textbook_page_no=#{textbook_page_no}
	</delete>
	<select id="selectTextbookPageLimit" parameterType="hashmap" resultType="hashmap">
		select * from textbook_page where textbook_topic_no=#{textbook_topic_no} order by page asc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<!-- 휴강 및 보강 -->
	<select id="selectPostponeAll" parameterType="hashmap" resultType="hashmap">
		select s.site_name, us.student_name, p.product_name, pp.* from postpone pp
		inner join class c on c.class_no=pp.class_no
		inner join product p on p.product_no=c.product_no
		inner join user_student us on us.user_student_no=pp.user_student_no
		inner join site s on s.site_no=us.site_no
		<where>
			<if test="keyword != null">
				and (
					s.site_name like concat('%', #{keyword}, '%') or
					us.student_name like concat('%', #{keyword}, '%') or
					p.product_name like concat('%', #{keyword}, '%')
				)
			</if>
		</where>
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countPostponeAll" parameterType="hashmap" resultType="int">
		select count(*) from postpone pp
		inner join class c on c.class_no=pp.class_no
		inner join product p on p.product_no=c.product_no
		inner join user_student us on us.user_student_no=pp.user_student_no
		inner join site s on s.site_no=us.site_no
		<where>
			<if test="keyword != null">
				and (
					s.site_name like concat('%', #{keyword}, '%') or
					us.student_name like concat('%', #{keyword}, '%') or
					p.product_name like concat('%', #{keyword}, '%')
				)
			</if>
		</where>
	</select>
	<select id="selectPostponeOne" parameterType="hashmap" resultType="hashmap">
		select us.student_name, us.student_phone, p.product_name, pp.* from postpone pp
		inner join class c on c.class_no=pp.class_no
		inner join product p on p.product_no=c.product_no
		inner join user_student us on us.user_student_no=pp.user_student_no
		where pp.postpone_no=#{postpone_no}
	</select>
	<update id="updatePostpone" parameterType="hashmap">
		update postpone set postpone_feedback=#{postpone_feedback}, postpone_status=#{postpone_status} where postpone_no=#{postpone_no}
	</update>
	<select id="selectPostponeExcel" resultType="hashmap">
		select s.site_name, us.student_name, u.id, p.product_name, pp.* from postpone pp
		inner join user_student us on us.user_student_no=pp.user_student_no
		inner join user u on u.user_no=us.user_no
		inner join site s on s.site_no=us.site_no
		inner join class c on c.class_no=pp.class_no
		inner join product p on p.product_no=c.product_no
	</select>
	
	<!-- 수강자 정보 -->
	<select id="selectClassStudentAll" parameterType="hashmap" resultType="hashmap">
		select @rownum:=@rownum+1 as num, result.* from (
			select s.site_name, us.user_student_no, us.student_name, us.student_phone, us.student_tel, p.product_name, c.start_date, c.end_date, us.student_blacklist_status
				 , s.site_no, p.product_language, ifnull(st.study_no, 0) as study_no, p.product_no
				 , 'regular class' as classType	
				 , if(c.class_status = 0, 'wating', if(c.class_status = 2, 'cancel', if(c.class_status = 1, if(c.end_date <![CDATA[ < ]]> current_date(), '수업종료', 'on class'), ''))) as status
			
			from user_student us
			inner join site s on s.site_no=us.site_no
			inner join class_student cs on cs.user_student_no=us.user_student_no
			inner join class c on c.class_no=cs.class_no
			inner join product p on p.product_no=c.product_no
			
			left join textbook txt on c.textbook_no = txt.textbook_no
			left join study_level sl on txt.study_level_no = sl.study_level_no
			left join study st on sl.study_no = st.study_no
			<where>
				<if test="keyword != null">
					<choose>
						<when test="searchType == 'all'">
							and (
								s.site_name like concat('%',#{keyword},'%') or
								us.student_name like concat('%',#{keyword},'%') or
								us.student_phone like concat('%',#{keyword},'%') or
								us.student_tel like concat('%',#{keyword},'%') or
								p.product_name like concat('%',#{keyword},'%')
							)
						</when>
						<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'student_name'">and us.student_name like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'student_phone'">and us.student_phone like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'student_tel'">and us.student_tel like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'product_name'">and p.product_name like concat('%',#{keyword},'%')</when>
					</choose>
				</if>
				
				
				<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
					and s.site_no = #{searchSite}
				</if>
				<if test="searchLanguage != null and searchLanguage != '' and searchLanguage != 'all'">
					and p.product_language = #{searchLanguage}
				</if>
				<if test="searchStudy != null and searchStudy != '' and searchStudy != 'all'">
					and ifnull(st.study_no, 0) = #{searchStudy}
				</if>		
				<if test="searchProduct != null and searchProduct != '' and searchProduct != 'all'">
					and p.product_no = #{searchProduct}
				</if>
				<if test="searchClassType != null and searchClassType != '' and searchClassType != 'all'">
					and 'regular class' = #{searchClassType}
				</if>
				<if test="searchStatus != null and searchStatus != '' and searchStatus != 'all'">
					and if(c.class_status = 0, 'wating', if(c.class_status = 2, 'cancel', if(c.class_status = 1, if(c.end_date <![CDATA[ < ]]> current_date(), '수업종료', 'on class'), ''))) = #{searchStatus}
				</if>
				<if test="searchClassStart_SDT != null and searchClassStart_SDT != '' ">
					and c.start_date <![CDATA[ >= ]]>  #{searchClassStart_SDT}
				</if>
				<if test="searchClassStart_EDT != null and searchClassStart_EDT != '' ">
					and c.start_date <![CDATA[ <= ]]>  #{searchClassStart_EDT}
				</if>
				
				<if test="searchClassEnd_SDT != null and searchClassEnd_SDT != '' ">
					and c.end_date <![CDATA[ >= ]]>  #{searchClassEnd_SDT}
				</if>
				<if test="searchClassEnd_EDT != null and searchClassEnd_EDT != '' ">
					and c.end_date <![CDATA[ <= ]]>  #{searchClassEnd_EDT}
				</if>
				
			</where>
			order by c.start_date asc
		) as result,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countClassStudentAll" parameterType="hashmap" resultType="int">
		select count(*)
		from user_student us
		inner join site s on s.site_no=us.site_no
		inner join class_student cs on cs.user_student_no=us.user_student_no
		inner join class c on c.class_no=cs.class_no
		inner join product p on p.product_no=c.product_no
		
		left join textbook txt on c.textbook_no = txt.textbook_no
		left join study_level sl on txt.study_level_no = sl.study_level_no
		left join study st on sl.study_no = st.study_no
		<where>
			<if test="keyword != null">
				<choose>
					<when test="searchType == 'all'">
						and (
							s.site_name like concat('%',#{keyword},'%') or
							us.student_name like concat('%',#{keyword},'%') or
							us.student_phone like concat('%',#{keyword},'%') or
							us.student_tel like concat('%',#{keyword},'%') or
							p.product_name like concat('%',#{keyword},'%')
						)
					</when>
					<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_name'">and us.student_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_phone'">and us.student_phone like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_tel'">and us.student_tel like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'product_name'">and p.product_name like concat('%',#{keyword},'%')</when>
				</choose>
			</if>
			<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
				and s.site_no = #{searchSite}
			</if>
			<if test="searchLanguage != null and searchLanguage != '' and searchLanguage != 'all'">
				and p.product_language = #{searchLanguage}
			</if>
			<if test="searchStudy != null and searchStudy != '' and searchStudy != 'all'">
				and ifnull(st.study_no, 0) = #{searchStudy}
			</if>		
			<if test="searchProduct != null and searchProduct != '' and searchProduct != 'all'">
				and p.product_no = #{searchProduct}
			</if>
			<if test="searchClassType != null and searchClassType != '' and searchClassType != 'all'">
				and 'regular class' = #{searchClassType}
			</if>
			<if test="searchStatus != null and searchStatus != '' and searchStatus != 'all'">
				and if(c.class_status = 0, 'wating', if(c.class_status = 2, 'cancel', if(c.class_status = 1, if(c.end_date <![CDATA[ < ]]> current_date(), '수업종료', 'on class'), ''))) = #{searchStatus}
			</if>
			<if test="searchClassStart_SDT != null and searchClassStart_SDT != '' ">
				and c.start_date <![CDATA[ >= ]]>  #{searchClassStart_SDT}
			</if>
			<if test="searchClassStart_EDT != null and searchClassStart_EDT != '' ">
				and c.start_date <![CDATA[ <= ]]>  #{searchClassStart_EDT}
			</if>
			
			<if test="searchClassEnd_SDT != null and searchClassEnd_SDT != '' ">
				and c.end_date <![CDATA[ >= ]]>  #{searchClassEnd_SDT}
			</if>
			<if test="searchClassEnd_EDT != null and searchClassEnd_EDT != '' ">
				and c.end_date <![CDATA[ <= ]]>  #{searchClassEnd_EDT}
			</if>
		</where>
	</select>
	<select id="selectClassStudentExcel" parameterType="hashmap" resultType="hashmap">
		select s.site_name, p.product_name, p.product_type, p.product_week, p.product_running_time, u.id, us.*, ut.teacher_name, c.start_date, c.end_date, t.textbook_name
		, if(c.end_date <![CDATA[<]]> now(), '수업종료', if(c.start_date <![CDATA[>]]> now(), '수업전', 'on class')) as status
		from user_student us
		inner join user u on u.user_no=us.user_no
		inner join site s on s.site_no=us.site_no
		inner join class_student cs on cs.user_student_no=us.user_student_no
		inner join class c on c.class_no=cs.class_no
		inner join user_teacher ut on ut.user_teacher_no=c.user_teacher_no
		inner join textbook t on t.textbook_no=c.textbook_no
		inner join product p on p.product_no=c.product_no
		<where>
			<if test="keyword != null">
				<choose>
					<when test="searchType == 'all'">
						and (
							s.site_name like concat('%',#{keyword},'%') or
							us.student_name like concat('%',#{keyword},'%') or
							us.student_phone like concat('%',#{keyword},'%') or
							us.student_tel like concat('%',#{keyword},'%') or
							p.product_name like concat('%',#{keyword},'%')
						)
					</when>
					<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_name'">and us.student_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_phone'">and us.student_phone like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_tel'">and us.student_tel like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'product_name'">and p.product_name like concat('%',#{keyword},'%')</when>
				</choose>
			</if>
		</where>
	</select>
	
	<!-- 시간별 수업현황 -->
	<select id="countTimeClassAll" parameterType="hashmap" resultType="int">
		  select count(*) 
			from ( select * from (

						select c.room_no
							 , case when sc.class_type = 0 then 'Regular' else 'Make-up' end day_type
						     , c.class_no, sc.code, sc.student_name, sc.student_eng_name, sc.id as student_id
							 , txt.study_name, p.product_name, p.product_type as class_type, sc.student_phone, sc.student_blacklist_status     
							 , txt.textbook_name, l.study_date, l.start_time as class_time, p.product_running_time as running_time, l.user_teacher_no, t.teacher_name     
							 , sc.user_student_no
							 , p.site_no, p.product_language as language, txt.study_no
							 , c.textbook_no, t.center_no, sc.present, sc.study_status 	
							 
							 , 'class' as flag, sc.class_score_no, 0 as leveltest_no
							 , ut.id as teacher_id
							 , case ifnull(sc.study_status, 0) when 0 then 'Before'
															   when 1 then 'Complete' 
						                                       when 2 then 'cancel' else 'Makeup' end class_status
						     , if((select count(*) from class_video_student_log where class_score_no = sc.class_score_no) > 0, 'O', 'X') as student_status
							 , if((select count(*) from class_video_teacher_log where class_log_no = l.class_log_no) > 0, 'O', 'X') as teacher_status
							 , 'regular class' as classType, left(l.start_time, 2) as classHour
						from class c 
						inner join class_log l on c.class_no = l.class_no
						inner join (select ia.*, ib.user_student_no, ic.student_name, ic.student_eng_name, id.code, id.id, ic.student_phone, ic.student_blacklist_status
									from class_score ia 
									inner join class_student ib on ia.class_student_no = ib.class_student_no
									inner join user_student ic on ib.user_student_no = ic.user_student_no
									inner join user id on ic.user_no = id.user_no) sc on l.class_log_no = sc.class_log_no
						inner join (select ia.*, ic.study_no, ic.study_name
									from textbook ia 
									inner join study_level ib on ia.study_level_no = ib.study_level_no
									inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
						inner join product p on c.product_no = p.product_no
						inner join user_teacher t on l.user_teacher_no = t.user_teacher_no
						inner join user ut on t.user_no = ut.user_no
						where 1=1
						
						union all
						
						select a.room_no, 'LevelTest' as day_type, 0 as class_no, s.code, s.student_name, s.student_eng_name, s.id as student_id
							 , '' as study_name, 'English 레벨 테스트' as product_name, a.leveltest_type as class_type, s.student_phone, s.student_blacklist_status						     
							 , '' as textbook_name, a.study_date, a.class_time, 10 as running_time, a.user_teacher_no, t.teacher_name
							 , s.user_student_no
							 , s.site_no, a.leveltest_language as language, 0 as study_no
							 , 0 as textbook_no, t.center_no, a.present, a.study_status
						     
							 , 'leveltest' as flag, 0 as class_score_no, a.leveltest_no
							 , ut.id as teacher_id
							 , case ifnull(a.study_status, 0) when 0 then 'Before'
															  when 1 then 'Complete' else 'cancel' end class_status                                      
						     , 'X' as student_status, 'X' as teacher_status
						     , 'level test' as classType, left(a.class_time, 2) as classHour
						from leveltest a 
						inner join (select ia.*, ib.code, ic.site_name, ib.id
									from user_student ia 
									inner join user ib on ia.user_no = ib.user_no
									inner join site ic on ia.site_no = ic.site_no) s on a.user_student_no = s.user_student_no
						inner join user_teacher t on a.user_teacher_no = t.user_teacher_no
						inner join user ut on t.user_no = ut.user_no
						
						) z	
		  ) base
		  where 1=1
		  <if test="keyword != null and keyword != ''">
				<choose>
					<when test="searchType == 'all' or searchType == ''">
						AND ( student_name Like CONCAT('%', TRIM(#{keyword}), '%')
						    or student_phone Like CONCAT('%', TRIM(#{keyword}), '%')
							or teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')	
							or teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')
							or room_no Like CONCAT('%', TRIM(#{keyword}), '%')											
						)
					</when>
					<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
					<when test="searchType == 'student_phone'">AND student_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
					<when test="searchType == 'teacher_id'">AND teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
					<when test="searchType == 'teacher_name'">AND teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
					<when test="searchType == 'room_no'">AND room_no Like CONCAT('%', TRIM(#{keyword}), '%')</when>	
				</choose>
			</if>	
			<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
				and site_no like CONCAT('%', TRIM(#{searchSite}), '%')
			</if>
			<if test="searchLanguage != null and searchLanguage != '' and searchLanguage != 'all'">
				and language = #{searchLanguage}
			</if>
			<if test="searchStudy != null and searchStudy != '' and searchStudy != 'all'">
				and study_no = #{searchStudy}
			</if>
			<if test="searchTextBook != null and searchTextBook != '' and searchTextBook != 'all'">
				and textbook_no = #{searchTextBook}
			</if>	
			
			<if test="searchProductType != null and searchProductType != '' and searchProductType != 'all'">
				and class_type = #{searchProductType}
			</if>
			<if test="searchCenter != null and searchCenter != '' and searchCenter != 'all'">
				and center_no = #{searchCenter}
			</if>
			<if test="searchTeacher != null and searchTeacher != '' and searchTeacher != 'all'">
				and user_teacher_no = #{searchTeacher}
			</if>	
			<if test="searchClassType != null and searchClassType != '' and searchClassType != 'all'">
				and classType = #{searchClassType}
			</if>
			<if test="searchStudyStatus != null and searchStudyStatus != '' and searchStudyStatus != 'all'">
				and study_status = #{searchStudyStatus}
			</if>
			<if test="searchClassTime != null and searchClassTime != '' and searchClassTime != 'all'">
				and classHour = #{searchClassTime}
			</if>
			
			<if test="searchStartDate != null and searchStartDate != '' and searchEndDate != null and searchEndDate != '' ">
				and study_date between #{searchStartDate} and #{searchEndDate}
			</if>
			<if test="(searchStartDate != null and searchStartDate != '') and (searchEndDate == null or searchEndDate == '') ">
				and study_date <![CDATA[ >= ]]> #{searchStartDate}
			</if>
			<if test="(searchStartDate == null or searchStartDate == '') and (searchEndDate != null and searchEndDate != '') ">
				and study_date <![CDATA[ <= ]]> #{searchEndDate}
			</if>	   
	</select>	
	<select id="selectTimeClassAll" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from ( select * from (

						select c.room_no
							 , case when sc.class_type = 0 then 'Regular' else 'Make-up' end day_type
						     , c.class_no, sc.code, sc.student_name, sc.student_eng_name, sc.id as student_id
							 , txt.study_name, p.product_name, p.product_type as class_type, sc.student_phone, sc.student_blacklist_status     
							 , txt.textbook_name, l.study_date, l.start_time as class_time, p.product_running_time as running_time, l.user_teacher_no, t.teacher_name     
							 , sc.user_student_no
							 , p.site_no, p.product_language as language, txt.study_no
							 , c.textbook_no, t.center_no, sc.present, sc.study_status 	
							 
							 , 'class' as flag, sc.class_score_no, 0 as leveltest_no
							 , ut.id as teacher_id
							 , case ifnull(sc.study_status, 0) when 0 then 'Before'
															   when 1 then 'Complete' 
						                                       when 2 then 'cancel' else 'Makeup' end class_status
						     , if((select count(*) from class_video_student_log where class_score_no = sc.class_score_no) > 0, 'O', 'X') as student_status
							 , if((select count(*) from class_video_teacher_log where class_log_no = l.class_log_no) > 0, 'O', 'X') as teacher_status
							 , 'regular class' as classType, left(l.start_time, 2) as classHour
						from class c 
						inner join class_log l on c.class_no = l.class_no
						inner join (select ia.*, ib.user_student_no, ic.student_name, ic.student_eng_name, id.code, id.id, ic.student_phone, ic.student_blacklist_status
									from class_score ia 
									inner join class_student ib on ia.class_student_no = ib.class_student_no
									inner join user_student ic on ib.user_student_no = ic.user_student_no
									inner join user id on ic.user_no = id.user_no) sc on l.class_log_no = sc.class_log_no
						inner join (select ia.*, ic.study_no, ic.study_name
									from textbook ia 
									inner join study_level ib on ia.study_level_no = ib.study_level_no
									inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
						inner join product p on c.product_no = p.product_no
						inner join user_teacher t on l.user_teacher_no = t.user_teacher_no
						inner join user ut on t.user_no = ut.user_no
						where 1=1
						
						union all
						
						select a.room_no, 'LevelTest' as day_type, 0 as class_no, s.code, s.student_name, s.student_eng_name, s.id as student_id
							 , '' as study_name, 'English 레벨 테스트' as product_name, a.leveltest_type as class_type, s.student_phone, s.student_blacklist_status						     
							 , '' as textbook_name, a.study_date, a.class_time, 10 as running_time, a.user_teacher_no, t.teacher_name
							 , s.user_student_no
							 , s.site_no, a.leveltest_language as language, 0 as study_no
							 , 0 as textbook_no, t.center_no, a.present, a.study_status
						     
							 , 'leveltest' as flag, 0 as class_score_no, a.leveltest_no
							 , ut.id as teacher_id
							 , case ifnull(a.study_status, 0) when 0 then 'Before'
															  when 1 then 'Complete' else 'cancel' end class_status                                      
						     , 'X' as student_status, 'X' as teacher_status
						     , 'level test' as classType, left(a.class_time, 2) as classHour
						from leveltest a 
						inner join (select ia.*, ib.code, ic.site_name, ib.id
									from user_student ia 
									inner join user ib on ia.user_no = ib.user_no
									inner join site ic on ia.site_no = ic.site_no) s on a.user_student_no = s.user_student_no
						inner join user_teacher t on a.user_teacher_no = t.user_teacher_no
						inner join user ut on t.user_no = ut.user_no
						
						) z						
			   ) base
			   where 1=1
			   <if test="keyword != null and keyword != ''">
					<choose>
						<when test="searchType == 'all' or searchType == ''">
							AND ( student_name Like CONCAT('%', TRIM(#{keyword}), '%')
							    or student_phone Like CONCAT('%', TRIM(#{keyword}), '%')
								or teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')	
								or teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')
								or room_no Like CONCAT('%', TRIM(#{keyword}), '%')											
							)
						</when>
						<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'student_phone'">AND student_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_id'">AND teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_name'">AND teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'room_no'">AND room_no Like CONCAT('%', TRIM(#{keyword}), '%')</when>	
					</choose>
				</if>
				<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
					and site_no like CONCAT('%', TRIM(#{searchSite}), '%')
				</if>
				<if test="searchLanguage != null and searchLanguage != '' and searchLanguage != 'all'">
					and language = #{searchLanguage}
				</if>
				<if test="searchStudy != null and searchStudy != '' and searchStudy != 'all'">
					and study_no = #{searchStudy}
				</if>
				<if test="searchTextBook != null and searchTextBook != '' and searchTextBook != 'all'">
					and textbook_no = #{searchTextBook}
				</if>	
				
				<if test="searchProductType != null and searchProductType != '' and searchProductType != 'all'">
					and class_type = #{searchProductType}
				</if>
				<if test="searchCenter != null and searchCenter != '' and searchCenter != 'all'">
					and center_no = #{searchCenter}
				</if>
				<if test="searchTeacher != null and searchTeacher != '' and searchTeacher != 'all'">
					and user_teacher_no = #{searchTeacher}
				</if>	
				<if test="searchClassType != null and searchClassType != '' and searchClassType != 'all'">
					and classType = #{searchClassType}
				</if>
				<if test="searchStudyStatus != null and searchStudyStatus != '' and searchStudyStatus != 'all'">
					and study_status = #{searchStudyStatus}
				</if>
				<if test="searchClassTime != null and searchClassTime != '' and searchClassTime != 'all'">
					and classHour = #{searchClassTime}
				</if>
				
				<if test="searchStartDate != null and searchStartDate != '' and searchEndDate != null and searchEndDate != '' ">
					and study_date between #{searchStartDate} and #{searchEndDate}
				</if>
				<if test="(searchStartDate != null and searchStartDate != '') and (searchEndDate == null or searchEndDate == '') ">
					and study_date <![CDATA[ >= ]]> #{searchStartDate}
				</if>
				<if test="(searchStartDate == null or searchStartDate == '') and (searchEndDate != null and searchEndDate != '') ">
					and study_date <![CDATA[ <= ]]> #{searchEndDate}
				</if>
				
					   				
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.study_date, sub.class_time
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<!-- 레벨테스트 신청 -->
	<select id="selectLevelTestAll" parameterType="hashmap" resultType="hashmap">
		select @rownum:=@rownum+1 as num, result.* from (
			select s.site_name, us.student_name, us.student_blacklist_status, lt.*
			, if(lt.leveltest_status = 0, '수업예정', if(lt.leveltest_status = 2, '취소', if(lt.leveltest_status = 1, if(lt.study_date <![CDATA[ < ]]> now(), '수업종료', '수업중'), ''))) as status
			from leveltest lt
			inner join user_student us on us.user_student_no=lt.user_student_no
			inner join site s on s.site_no=us.site_no
			<where>
				<if test="keyword != null">
					<choose>
						<when test="searchType == 'all'">
							and (
								s.site_name like concat('%',#{keyword},'%') or
								us.student_name like concat('%',#{keyword},'%')
							)
						</when>
						<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'student_name'">and us.student_name like concat('%',#{keyword},'%')</when>
					</choose>
				</if>
			</where>
			order by lt.study_date asc
		) as result,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countLevelTestAll" parameterType="hashmap" resultType="int">	
		select count(*) from leveltest lt
		inner join user_student us on us.user_student_no=lt.user_student_no
		inner join site s on s.site_no=us.site_no
		<where>
			<if test="keyword != null">
				<choose>
					<when test="searchType == 'all'">
						and (
							s.site_name like concat('%',#{keyword},'%') or
							us.student_name like concat('%',#{keyword},'%')
						)
					</when>
					<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_name'">and us.student_name like concat('%',#{keyword},'%')</when>
				</choose>
			</if>
		</where>
	</select>
	<select id="selectLevelTestExcel" parameterType="hashmap" resultType="hashmap">
		select s.site_name, us.student_name, u.id, lt.*, if(lt.study_date <![CDATA[<]]> now(), '학습종료', '학습전') as status from leveltest lt
		inner join user_student us on us.user_student_no=lt.user_student_no
		inner join user u on u.user_no=us.user_no
		inner join site s on s.site_no=us.site_no
		<where>
			<if test="keyword != null">
				<choose>
					<when test="searchType == 'all'">
						and (
							s.site_name like concat('%',#{keyword},'%') or
							us.student_name like concat('%',#{keyword},'%')
						)
					</when>
					<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_name'">and us.student_name like concat('%',#{keyword},'%')</when>
				</choose>
			</if>
		</where>
	</select>
	<insert id="insertLeveltest" parameterType="hashmap">
		insert into leveltest(room_no, user_student_no, leveltest_language, leveltest_type, leveltest_content, leveltest_regdate, class_phone)
		values(#{room_no}, #{user_student_no}, #{leveltest_language}, #{leveltest_type}, #{leveltest_content}, now(), #{class_phone})
	</insert>
	<select id="countUserLeveltest" parameterType="hashmap" resultType="int">
		select count(*) from leveltest where user_student_no=#{user_student_no}
	</select>
	<update id="updateLeveltestDetail" parameterType="hashmap">
		update leveltest set class_phone=#{class_phone},
		<if test="start_date != ''">
		study_date=#{start_date},
		</if>
		leveltest_status=#{leveltest_status} where leveltest_no=#{leveltest_no}
	</update>
	<delete id="deleteLeveltest" parameterType="hashmap">
		delete from leveltest where leveltest_no=#{leveltest_no}
	</delete>
	
	<select id="getReportClassInfo" parameterType="hashmap" resultType="hashmap">				
		select a.class_score_no, c.class_no, a.class_log_no, a.class_student_no
			 , l.study_date, p.product_name, c.start_date, c.end_date
			 , t.center_name, t.teacher_name
			 , l.textbook_topic_no, l.slide_number     
			 , txt.textbook_no	 
			 , c.study_no, c.study_name, p.product_running_time
			 , tp.topic_name, ifnull(tp.pdf_file, '') pdf_file
			 
		from class_score a 
		inner join class_log l on a.class_log_no = l.class_log_no
		inner join (select ia.*, id.study_no, id.study_name
					from class ia 
					inner join textbook ib on ia.textbook_no = ib.textbook_no
					inner join study_level ic on ib.study_level_no = ic.study_level_no
					inner join study id on ic.study_no = id.study_no
					) c on l.class_no = c.class_no
		inner join product p on c.product_no = p.product_no
		inner join (select ia.*, ib.center_name
					from user_teacher ia 
					inner join center ib on ia.center_no = ib.center_no) t on l.user_teacher_no = t.user_teacher_no
		left join (select ia.textbook_topic_no, ib.textbook_no
						 , id.study_no, id.study_name		   
					from textbook_topic ia 
					inner join textbook ib on ia.textbook_no = ib.textbook_no
					inner join study_level ic on ib.study_level_no = ic.study_level_no
					inner join study id on ic.study_no = id.study_no ) txt on txt.textbook_topic_no = l.textbook_topic_no	
		left join textbook_topic tp on l.textbook_topic_no = tp.textbook_topic_no			
		where a.class_score_no = #{class_score_no}
	</select>
	<select id="getLastBook" parameterType="hashmap" resultType="hashmap">				
		select a.class_log_no, a.class_no, a.user_teacher_no ,a.textbook_topic_no, a.study_date		     
		     , ifnull(tb.textbook_name, "") as textbook_name 
			 , ifnull(t.topic_name, "") as topic_name
			 , ifnull(tb.textbook_no, 0) as textbook_no
			 , ifnull(a.slide_number, "") as slide_number
			 , ifnull(t.pdf_file, "") pdf_file	 		 
		from class_log a
		inner join textbook_topic t on t.textbook_topic_no = a.textbook_topic_no
		inner join textbook tb on t.textbook_no = tb.textbook_no
		where a.class_no = #{class_no} 
		and a.study_date <![CDATA[<]]> #{study_date}
		order by a.study_date desc
		limit 1
	</select>
	<select id="getTodayBook" parameterType="hashmap" resultType="hashmap">				
		select a.class_score_no, a.class_log_no, c.class_no
		     , ifnull(l.textbook_topic_no, 0) as textbook_topic_no
		     , ifnull(t.textbook_no, 0) as textbook_no
		     , ifnull(t.pdf_file, '') as pdf_file
		from class_score a
		inner join class_log l on a.class_log_no = l.class_log_no 
		inner join class c on l.class_no = c.class_no
		left join textbook_topic t on l.textbook_topic_no = t.textbook_topic_no
		where a.class_score_no = #{class_score_no}
	</select>
	<select id="selectTextbookCombo" parameterType="hashmap" resultType="hashmap">
		select a.* from textbook a
		inner join study_level b on a.study_level_no = b.study_level_no
		where b.study_no = #{study_no}
	</select>
	<select id="selectTextbookTopicCombo" parameterType="hashmap" resultType="hashmap">
		select * from textbook_topic where textbook_no = #{textbook_no}
	</select>
	<select id="selectTextbookPageCombo" parameterType="hashmap" resultType="hashmap">
		select * from textbook_page where textbook_topic_no = #{textbook_topic_no}
	</select>
	<update id="updateClassLogPage" parameterType="hashmap">
		update class_log
		set textbook_topic_no = #{textbook_topic_no}
		  , slide_number = #{slide_number}
		where class_log_no = #{class_log_no}
	</update>
	<select id="selectLastAIUser" resultType="int">
		select auto_increment from information_schema.tables where table_name = 'user' and table_schema = 'SAEHALMSver31'
	</select>
	
	<!-- reportPopup -->
	<select id="selectClassScoreCombo" parameterType="hashmap" resultType="hashmap">
		select a.class_score_no, s.student_name, s.student_eng_name
		from class_score a
		inner join class_student cs on a.class_student_no = cs.class_student_no 
		inner join user_student s on cs.user_student_no = s.user_student_no
		where a.class_log_no in (select class_log_no from class_score where class_score_no = #{class_score_no})
	</select>
	<select id="selectClassScoreOne" parameterType="hashmap" resultType="hashmap">
		select s.class_score_no, c.class_no, l.class_log_no		  
		     , ifnull(s.grammer, 0) grammer
		     , ifnull(s.speaking_fluency, 0) speaking_fluency
		     , ifnull(s.listening_comprehension, 0) listening_comprehension
		     , ifnull(s.pronunciation_intonation, 0) pronunciation_intonation
		     , ifnull(s.vocabulary, 0) vocabulary
		     , s.today_topic, s.evaluation, s.present
		     , s.class_student_no
		     , s.study_status
		from class_score s
		inner join class_log l on s.class_log_no = l.class_log_no
		inner join class c on l.class_no = c.class_no
		where s.class_score_no = #{class_score_no}
	</select>
	<update id="updateReport" parameterType="hashmap">
		update class_score
		set grammer = #{grammer}
		  , speaking_fluency = #{speaking_fluency}
		  , listening_comprehension = #{listening_comprehension}
		  , pronunciation_intonation = #{pronunciation_intonation}
		  , vocabulary = #{vocabulary}
		  , present = #{present}
		  , today_topic = #{today_topic}
		  , evaluation = #{evaluation}		  
		  , study_status = 0
		  , register_status = 1
		where class_score_no = #{class_score_no}
	</update>
	<update id="makeupReport" parameterType="hashmap">
		update class_score		
		set study_status = 3
		where class_log_no = #{class_log_no}
		<!-- where class_score_no = #{class_score_no} -->
	</update>
	<update id="cancelMakeupReport" parameterType="hashmap">
		update class_score		
		set study_status = 0
		where class_score_no = #{class_score_no}
	</update>
	<select id="getRegisterInfo" parameterType="hashmap" resultType="hashmap">
		select count(*) as totalCnt
		     , (select count(*) from class_score where class_log_no = #{class_log_no} and register_status = 1) as regCnt
		from class_score
		where class_log_no = #{class_log_no}
	</select>
	<update id="completeReport" parameterType="hashmap">
		update class_score
		set study_status = 1
		where class_log_no = #{class_log_no}
	</update>
	<select id="getRegisterLevelTestInfo" parameterType="hashmap" resultType="hashmap">
		select count(*) as totalCnt
		     , (select count(*) from leveltest where leveltest_no = #{leveltest_no} and evaluation is not null) as regCnt
		from leveltest
		where leveltest_no = #{leveltest_no}
	</select>
	<update id="completeLevelTestReport" parameterType="hashmap">
		update leveltest
		set study_status = 1
		where leveltest_no = #{leveltest_no}
	</update>
	
	<select id="selectClassStudentCombo" parameterType="hashmap" resultType="hashmap">
		select a.class_student_no, a.class_no, a.user_student_no 
		     , s.student_name, s.student_eng_name
		from class_student a
		inner join user_student s on a.user_student_no = s.user_student_no
		where a.class_no = #{class_no}	
	</select>
	<select id="selectClassHistoryAll" parameterType="hashmap" resultType="hashmap">	
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select l.study_date, l.user_teacher_no, t.teacher_name, t.teacher_nickname
							 , tb.textbook_no, ifnull(tb.textbook_name, "") as textbook_name 
							 , l.textbook_topic_no, ifnull(tp.topic_name, "") as topic_name
							 , l.slide_number, s.student_name, s.student_eng_name         
							 , a.*
						from class_score a 
						inner join class_log l on a.class_log_no = l.class_log_no
						inner join class c on l.class_no = c.class_no
						inner join user_teacher t on c.user_teacher_no = t.user_teacher_no
						inner join class_student cs on a.class_student_no = cs.class_student_no
						inner join user_student s on cs.user_student_no = s.user_student_no
						left join textbook_topic tp on l.textbook_topic_no = tp.textbook_topic_no
						left join textbook tb on tp.textbook_no = tb.textbook_no
						where l.class_no = #{class_no} 
						<!-- class_student_no 추가 -->						
						<if test="class_student_no != null and class_student_no != '' and class_student_no != 0 ">
							and a.class_student_no = #{class_student_no}
						</if>
						<if test="searchStudyDate != null and searchStudyDate != '' ">
							and l.study_date = #{searchStudyDate}
						</if>
			   ) base
			   where 1=1				 
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.study_date
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
		
	</select>
	<select id="countClassHistoryAll" parameterType="hashmap" resultType="int">
		select count(*)
		from class_score a 
		inner join class_log l on a.class_log_no = l.class_log_no
		inner join class c on l.class_no = c.class_no
		inner join user_teacher t on c.user_teacher_no = t.user_teacher_no
		left join textbook_topic tp on l.textbook_topic_no = tp.textbook_topic_no
		left join textbook tb on tp.textbook_no = tb.textbook_no
		where l.class_no = #{class_no}
		<if test="class_student_no != null and class_student_no != '' and class_student_no != 0 ">
			and a.class_student_no = #{class_student_no}
		</if>
		<if test="searchStudyDate != null and searchStudyDate != '' ">
			and l.study_date = #{searchStudyDate}
		</if>		
	</select>
	
	<select id="getLevelLogInfo" parameterType="hashmap" resultType="hashmap">		
		select 'English 레벨 테스트' as product_name, l.leveltest_no
		     , l.study_date, l.user_student_no, l.user_teacher_no, t.center_name, t.teacher_name, 10 as running_time
		     , u.student_eng_name, u.student_name, u.id, u.student_phone, u.student_parent_phone, u.student_tel
		     , l.leveltest_status
		from leveltest l
		left join (select ia.*, ib.center_name
		           from user_teacher ia 
				   inner join center ib on ia.center_no = ib.center_no) t on l.user_teacher_no = t.user_teacher_no
		inner join (select ia.*, ib.id
		            from user_student ia
		            inner join user ib on ia.user_no = ib.user_no) u on l.user_student_no = u.user_student_no		   
		where l.leveltest_no = #{no}		  
	</select>
	<select id="selectLevelTestOne" parameterType="hashmap" resultType="hashmap">		
		select l.leveltest_no, l.leveltest_language
		     , ifnull(l.grammer, 0) grammer
			 , ifnull(l.speaking_fluency, 0) speaking_fluency
			 , ifnull(l.listening_comprehension, 0) listening_comprehension
			 , ifnull(l.pronunciation_intonation, 0) pronunciation_intonation
			 , ifnull(l.vocabulary, 0) vocabulary
		     , l.evaluation, l.present
		     , ifnull(sl.study_no, 0) study_no, ifnull(l.study_level_no, 0) study_level_no
		     , l.comment_level, l.comment_grammer_vocabulary, l.comment_pronun_intonation, l.comment_listening
		     , u.student_name, u.student_eng_name, l.user_student_no    
		     
		from leveltest l
		inner join user_student u on l.user_student_no = u.user_student_no
		left join study_level sl on l.study_level_no = sl.study_level_no
		where l.leveltest_no = #{leveltest_no}
	</select>
	<select id="selectStudyComboByLanguage" parameterType="hashmap" resultType="hashmap">		
		select * from study where study_language = #{language}
	</select>
	<select id="selectStudyLevelCombo" parameterType="hashmap" resultType="hashmap">		
		select * from study_level where study_no = #{study_no}
	</select>
	<update id="updateReportLevelTest" parameterType="hashmap">
		update leveltest
		set grammer = #{grammer}
		  , speaking_fluency = #{speaking_fluency}
		  , listening_comprehension = #{listening_comprehension}
		  , pronunciation_intonation = #{pronunciation_intonation}
		  , vocabulary = #{vocabulary}
		  , study_level_no = #{study_level_no}
		  , comment_level = #{comment_level}
		  , comment_grammer_vocabulary = #{comment_grammer_vocabulary}
		  , comment_pronun_intonation = #{comment_pronun_intonation}
		  , comment_listening = #{comment_listening}
		  , evaluation = #{evaluation}
		  , present = #{present}
		where leveltest_no = #{leveltest_no}
	</update>
	
	<!-- 수강상품 -->
	<select id="selectProductAll" parameterType="hashmap" resultType="hashmap">
		select @rownum:=@rownum+1 as num, result.* from (
			select s.site_name, p.* from product p
			inner join site s on s.site_no=p.site_no
			<where>
				<if test="keyword != null">
					<choose>
						<when test="searchType == 'all'">
							and (
								s.site_name like concat('%',#{keyword},'%') or
								p.product_name like concat('%',#{keyword},'%')
							)
						</when>
						<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
						<when test="searchType == 'product_name'">and p.product_name like concat('%',#{keyword},'%')</when>
					</choose>
				</if>
			</where>
			order by p.product_regdate asc
		) as result,
		(select @rownum:=0) as r
		order by num desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countProductAll" parameterType="hashmap" resultType="int">
		select count(*) from product p
		inner join site s on s.site_no=p.site_no
		<where>
			<if test="keyword != null">
				<choose>
					<when test="searchType == 'all'">
						and (
							s.site_name like concat('%',#{keyword},'%') or
							p.product_name like concat('%',#{keyword},'%')
						)
					</when>
					<when test="searchType == 'site_name'">and s.site_name like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'product_name'">and p.product_name like concat('%',#{keyword},'%')</when>
				</choose>
			</if>
		</where>
	</select>
	<select id="selectProductOne" parameterType="hashmap" resultType="hashmap">
		select * from product where product_no=#{product_no}
	</select>
	<select id="selectProductPK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'product' and table_schema = 'SAEHALMSver31'
	</select>
	<insert id="insertProduct" parameterType="hashmap">
		insert into product(site_no, product_name, product_eng_name, product_target, product_type, product_language, product_personnel, product_running_time, product_week, product_count, product_price, product_img, product_content, product_eng_content, product_public_status, product_status, product_regdate)
		values(#{site_no}, #{product_name}, #{product_eng_name}, #{product_target}, #{product_type}, #{product_language}, #{product_personnel}, #{product_running_time}, #{product_week}, #{product_count}, #{product_price}, #{product_img}, #{product_content}, #{product_eng_content}, #{product_public_status}, #{product_status}, now())
	</insert>
	<update id="updateProduct" parameterType="hashmap">
		update product set site_no=#{site_no}, product_name=#{product_name}, product_eng_name=#{product_eng_name},
		product_target=#{product_target}, product_type=#{product_type}, product_language=#{product_language}, product_personnel=#{product_personnel},
		product_running_time=#{product_running_time}, product_week=#{product_week}, product_count=#{product_count}, product_price=#{product_price},
		product_img=#{product_img}, product_content=#{product_content}, product_eng_content=#{product_eng_content},
		product_public_status=#{product_public_status}, product_status=#{product_status}
		where product_no=#{product_no}
	</update>
	<select id="selectProductMakeClass" parameterType="hashmap" resultType="hashmap">
		select * from product
		where (site_no=#{site_no} or product_public_status=1) and product_status=1
		<if test="product_language != '' and product_language != null">and product_language=#{product_language}</if>
		<if test="product_type != '' and product_type != null">and product_type=#{product_type}</if>
		<if test="product_personnel != '' and product_personnel != null">and product_personnel=#{product_personnel}</if>
	</select>
	
	<!-- 신청내역 -->
	<select id="selectPaymentAll" parameterType="hashmap" resultType="hashmap">
		select * from payment
		<where>
			<if test="keyword != null">
				<choose>
					<when test="searchType == 'all'">
						and (
							payment_student like concat('%',#{keyword},'%') or
							payment_teacher like concat('%',#{keyword},'%') or
							payment_product like concat('%',#{keyword},'%') or
							payment_study like concat('%',#{keyword},'%') or
							payment_textbook like concat('%',#{keyword},'%') or
							payment_phone like concat('%',#{keyword},'%')
						)
					</when>
					<when test="searchType == 'student_name'">and payment_student like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'teacher_name'">and payment_teacher like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'product_name'">and payment_product like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'study_name'">and payment_study like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'textbook_name'">and payment_textbook like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_phone'">and payment_phone like concat('%',#{keyword},'%')</when>
				</choose>
			</if>
		</where>
		order by payment_regdate desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countPaymentAll" parameterType="hashmap" resultType="int">
		select count(*) from payment
		<where>
			<if test="keyword != null">
				<choose>
					<when test="searchType == 'all'">
						and (
							payment_student like concat('%',#{keyword},'%') or
							payment_teacher like concat('%',#{keyword},'%') or
							payment_product like concat('%',#{keyword},'%') or
							payment_study like concat('%',#{keyword},'%') or
							payment_textbook like concat('%',#{keyword},'%') or
							payment_phone like concat('%',#{keyword},'%')
						)
					</when>
					<when test="searchType == 'student_name'">and payment_student like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'teacher_name'">and payment_teacher like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'product_name'">and payment_product like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'study_name'">and payment_study like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'textbook_name'">and payment_textbook like concat('%',#{keyword},'%')</when>
					<when test="searchType == 'student_phone'">and payment_phone like concat('%',#{keyword},'%')</when>
				</choose>
			</if>
		</where>
	</select>
	<update id="paymentStatus" parameterType="hashmap">
		update payment set payment_status=#{payment_status} where payment_no=#{payment_no}
	</update>
	
	<!-- ROOM_NO -->
	<select id="selectROOMPK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'room_no' and table_schema = 'SAEHALMSver31'
	</select>
	<insert id="insertROOM">
		insert into room_no values();
	</insert>
	
	<select id="selectLevelTestHistoryAll" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select a.*
						   , t.teacher_name, t.teacher_nickname, s.student_name, s.student_eng_name
					  from leveltest a
					  left join user_teacher t on a.user_teacher_no = t.user_teacher_no
					  inner join user_student s on a.user_student_no = s.user_student_no
					  where a.user_student_no = #{user_student_no}
					  <if test="searchStudyDate != null and searchStudyDate != '' ">
						  and a.study_date = #{searchStudyDate}
					  </if>
			   ) base
			   where 1=1				 
				 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.study_date
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countLevelTestHistoryAll" parameterType="hashmap" resultType="int">
		select count(*)
		from leveltest a
		left join user_teacher t on a.user_teacher_no = t.user_teacher_no
		inner join user_student s on a.user_student_no = s.user_student_no
		where a.user_student_no = #{user_student_no}
		<if test="searchStudyDate != null and searchStudyDate != '' ">
			and a.study_date = #{searchStudyDate}
		</if>	
	</select>
	
	<select id="selectClassInfoExcel" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
				
			  select base.* 
				from (select 'regular class' as classType, c.room_no, s.site_name, st.study_name, p.product_language as language
						     , p.product_name, c.start_date, c.end_date
						     , p.product_type, p.product_week, p.product_personnel
						     , (select count(*) from class_student ia where ia.class_no = c.class_no) as class_student_cnt
						     , c.class_time , p.product_running_time
						     , ifnull(t.teacher_name, '') as teacher_name, ifnull(t.id, '') as teacher_id
						     , tb.textbook_name
							 , u.id, us.student_tel, us.student_phone, us.student_parent_phone
						     , us.student_name, us.student_eng_name
						     
						     , s.site_no, t.center_no
						     , if(c.class_status = 0, '대기', if(c.class_status = 2, '취소', if(c.class_status = 1, if(c.end_date <![CDATA[ < ]]> current_date(), '학습종료', '수업중'), ''))) as status     
						     , tb.study_no, c.textbook_no
						     						     
						from class_student cs
						inner join class c on cs.class_no = c.class_no
						inner join user_student us on cs.user_student_no = us.user_student_no
						inner join user u on us.user_no = u.user_no
						inner join site s on us.site_no = s.site_no
						left join (select ia.*, ic.study_name, ic.study_no
									from textbook ia inner join study_level ib on ia.study_level_no = ib.study_level_no
									inner join study ic on ib.study_no = ic.study_no) tb on c.textbook_no = tb.textbook_no
						inner join study_level sl on tb.study_level_no = sl.study_level_no
						inner join study st on sl.study_no = st.study_no
						inner join product p on c.product_no = p.product_no
						left join (select ia.*, ib.id from user_teacher ia inner join user ib on ia.user_no = ib.user_no) t on c.user_teacher_no = t.user_teacher_no
						
						where c.user_teacher_no is not null
						
						union all
						
						select 'level test' as classType, l.room_no, s.site_name, '' as study_name, l.leveltest_language as language
						     , concat(l.leveltest_language, ' 레벨 테스트') as product_name, l.study_date as start_date, l.study_date as end_date
						     , leveltest_type as product_type, '' as product_week, '1:1' as product_personnel
						     , 1 as class_student_cnt
						     , l.class_time, 10 as product_running_time
						     , ifnull(t.teacher_name, '') as teacher_name, ifnull(t.id, '') as teacher_id
						     , us.student_phone as textbook_name
						     , u.id, us.student_tel, us.student_phone, us.student_parent_phone
						     , us.student_name, us.student_eng_name
						     
						     , if(l.leveltest_status = 0, '대기', if(l.leveltest_status = 2, '취소', if(l.leveltest_status = 1, if(l.study_date <![CDATA[ < ]]> current_date(), '학습종료', '수업중'), ''))) as status
						     , s.site_no, t.center_no
						     , 0 as study_no, 0 as textbook_no 
						     
						from leveltest l
						inner join user_student us on l.user_student_no = us.user_student_no
						inner join user u on us.user_no = u.user_no
						inner join site s on us.site_no = s.site_no
						left join (select ia.*, ib.id from user_teacher ia inner join user ib on ia.user_no = ib.user_no) t on l.user_teacher_no = t.user_teacher_no
						
						where l.user_teacher_no is not null
 			   ) base
			   where 1=1
			   
			   <if test="keyword != null and keyword != ''">
					<choose>
						<when test="searchType == 'all' and searchType == ''">							
							AND ( student_name Like CONCAT('%', TRIM(#{keyword}), '%')
							    or student_phone Like CONCAT('%', TRIM(#{keyword}), '%')
								or teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')	
								or teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')
								or room_no Like CONCAT('%', TRIM(#{keyword}), '%')											
							)
						</when>
						<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'student_phone'">AND student_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_id'">AND teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_name'">AND teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'room_no'">AND room_no Like CONCAT('%', TRIM(#{keyword}), '%')</when>	
					</choose>
				</if>
				<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
					and site_no like CONCAT('%', TRIM(#{searchSite}), '%')
				</if>
				<if test="searchCenter != null and searchCenter != '' and searchCenter != 'all'">
					and center_no like CONCAT('%', TRIM(#{searchCenter}), '%')
				</if>
				<if test="searchClassType != null and searchClassType != '' and searchClassType != 'all'">
					and classType like CONCAT('%', TRIM(#{searchClassType}), '%')
				</if>
				<if test="searchStartDate != null and searchStartDate != '' and searchEndDate != null and searchEndDate != '' ">
					and ( (#{searchStartDate} between start_date and end_date) 
					   OR (#{searchEndDate} between start_date and end_date)
					)
				</if>
				<if test="(searchStartDate != null and searchStartDate != '') and (searchEndDate == null or searchEndDate == '') ">
					and #{searchStartDate} between start_date and end_date
				</if>
				<if test="(searchStartDate == null or searchStartDate == '') and (searchEndDate != null and searchEndDate != '') ">
					and #{searchEndDate} between start_date and end_date
				</if>
				<if test="searchStatus != null and searchStatus != '' and searchStatus != 'all'">
					and status = #{searchStatus}
				</if>
				
				<if test="searchLanguage != null and searchLanguage != '' and searchLanguage != 'all'">
					and language = #{searchLanguage}
				</if>
				<if test="searchStudy != null and searchStudy != '' and searchStudy != 'all'">
					and study_no = #{searchStudy}
				</if>
				<if test="searchTextBook != null and searchTextBook != '' and searchTextBook != 'all'">
					and textbook_no = #{searchTextBook}
				</if>
			   	 
		   ) sub
		   where (@rownum := 0) = 0
		   
		   <!-- order by sub.start_date -->
		   <if test="(searchTimeOrderBy == null or searchTimeOrderBy == '') and (searchTeacherOrderBy == null or searchTeacherOrderBy == '') ">
		   		order by sub.start_date, sub.room_no
		   </if>
		   <if test="searchTimeOrderBy != null and searchTimeOrderBy != '' ">
		   		<choose>
					<when test="searchTimeOrderBy == 'desc' ">
						order by sub.class_time asc 	<!-- 밑에 rownum으로 한번 더 역순하기 때문에 반대로.. -->
					</when>				
					<when test="searchTimeOrderBy == 'asc' ">
						order by sub.class_time desc
					</when>						
				</choose>
		   </if>
		   <if test="searchTeacherOrderBy != null and searchTeacherOrderBy != '' ">
		   		<choose>
					<when test="searchTeacherOrderBy == 'desc' ">
						order by sub.teacher_name asc 	<!-- 밑에 rownum으로 한번 더 역순하기 때문에 반대로.. -->
					</when>				
					<when test="searchTeacherOrderBy == 'asc' ">
						order by sub.teacher_name desc
					</when>						
				</choose>
		   </if> 
			
		) t
		order by t.rownum desc
	</select>
	
	<select id="selectTimeClassExcel" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from (select 'regular class' as classType, st.site_name, c.room_no, u.id as student_id, s.student_name, s.student_eng_name
						     , p.product_name as course, c.start_date, c.end_date, l.study_date as course_date, ifnull(cs.class_phone, "") class_phone
						     , ifnull(s.student_tel, "") student_tel, ifnull(s.student_phone, "") student_phone, ifnull(s.student_parent_phone, "") as student_parent_phone, tb.textbook_name, c.class_time, p.product_running_time as running_time
						     , case when a.class_type = 0 then 'Regular' else 'Make-up' end as type
						     , if(a.present = 1, 'Present', if(a.present = 2, 'Absent', '')) as present
						     , '' as result_level, p.product_type, cs.class_phone as real_class_phone
						     , t.teacher_name , t.teacher_nickname, ct.center_name, ut.id as teacher_id
						     , case ifnull(a.study_status, 0) when 0 then 'Before'
															  when 1 then 'Complete' 
						                                      when 2 then 'cancel' else 'Makeup' end class_status
							 , if((select count(*) from class_video_student_log where class_score_no = a.class_score_no) > 0, 'O', 'X') as student_status
						     , if((select count(*) from class_video_teacher_log where class_log_no = l.class_log_no) > 0, 'O', 'X') as teacher_status
						from class_score a
						inner join class_log l on a.class_log_no = l.class_log_no
						inner join class c on l.class_no = c.class_no
						inner join class_student cs on a.class_student_no = cs.class_student_no
						inner join user_student s on cs.user_student_no = s.user_student_no
						inner join user u on s.user_no = u.user_no
						inner join product p on c.product_no = p.product_no
						inner join site st on s.site_no = st.site_no
						left join textbook tb on c.textbook_no = tb.textbook_no
						left join user_teacher t on l.user_teacher_no = t.user_teacher_no
						left join center ct on t.center_no = ct.center_no
						left join user ut on t.user_no = ut.user_no
						where l.user_teacher_no is not null
						
						union all
						
						select 'level test' as classType, st.site_name, l.room_no, u.id as student_id, s.student_name, s.student_eng_name
							 , concat(l.leveltest_language, ' 레벨 테스트') as course, l.study_date as start_date, l.study_date as end_date, l.study_date as course_date, ifnull(l.class_phone, '') as class_phone
						     , ifnull(s.student_tel, '') student_tel, ifnull(s.student_phone, '') as student_phone, ifnull(s.student_parent_phone, '') student_parent_phone, '' as textbook_name, l.class_time, 10 as running_time
						     , 'LevelTest' as type
						     , if(l.present = 1, 'Present', if(l.present = 2, 'Absent', '')) as present
						     , sl.level_name as result_level, leveltest_type as product_type, l.class_phone as real_class_phone
						     , t.teacher_name , t.teacher_nickname, ct.center_name, ut.id as teacher_id
						     , case ifnull(l.study_status, 0) when 0 then if(l.study_date > current_date(), 'Before', 'Complete')
						                                      else '취소' end class_status
							 , '' as student_status, '' as teacher_status
						from leveltest l
						inner join user_student s on l.user_student_no = s.user_student_no
						inner join site st on s.site_no = st.site_no
						inner join user u on s.user_no = u.user_no
						left join study_level sl on l.study_level_no = sl.study_level_no
						left join user_teacher t on l.user_teacher_no = t.user_teacher_no
						left join center ct on t.center_no = ct.center_no
						left join user ut on t.user_no = ut.user_no
						where l.user_teacher_no is not null
				
 			   ) base
			   where 1=1
			   <if test="keyword != null and keyword != ''">
					<choose>
						<when test="searchType == 'all' or searchType == ''">							
							AND ( student_name Like CONCAT('%', TRIM(#{keyword}), '%')
							    or student_phone Like CONCAT('%', TRIM(#{keyword}), '%')
								or teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')	
								or teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')
								or room_no Like CONCAT('%', TRIM(#{keyword}), '%')											
							)
						</when>
						<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'student_phone'">AND student_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_id'">AND teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_name'">AND teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'room_no'">AND room_no Like CONCAT('%', TRIM(#{keyword}), '%')</when>	
					</choose>
				</if>
			   	 
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.start_date 
			
		) t
		order by t.rownum desc
	</select>
	
	<select id="getUserByLoginNo" parameterType="String" resultType="hashmap">
		select u.*, r.role_no, r.name as role_name
		     , ifnull(t.user_teacher_no, 0) as user_teacher_no
		     , ifnull(t.teacher_name, '관리자') as teacher_name
		     , ifnull(s.user_student_no, 0) as user_student_no
		     , ifnull(s.student_name, '') as student_name
		     , ifnull(s.student_phone, '') as student_phone
		from user u
		inner join role r on u.role = r.role_no
		left join user_teacher t on u.user_no = t.user_no
		left join user_student s on u.user_no = s.user_no
		where u.user_no = #{user_no}
	</select>
	
	<!-- 강사 배정 시간대 구하기 -->
	<select id="selectClassTutor" parameterType="hashmap" resultType="hashmap">
		select cs.user_student_no, 'class' as flag, c.class_no, c.class_no as no, c.start_date, p.product_no, p.product_language, p.product_week, p.product_name, ifnull(s.study_name, '') as study_name 
		     , us.student_name, us.student_eng_name, us.student_phone, us.user_no
		from class c      
		inner join product p on p.product_no=c.product_no
		inner join class_student cs on cs.class_no=c.class_no
		left join textbook t on t.textbook_no=c.textbook_no
        left join study_level sl on sl.study_level_no=t.study_level_no
        left join study s on s.study_no=sl.study_no
        inner join user_student us on cs.user_student_no = us.user_student_no
		where cs.user_student_no=#{user_student_no} and c.class_no=#{no}
	</select>
	<select id="selectLeveltestTutor" parameterType="hashmap" resultType="hashmap">
		select l.user_student_no, 'leveltest' as flag, l.leveltest_no, l.leveltest_no as no, l.leveltest_language, l.user_teacher_no, ifnull(l.study_date, '') as study_date, l.class_time  
		     , us.student_name, us.student_eng_name, us.student_phone 
		from leveltest l inner join user_student us on l.user_student_no = us.user_student_no
		where l.user_student_no=#{user_student_no} and l.leveltest_no=#{no}
	</select>
	<select id="selectCenterTutor" resultType="hashmap">
		select * from center where center_status=1
	</select>
	<select id="selectGroupTutor" resultType="hashmap">
		select * from teacher_group
	</select>
	<select id="selectTeacherCenterClass" parameterType="hashmap" resultType="hashmap">
		select c.center_no, ut.* from user_teacher ut
		inner join center c on c.center_no=ut.center_no
		where c.center_no=#{center_no} and ut.teacher_class_type like '%regular class%' and ut.teacher_status=1 and ut.teacher_open_status=1
	</select>
	<select id="selectTeacherGroupClass" parameterType="hashmap" resultType="hashmap">
		select g.teacher_group_no, ut.* from user_teacher ut
		inner join teacher_group_member gm on gm.user_teacher_no=ut.user_teacher_no
		inner join teacher_group g on g.teacher_group_no=gm.teacher_group_no
		where g.teacher_group_no=#{teacher_group_no} and ut.teacher_class_type like '%regular class%' and ut.teacher_status=1 and ut.teacher_open_status=1
	</select>
	<select id="selectTeacherCenterLeveltest" parameterType="hashmap" resultType="hashmap">
		select c.center_no, ut.* from user_teacher ut
		inner join center c on c.center_no=ut.center_no
		where c.center_no=#{center_no} and ut.teacher_class_type like '%level test%' and ut.teacher_status=1 and ut.teacher_open_status=1
	</select>
	<select id="selectTeacherGroupLeveltest" parameterType="hashmap" resultType="hashmap">
		select g.teacher_group_no, ut.* from user_teacher ut
		inner join teacher_group_member gm on gm.user_teacher_no=ut.user_teacher_no
		inner join teacher_group g on g.teacher_group_no=gm.teacher_group_no
		where g.teacher_group_no=#{teacher_group_no} and ut.teacher_class_type like '%level test%' and ut.teacher_status=1 and ut.teacher_open_status=1
	</select>
	<select id="selectStudyTutor" parameterType="string" resultType="hashmap">
		select * from study where study_status=1 and study_language=#{language}
	</select>
	<select id="selectTextbookStudy" parameterType="hashmap" resultType="hashmap">
		select s.study_no, t.* from textbook t
		inner join study_level sl on sl.study_level_no=t.study_level_no
		inner join study s on s.study_no=sl.study_no
		where s.study_no=#{study_no} and t.textbook_status=1
	</select>
	<select id="selectHolidayByLang" parameterType="hashmap" resultType="hashmap">
		select * from holiday where language_type=#{product_language}
		order by holiday_date desc
	</select>
	<select id="countTeacherTimetable" parameterType="hashmap" resultType="int">
		select count(*) from teacher_timetable where user_teacher_no=#{user_teacher_no} and able_time like concat(#{search_time})
	</select>
	<select id="selectClasslogTeacher" parameterType="hashmap" resultType="hashmap">
		select cl.*, p.product_running_time from class_log cl
		inner join class c on c.class_no=cl.class_no
		inner join product p on p.product_no=c.product_no
		where cl.user_teacher_no=#{user_teacher_no}
	</select>
	<select id="selectSetTutorInfoClass" parameterType="hashmap" resultType="hashmap">
		select c.center_name, ut.teacher_name from center c
		inner join user_teacher ut on ut.center_no=c.center_no
		where c.center_no=#{center_no} and ut.user_teacher_no=#{user_teacher_no}
	</select>
	<select id="selectSetTutorInfoGroup" parameterType="hashmap" resultType="hashmap">
		select g.teacher_group_name as center_name, ut.teacher_name from teacher_group g
		inner join teacher_group_member gm on gm.teacher_group_no=g.teacher_group_no
		inner join user_teacher ut on ut.user_teacher_no=gm.user_teacher_no
		where g.teacher_group_no=#{teacher_group_no} and ut.user_teacher_no=#{user_teacher_no}
	</select>
	<insert id="insertClassLogFirst" parameterType="hashmap">
		insert into class_log(class_no, study_date) values(#{class_no}, #{study_date})
	</insert>
	<select id="selectClassLogClass" parameterType="hashmap" resultType="hashmap">
		select * from class_log where class_no=#{class_no} order by study_date asc
	</select>
	<select id="selectClassLogSeachDate" parameterType="hashmap" resultType="hashmap">
		select * from class_log where class_no=#{class_no} and study_date >= #{search_date} order by study_date asc
	</select>
	<insert id="insertClassScore" parameterType="hashmap">
		insert into class_score(class_log_no, class_student_no) values(#{class_log_no}, #{class_student_no})
	</insert>
	<select id="selectLeveltestLogTeacher" parameterType="hashmap" resultType="hashmap">
		select study_date, class_time from leveltest
		where user_teacher_no=#{user_teacher_no} and study_date between #{s_date} and #{e_date}
		order by study_date asc, class_time asc
	</select>
	
	<!-- 강사 배정 -->
	<select id="selectClassOne" parameterType="hashmap" resultType="hashmap">
		select * from class where class_no=#{class_no}
	</select>
	<update id="updateClassSetTutor" parameterType="hashmap">
		update class c
		inner join class_log cl on cl.class_no=c.class_no
		inner join class_score cs on cs.class_log_no=cl.class_log_no
		set
		<if test="no_teacher != 0">
		c.user_teacher_no=#{user_teacher_no},
		</if>
		<if test="textbook_no != 0">
		c.textbook_no=#{textbook_no},
		</if>
		c.class_time=#{class_time}, c.class_status=1
		where c.class_no=#{class_no} and cl.study_date >= #{search_date} and cs.study_status=0
	</update>
	<update id="updateClassLogSetTutor" parameterType="hashmap">
		update class_log cl
		inner join class_score cs on cl.class_log_no=cs.class_log_no
		set cl.user_teacher_no=#{user_teacher_no}, cl.start_time=#{class_time}
		where cl.class_no=#{class_no} and cl.study_date >= #{search_date} and cs.study_status=0
	</update>
	<update id="updateLeveltestSetTutor" parameterType="hashmap">
		update leveltest set user_teacher_no=#{user_teacher_no},
		<if test="center_no != 0">
			center_no=#{center_no},
		</if>
		<if test="group_no != 0">
			group_no=#{group_no},
		</if>
		study_date=#{study_date}, class_time=#{class_time} where leveltest_no=#{leveltest_no}
	</update>
	

	<!-- 강사그룹관리 -->
	<select id="selectCenterByTeacherGroup" resultType="hashmap">
		select * from center
	</select>	
	<select id="selectTeacherByCenterNo" parameterType="hashmap" resultType="hashmap">
		select * from user_teacher where center_no = #{center_no}
	</select>
	<select id="selectGroupByTeacherGroup" resultType="hashmap">
		select * from teacher_group
	</select>	
	<select id="selectTeacherByGroupNo" parameterType="hashmap" resultType="hashmap">
		select m.*
		     , g.teacher_group_name
		     , t.teacher_name, t.teacher_nickname, t.teacher_status, teacher_open_status
		from teacher_group_member m
		inner join teacher_group g on m.teacher_group_no = g.teacher_group_no
		inner join user_teacher t on m.user_teacher_no = t.user_teacher_no
		where m.teacher_group_no = #{teacher_group_no}
	</select>
	<select id="getDuplTeacherGroupMember" parameterType="hashmap" resultType="int">
		select count(*) from teacher_group_member where teacher_group_no = #{teacher_group_no} and user_teacher_no = #{user_teacher_no}
	</select>
	<insert id="insertTeacherGroupMember" parameterType="hashmap">
		insert into teacher_group_member(teacher_group_no, user_teacher_no)
		values(#{teacher_group_no}, #{user_teacher_no})
	</insert>
	<delete id="deleteTeacherGroupMember" parameterType="hashmap">
		delete from teacher_group_member where teacher_group_member_no = #{teacher_group_member_no}
	</delete>
	<select id="getDuplTeacherGroupName" parameterType="hashmap" resultType="int">
		select count(*) from teacher_group where teacher_group_name = #{teacher_group_name}
	</select>
	<insert id="insertTeacherGroup" parameterType="hashmap">
		insert into teacher_group(teacher_group_name) values(#{teacher_group_name})
	</insert>
	<select id="selectTeacherGroupOne" parameterType="hashmap" resultType="hashmap">
		select * from teacher_group where teacher_group_no = #{teacher_group_no}
	</select>
	<update id="updateTeacherGroup" parameterType="hashmap">
		update teacher_group
		set teacher_group_name = #{teacher_group_name}
		where teacher_group_no = #{teacher_group_no}
	</update>
	<delete id="deleteTeacherGroup" parameterType="hashmap">
		delete from teacher_group where teacher_group_no = #{teacher_group_no}
	</delete>
	<select id="selectUsedTeacherGroupBySite" parameterType="hashmap" resultType="hashmap">
		select * from site where teacher_group_no = #{teacher_group_no}
	</select>
	
	<select id="selectTeacherGroupCombo" resultType="hashmap">
		select * from teacher_group
	</select>
	
	<select id="selectTodayScheduleByAdmin" parameterType="hashmap" resultType="hashmap">
		select t.* from ( 
 
		   select @rownum:=@rownum+1 as rownum, sub.*  from (  
		
			  select base.* 
				from ( select * from (

							select c.room_no, 'class' as flag, c.class_status
								 , case when a.class_type = 0 then 'Regular' else 'Make-up' end day_type
								 , c.class_no, l.class_log_no , a.class_score_no, 0 as leveltest_no, s.student_name, s.student_eng_name, s.id as student_id, s.student_blacklist_status
								 , txt.study_name, p.product_name, p.product_running_time as running_time
								 , if(ifnull(cs.class_phone, s.student_phone) = '',  s.student_phone, ifnull(cs.class_phone, s.student_phone)) as class_phone
								 , txt.textbook_name, txt.textbook_download
								 , l.study_date, p.product_type
								 , l.user_teacher_no, cs.user_student_no, a.present, a.study_status
								 , case ifnull(a.study_status, 0) when 0 then 'Before'
																  when 1 then 'Complete' 
																  when 2 then 'cancel' else 'Makeup' end log_status
								 , if((select count(*) from class_video_student_log where class_score_no = a.class_score_no) > 0, 'O', 'X') as student_status
								 , if((select count(*) from class_video_teacher_log where class_log_no = l.class_log_no) > 0, 'O', 'X') as teacher_status
								 
								 , l.start_time as class_time
							from class_score a
							inner join class_log l on a.class_log_no = l.class_log_no
							inner join class c on l.class_no = c.class_no
							inner join class_student cs on a.class_student_no = cs.class_student_no
							inner join (select ia.*, ib.id 
										from user_student ia 
										inner join user ib on ia.user_no = ib.user_no) s on cs.user_student_no = s.user_student_no
							inner join (select ia.*, ic.study_name 
										from textbook ia 
										inner join study_level ib on ia.study_level_no = ib.study_level_no
										inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
							inner join product p on c.product_no = p.product_no
							
							union all
							
							select l.room_no, 'leveltest' as flag, l.leveltest_status as class_status
								 , 'LevelTest' as day_type
								 , 0 as class_no, 0 as class_log_no, 0 as class_score_no, l.leveltest_no, s.student_name, s.student_eng_name, s.id as student_id, s.student_blacklist_status
								 , '' as study_name, concat(l.leveltest_language, ' 레벨 테스트') as product_name, 10 as running_time
								 , if(ifnull(l.class_phone, s.student_phone) = '',  s.student_phone, ifnull(l.class_phone, s.student_phone)) as class_phone
								 , '' as textbook_name, '' as textbook_download
								 , l.study_date, l.leveltest_type as product_type
								 , l.user_teacher_no, l.user_student_no, l.present, l.study_status
								 , case ifnull(l.study_status, 0) when 0 then 'Before'
															  	  when 1 then 'Complete' else 'cancel' end log_status
								 , '' student_status, '' teacher_status
								 
								 , l.class_time
							from leveltest l
							inner join (select ia.*, ib.id 
										from user_student ia 
										inner join user ib on ia.user_no = ib.user_no) s on l.user_student_no = s.user_student_no
						            
						) z				
			   ) base
			   where 1=1
			   and class_status not in (0, 2)     <!-- 수업상태 0대기, 1수업중, 2취소 -> 대기나 취소상태인것들 조회 안되도록 -->
			   and study_date = #{searchDate}				  
			   <if test="keyword != null and keyword != ''">
					<choose>
						<when test="searchType == 'all' or searchType == ''">
							AND ( student_id Like CONCAT('%', TRIM(#{keyword}), '%')
							   or student_name Like CONCAT('%', TRIM(#{keyword}), '%')																			
							)
						</when>
						<when test="searchType == 'student_id'">AND student_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
					</choose>
				</if>
		   ) sub
		   where (@rownum := 0) = 0
		   order by sub.class_time
			
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	
	<select id="countTodayScheduleByAdmin" parameterType="hashmap" resultType="int">
		  select count(*) 
			from ( select * from (

						select c.room_no, 'class' as flag, c.class_status
							 , case when a.class_type = 0 then 'Regular' else 'Make-up' end day_type
							 , c.class_no, l.class_log_no , a.class_score_no, 0 as leveltest_no, s.student_name, s.student_eng_name, s.id as student_id, s.student_blacklist_status
							 , txt.study_name, p.product_name, p.product_running_time as running_time, cs.class_phone, txt.textbook_name, txt.textbook_download
							 , l.study_date, p.product_type
							 , l.user_teacher_no, cs.user_student_no, a.present, a.study_status
							 , case ifnull(a.study_status, 0) when 0 then 'Before'
															  when 1 then 'Complete' 
															  when 2 then 'cancel' else 'Makeup' end log_status
							 , if((select count(*) from class_video_student_log where class_score_no = a.class_score_no) > 0, 'O', 'X') as student_status
							 , if((select count(*) from class_video_teacher_log where class_log_no = l.class_log_no) > 0, 'O', 'X') as teacher_status
							 
							 , l.start_time as class_time
						     , substring_index(l.start_time, ':', 1) as class_start_hour
						     , substring_index(l.start_time, ':', -1) as class_start_min
						from class_score a
						inner join class_log l on a.class_log_no = l.class_log_no
						inner join class c on l.class_no = c.class_no
						inner join class_student cs on a.class_student_no = cs.class_student_no
						inner join (select ia.*, ib.id 
									from user_student ia 
									inner join user ib on ia.user_no = ib.user_no) s on cs.user_student_no = s.user_student_no
						inner join (select ia.*, ic.study_name 
									from textbook ia 
									inner join study_level ib on ia.study_level_no = ib.study_level_no
									inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
						inner join product p on c.product_no = p.product_no
						
						union all
						
						select l.room_no, 'leveltest' as flag, l.leveltest_status as class_status
							 , 'LevelTest' as day_type
							 , 0 as class_no, 0 as class_log_no, 0 as class_score_no, l.leveltest_no, s.student_name, s.student_eng_name, s.id as student_id, s.student_blacklist_status
							 , '' as study_name, concat(l.leveltest_language, ' 레벨 테스트') as product_name, 10 as running_time, l.class_phone, '' as textbook_name, '' as textbook_download
							 , l.study_date, l.leveltest_type as product_type
							 , l.user_teacher_no, l.user_student_no, l.present, l.study_status
							 , case ifnull(l.study_status, 0) when 0 then 'Before'
														  	  when 1 then 'Complete' else 'cancel' end log_status
							 , '' student_status, '' teacher_status
							 
							 , l.class_time
						     , substring_index(l.class_time, ':', 1) as class_start_hour
						     , substring_index(l.class_time, ':', -1) as class_start_min
						from leveltest l
						inner join (select ia.*, ib.id 
									from user_student ia 
									inner join user ib on ia.user_no = ib.user_no) s on l.user_student_no = s.user_student_no
					            
					) z				
		   ) base
		  where 1=1
		  and class_status not in (0, 2)     <!-- 수업상태 0대기, 1수업중, 2취소 -> 대기나 취소상태인것들 조회 안되도록 -->
		  and study_date = #{searchDate}
		  <if test="keyword != null and keyword != ''">
				<choose>
					<when test="searchType == 'all' or searchType == ''">
						AND ( student_id Like CONCAT('%', TRIM(#{keyword}), '%')
						   or student_name Like CONCAT('%', TRIM(#{keyword}), '%')																			
						)
					</when>
					<when test="searchType == 'student_id'">AND student_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
					<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				</choose>
		  </if>
	</select>	  

	<!-- 학습현황 -->
	<select id="selectClassLogStudent" parameterType="hashmap" resultType="hashmap">
		select 'class' as flag, cl.class_log_no, cl.study_date, ifnull(cl.start_time, "") as start_time, ifnull(date_format(date_add(str_to_date(cl.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), "") as end_time,
		csc.class_score_no, csc.class_type, csc.study_status, csc.present, ifnull(ct.center_name, "") as center_name, ifnull(ut.teacher_name, "") as teacher_name, cs.class_phone, ifnull(t.textbook_name, "") as textbook_name, ifnull(tt.topic_name, "") as topic_name, ifnull(cl.slide_number, "") as slide_number,
		csc.class_score_no as no		
		from class_log cl
		inner join class c on c.class_no=cl.class_no
		inner join class_student cs on cs.class_no=c.class_no
		inner join product p on p.product_no=c.product_no
		inner join class_score csc on csc.class_student_no=cs.class_student_no and csc.class_log_no=cl.class_log_no
		left join user_teacher ut on ut.user_teacher_no=cl.user_teacher_no
		left join center ct on ct.center_no=ut.center_no
		left join textbook t on t.textbook_no=c.textbook_no
		left join textbook_topic tt on tt.textbook_topic_no=cl.textbook_topic_no
		where cs.user_student_no=#{user_student_no} and cl.study_date like concat(#{search_date}, '-%') and c.class_no=#{no}
		<if test="study_status == 0">
			and csc.study_status=0
		</if>
		<if test="study_status == 1">
			and csc.study_status != 0
		</if>
		order by study_date asc, start_time asc
	</select>
	<select id="selectLeveltestStudent" parameterType="hashmap" resultType="hashmap">
		select 'leveltest' as flag, lt.leveltest_no, lt.study_date, ifnull(lt.class_time, "") as start_time, ifnull(date_format(date_add(str_to_date(lt.class_time, "%H:%i"), interval 10 minute), "%H:%i"), "") as end_time,
		lt.study_status, lt.present, c.center_name, g.teacher_group_name, ifnull(ut.teacher_name, "") as teacher_name, ifnull(ut.teacher_phone, "") as teacher_phone
		from leveltest lt
		left join center c on c.center_no=lt.center_no
		left join teacher_group g on g.teacher_group_no=lt.group_no
		left join user_teacher ut on ut.user_teacher_no=lt.user_teacher_no
		where lt.user_student_no=#{user_student_no} and lt.leveltest_no=#{no} and lt.study_date like concat(#{search_date}, '-%')
		<if test="study_status == 0">
			and lt.study_status = 0
		</if>
		<if test="study_status == 1">
			and lt.study_status != 0
		</if>
	</select>
	<!-- cancel -->
	<update id="cancelClassScore" parameterType="int">
		update class_score set study_status=2 where class_score_no=#{class_score_no}
	</update>
	<update id="cancelLeveltest" parameterType="int">
		update leveltest set study_status=2 where leveltest_no=#{leveltest_no}
	</update>
	<!-- makeup -->
	<select id="selectTextbookInfo" parameterType="hashmap" resultType="hashmap">
		select s.study_name, t.textbook_name, t.textbook_no from textbook t
		inner join class c on c.textbook_no=t.textbook_no
		inner join study_level sl on sl.study_level_no=t.study_level_no
		inner join study s on s.study_no=sl.study_no
		where c.class_no=#{class_no}
	</select>
	<select id="selectClassLogPK" resultType="int">
		select AUTO_INCREMENT from information_schema.tables
		where table_name = 'class_log' and table_schema = 'SAEHALMSver31'
	</select>
	<insert id="makeupClassLog" parameterType="hashmap">
		<if test="textbook_topic_no != 0">
			insert into class_log(class_no, user_teacher_no, textbook_topic_no, study_date, start_time)
			values(#{class_no}, #{user_teacher_no}, #{textbook_topic_no}, #{study_date}, #{class_time})
		</if>
		<if test="textbook_topic_no == 0">
			insert into class_log(class_no, user_teacher_no, study_date, start_time)
			values(#{class_no}, #{user_teacher_no}, #{study_date}, #{class_time})
		</if>
	</insert>
	<select id="getClassStudentNo" parameterType="hashmap" resultType="int">
		select class_student_no from class_student where class_no=#{class_no} and user_student_no=#{user_student_no}
	</select>
	<insert id="makeupClassScore" parameterType="hashmap">
		insert into class_score(class_log_no, class_student_no, class_type)
		values(#{class_log_no}, #{class_student_no}, #{class_type})
	</insert>
	<select id="searchUserStudent" parameterType="hashmap" resultType="hashmap">
		select * from user_student
		where site_no=#{site_no} and student_name like concat("%", #{student_name}, "%")
	</select>
	<select id="selectTeacherByNo" parameterType="hashmap" resultType="hashmap">
		select * from user_teacher where user_teacher_no=#{user_teacher_no}
	</select>
	<!-- progress -->
	<select id="getStudyByClass" parameterType="hashmap" resultType="hashmap">
		select s.study_no, s.study_name from study s
		inner join study_level sl on sl.study_no=s.study_no
		inner join textbook t on t.study_level_no=sl.study_level_no
		inner join class c on c.textbook_no=t.textbook_no
		inner join class_log cl on cl.class_no=c.class_no
		where cl.class_log_no=#{class_log_no}
	</select>
	<update id="changeProgress" parameterType="hashmap">
		update class_log set textbook_topic_no=#{textbook_topic_no}, slide_number=#{slide_number} where class_log_no=#{class_log_no}
	</update>
	<update id="updateClassPhone" parameterType="hashmap">
		update class_student cs
		inner join class c on c.class_no=cs.class_no
		inner join class_log cl on cl.class_no=c.class_no
		set cs.class_phone=#{class_phone}
		where cl.class_log_no=#{class_log_no} and cs.user_student_no=#{user_student_no}
	</update>
	<!-- modify -->
	<select id="getClassScoreNo" parameterType="hashmap" resultType="int">
		select csc.class_score_no from class_score csc
		inner join class_student cs on cs.class_student_no=csc.class_student_no
		where csc.class_log_no=#{class_log_no} and cs.user_student_no=#{user_student_no}
	</select>
	<!-- delete -->
	<delete id="deleteClassScore" parameterType="int">
		delete from class_score where class_score_no=#{class_score_no}
	</delete>
	<select id="getDuplSiteName" parameterType="hashmap" resultType="int">
		select count(*) from site where site_name = #{site_name}
	</select>
	
	<update id="userPwdClear" parameterType="hashmap">
		update user set pwd = #{pwd} where user_no = #{user_no}
	</update>
	<select id="getUserByEtcPopup" parameterType="hashmap" resultType="hashmap">
		select * from user_student where user_no = #{user_no}
	</select>
	<update id="updateEtc" parameterType="hashmap">
		update user_student set student_etc = #{student_etc} where user_no = #{user_no}
	</update>
	<select id="getSiteCombo" resultType="hashmap">
		select * from site where site_status = '1'
	</select>
	<select id="getCenterCombo" resultType="hashmap">
		select * from center where center_status = '1'
	</select>
	<select id="getStudyCombo" parameterType="hashmap" resultType="hashmap">
		select * from study where 1=1		
		<if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != ''"> AND study_language = #{searchLanguage} </if>
	</select>
	<select id="getProductCombo" parameterType="hashmap" resultType="hashmap">
		select * from product where 1=1		
		<if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != ''"> AND product_language = #{searchLanguage} </if>
	</select>
	<select id="getTextbookCombo" parameterType="hashmap" resultType="hashmap">
		select t.*, s.study_no, s.study_name from textbook t		
		inner join study_level sl on t.study_level_no = sl.study_level_no
		inner join study s on sl.study_no = s.study_no
		where 1=1
		<if test="searchStudy != null and searchStudy != 'all' and searchStudy != ''"> AND s.study_no = #{searchStudy} </if>
	</select>
	<select id="getStudyComboByLanguage" parameterType="hashmap" resultType="hashmap">		
		select * from study where 1=1 
		<if test="language != null and language != 'all' and language != ''"> and study_language = #{language} </if>
	</select>	
	<select id="getTeacherComboByLanguage" parameterType="hashmap" resultType="hashmap">
		select * from user_teacher where 1=1 
		<if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != ''"> and teacher_language_type = #{searchLanguage} </if>
	</select>
	
	<select id="getTeacherCombo" parameterType="hashmap" resultType="hashmap">
		select * from user_teacher where 1=1 
		<if test="searchLanguage != null and searchLanguage != 'all' and searchLanguage != ''"> and teacher_language_type = #{searchLanguage} </if>
		<if test="searchCenter != null and searchCenter != 'all' and searchCenter != ''"> and center_no = #{searchCenter} </if>
	</select>
	
	<select id="selectClassDateAll" parameterType="hashmap" resultType="hashmap">
		select t.* from (  
		   select @rownum:=@rownum+1 as rownum, sub.*  from ( 
		   
			  select base.* 
				from ( select * from (

							select 'class' as flag, case when a.class_type = 0 then 'Regular' else 'Make-up' end day_type, 'regular class' as class_category     
							     , c.room_no, c.class_no, a.class_log_no, a.class_score_no, 0 as leveltest_no
							     , l.start_time, ifnull(date_format(date_add(str_to_date(l.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), "") as end_time     
							     , t.center_no, l.user_teacher_no, ut.id as teacher_id, t.teacher_name, txt.study_no, txt.study_name, p.product_name, txt.textbook_no, txt.textbook_name
							     , s.student_name, u.id as student_id, cs.class_phone
							     , s.site_no, l.study_date, p.product_type, p.product_language, s.user_student_no     
							     , c.class_status, a.study_status
							from class_score a
							inner join class_log l on a.class_log_no = l.class_log_no
							inner join class c on l.class_no = c.class_no
							inner join class_student cs on a.class_student_no = cs.class_student_no
							inner join user_student s on cs.user_student_no = s.user_student_no
							inner join user u on s.user_no = u.user_no
							inner join user_teacher t on l.user_teacher_no = t.user_teacher_no
							inner join user ut on t.user_no = ut.user_no
							inner join product p on c.product_no = p.product_no
							left join (select ia.*, ic.study_no, ic.study_name
											from textbook ia 
											inner join study_level ib on ia.study_level_no = ib.study_level_no
											inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
							where 1=1
							
							union all
							
							select 'leveltest' as flag , 'LevelTest' as day_type, 'level test' as class_category	
							     , a.room_no, 0 as class_no, 0 as class_log_no, 0 as class_score_no, a.leveltest_no
							     , a.class_time as start_time, ifnull(date_format(date_add(str_to_date(a.class_time, "%H:%i"), interval 10 minute), "%H:%i"), "") as end_time
							     , t.center_no, t.user_teacher_no, ut.id as teacher_id, t.teacher_name, 0 as study_no, '' as study_name, concat(a.leveltest_language, ' 레벨 테스트') as product_name, 0 as textbook_no, '' as textbook_name
							      , s.student_name, u.id as student_id, a.class_phone
							      , s.site_no, a.study_date, a.leveltest_type as product_type, a.leveltest_language as product_language, s.user_student_no
							      , a.leveltest_status as class_status, a.study_status
							from leveltest a
							inner join user_student s on a.user_student_no = s.user_student_no
							inner join user u on s.user_no = u.user_no
							inner join user_teacher t on a.user_teacher_no = t.user_teacher_no
							inner join user ut on t.user_no = ut.user_no
							where 1=1
						
						) z
						where study_date = #{searchDate}
						and class_status = 1	<!-- 수업중 상태 -->
						and study_status = 0	<!-- before -->
				
				 ) base
			   where 1=1
			     
			   <if test="searchType != null and searchType != ''">		
					<choose>
						<when test="searchType == 'all' and keyword != ''">
							AND ( student_name Like CONCAT('%', TRIM(#{keyword}), '%')
								or student_id Like CONCAT('%', TRIM(#{keyword}), '%')
							    or class_phone Like CONCAT('%', TRIM(#{keyword}), '%')
								or teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')	
								or teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')																			
							)
						</when>				
						<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'student_id'">AND student_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'student_phone'">AND class_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_id'">AND teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
						<when test="searchType == 'teacher_name'">AND teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>												
					</choose>						
				</if>
				<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
					and site_no like CONCAT('%', TRIM(#{searchSite}), '%')
				</if>
				<if test="searchClassType != null and searchClassType != '' and searchClassType != 'all'">
					and product_type like CONCAT('%', TRIM(#{searchClassType}), '%')
				</if>
				<if test="searchClassCategory != null and searchClassCategory != '' and searchClassCategory != 'all'">
					and class_category like CONCAT('%', TRIM(#{searchClassCategory}), '%')
				</if>				
				<if test="searchLanguage != null and searchLanguage != '' and searchLanguage != 'all'">
					and product_language = #{searchLanguage}
				</if>
				<if test="searchStudy != null and searchStudy != '' and searchStudy != 'all'">
					and study_no = #{searchStudy}
				</if>
				<if test="searchTextBook != null and searchTextBook != '' and searchTextBook != 'all'">
					and textbook_no = #{searchTextBook}
				</if>				
				<if test="searchCenter != null and searchCenter != '' and searchCenter != 'all'">
					and center_no like CONCAT('%', TRIM(#{searchCenter}), '%')
				</if>
				<if test="searchTeacher != null and searchTeacher != '' and searchTeacher != 'all'">
					and user_teacher_no like CONCAT('%', TRIM(#{searchTeacher}), '%')
				</if>
					
		   ) sub
		   where (@rownum := 0) = 0		   
		    
		   <if test="(searchTimeOrderBy == null or searchTimeOrderBy == '')">
		   		order by sub.start_time desc
		   </if>
		   <if test="searchTimeOrderBy != null and searchTimeOrderBy != '' ">
		   		<choose>
					<when test="searchTimeOrderBy == 'desc' ">
						order by sub.start_time asc 	
					</when>				
					<when test="searchTimeOrderBy == 'asc' ">
						order by sub.start_time desc
					</when>						
				</choose>
		   </if>
		   
		) t
		order by t.rownum desc
		limit #{cri.pageStart}, #{cri.perPageNum}
	</select>
	<select id="countClassDateAll" parameterType="hashmap" resultType="int">
		select count(*)
		from ( select * from (

					select 'class' as flag, case when a.class_type = 0 then 'Regular' else 'Make-up' end day_type, 'regular class' as class_category     
					     , c.room_no, c.class_no, a.class_log_no, a.class_score_no, 0 as leveltest_no
					     , l.start_time, ifnull(date_format(date_add(str_to_date(l.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), "") as end_time     
					     , t.center_no, l.user_teacher_no, ut.id as teacher_id, t.teacher_name, txt.study_no, txt.study_name, p.product_name, txt.textbook_no, txt.textbook_name
					     , s.student_name, u.id as student_id, cs.class_phone
					     , s.site_no, l.study_date, p.product_type, p.product_language, s.user_student_no     
					     , c.class_status, a.study_status
					from class_score a
					inner join class_log l on a.class_log_no = l.class_log_no
					inner join class c on l.class_no = c.class_no
					inner join class_student cs on a.class_student_no = cs.class_student_no
					inner join user_student s on cs.user_student_no = s.user_student_no
					inner join user u on s.user_no = u.user_no
					inner join user_teacher t on l.user_teacher_no = t.user_teacher_no
					inner join user ut on t.user_no = ut.user_no
					inner join product p on c.product_no = p.product_no
					left join (select ia.*, ic.study_no, ic.study_name
									from textbook ia 
									inner join study_level ib on ia.study_level_no = ib.study_level_no
									inner join study ic on ib.study_no = ic.study_no) txt on c.textbook_no = txt.textbook_no
					where 1=1
					
					union all
					
					select 'leveltest' as flag , 'LevelTest' as day_type, 'level test' as class_category	
					     , a.room_no, 0 as class_no, 0 as class_log_no, 0 as class_score_no, a.leveltest_no
					     , a.class_time as start_time, ifnull(date_format(date_add(str_to_date(a.class_time, "%H:%i"), interval 10 minute), "%H:%i"), "") as end_time
					     , t.center_no, t.user_teacher_no, ut.id as teacher_id, t.teacher_name, 0 as study_no, '' as study_name, concat(a.leveltest_language, ' 레벨 테스트') as product_name, 0 as textbook_no, '' as textbook_name
					      , s.student_name, u.id as student_id, a.class_phone
					      , s.site_no, a.study_date, a.leveltest_type as product_type, a.leveltest_language as product_language, s.user_student_no
					      , a.leveltest_status as class_status, a.study_status
					from leveltest a
					inner join user_student s on a.user_student_no = s.user_student_no
					inner join user u on s.user_no = u.user_no
					inner join user_teacher t on a.user_teacher_no = t.user_teacher_no
					inner join user ut on t.user_no = ut.user_no
					where 1=1
				
				) z
				where study_date = #{searchDate}
				and class_status = 1	<!-- 수업중 상태 -->
				and study_status = 0	<!-- before -->
		 ) base
	   where 1=1
	   <if test="searchType != null and searchType != ''">		
			<choose>
				<when test="searchType == 'all' and keyword != ''">
					AND ( student_name Like CONCAT('%', TRIM(#{keyword}), '%')
						or student_id Like CONCAT('%', TRIM(#{keyword}), '%')
					    or class_phone Like CONCAT('%', TRIM(#{keyword}), '%')
						or teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')	
						or teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')																			
					)
				</when>				
				<when test="searchType == 'student_name'">AND student_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'student_id'">AND student_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'student_phone'">AND class_phone Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'teacher_id'">AND teacher_id Like CONCAT('%', TRIM(#{keyword}), '%')</when>
				<when test="searchType == 'teacher_name'">AND teacher_name Like CONCAT('%', TRIM(#{keyword}), '%')</when>												
			</choose>						
		</if>
		<if test="searchSite != null and searchSite != '' and searchSite != 'all'">
			and site_no like CONCAT('%', TRIM(#{searchSite}), '%')
		</if>
		<if test="searchClassType != null and searchClassType != '' and searchClassType != 'all'">
			and product_type like CONCAT('%', TRIM(#{searchClassType}), '%')
		</if>
		<if test="searchClassCategory != null and searchClassCategory != '' and searchClassCategory != 'all'">
			and class_category like CONCAT('%', TRIM(#{searchClassCategory}), '%')
		</if>				
		<if test="searchLanguage != null and searchLanguage != '' and searchLanguage != 'all'">
			and product_language = #{searchLanguage}
		</if>
		<if test="searchStudy != null and searchStudy != '' and searchStudy != 'all'">
			and study_no = #{searchStudy}
		</if>
		<if test="searchTextBook != null and searchTextBook != '' and searchTextBook != 'all'">
			and textbook_no = #{searchTextBook}
		</if>				
		<if test="searchCenter != null and searchCenter != '' and searchCenter != 'all'">
			and center_no like CONCAT('%', TRIM(#{searchCenter}), '%')
		</if>
		<if test="searchTeacher != null and searchTeacher != '' and searchTeacher != 'all'">
			and user_teacher_no like CONCAT('%', TRIM(#{searchTeacher}), '%')
		</if>
	</select>
	
	<select id="getHolidayCnt" resultType="int" parameterType="hashmap">
		select count(*) from holiday where language_type = #{language} and holiday_date = #{choosedDate}
	</select>
	<select id="getTeacherHolidayCnt" resultType="int" parameterType="hashmap">
		select count(*) from teacher_holiday where user_teacher_no = #{user_teacher_no} and teacher_holiday_date = #{choosedDate}
	</select>
	<select id="getClassLogInfo" resultType="hashmap" parameterType="String">
		select l.class_log_no, l.class_no, p.product_language as language, l.user_teacher_no
			 , p.product_name, l.start_time, ifnull(date_format(date_add(str_to_date(l.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), "") as end_time
		     , (substring_index(l.start_time, ':', 1) * 60) + (substring_index(l.start_time, ':', -1)) as startMin 
		     , (substring_index(ifnull(date_format(date_add(str_to_date(l.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), ""), ':', 1) * 60) 
				   + (substring_index(ifnull(date_format(date_add(str_to_date(l.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), ""), ':', -1)) as endMin 
		from class_log l
		inner join class c on l.class_no = c.class_no
		inner join product p on c.product_no = p.product_no
		where l.class_log_no = #{class_log_no}
	</select>
	<select id="selectLessonList" resultType="hashmap" parameterType="hashmap">
		select * from (
			select 'class' as flag, a.study_date, a.start_time, ifnull(date_format(date_add(str_to_date(a.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), "") as end_time
				 , (substring_index(a.start_time, ':', 1) * 60) + (substring_index(a.start_time, ':', -1)) as startMin 
				 , (substring_index(ifnull(date_format(date_add(str_to_date(a.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), ""), ':', 1) * 60) 
				   + (substring_index(ifnull(date_format(date_add(str_to_date(a.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), ""), ':', -1)) as endMin 
			from class_log a
			inner join class c on a.class_no = c.class_no
			inner join product p on c.product_no = p.product_no
			where a.user_teacher_no = #{user_teacher_no}	
			and a.study_date = #{choosedDate}
		
			union all
		
			select 'leveltest' as flag, a.study_date, a.class_time as start_time, ifnull(date_format(date_add(str_to_date(a.class_time, "%H:%i"), interval 10 minute), "%H:%i"), "") as end_time
				 , (substring_index(a.class_time, ':', 1) * 60) + (substring_index(a.class_time, ':', -1)) as startMin
				 , (substring_index(ifnull(date_format(date_add(str_to_date(a.class_time, "%H:%i"), interval 10 minute), "%H:%i"), ""), ':', 1) * 60) 
				   + (substring_index(ifnull(date_format(date_add(str_to_date(a.class_time, "%H:%i"), interval 10 minute), "%H:%i"), ""), ':', -1)) as endMin
			from leveltest a
			where a.user_teacher_no = #{user_teacher_no}
			and a.study_date = #{choosedDate}
		) z
	</select>
	<select id="selectStudentList" resultType="hashmap" parameterType="hashmap">
		select cs.user_student_no
		from class_log a
		inner join class_score s on a.class_log_no = s.class_log_no
		inner join class_student cs on s.class_student_no = cs.class_student_no
		where a.class_log_no = #{class_log_no}		
	</select>
	<select id="selectStudentLessonList" resultType="hashmap" parameterType="hashmap">
		select * from (
			select 'class' as flag, a.study_date, a.start_time, ifnull(date_format(date_add(str_to_date(a.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), "") as end_time
				 , (substring_index(a.start_time, ':', 1) * 60) + (substring_index(a.start_time, ':', -1)) as startMin 
				 , (substring_index(ifnull(date_format(date_add(str_to_date(a.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), ""), ':', 1) * 60) 
				   + (substring_index(ifnull(date_format(date_add(str_to_date(a.start_time, "%H:%i"), interval p.product_running_time minute), "%H:%i"), ""), ':', -1)) as endMin 
			from class_log a
			inner join class c on a.class_no = c.class_no
			inner join product p on c.product_no = p.product_no
			inner join class_score cs on a.class_log_no = cs.class_log_no
			inner join class_student st on cs.class_student_no = st.class_student_no
			where st.user_student_no = #{user_student_no}	
			and a.study_date = #{choosedDate}
			
			union all
			
			select 'leveltest' as flag, a.study_date, a.class_time as start_time, ifnull(date_format(date_add(str_to_date(a.class_time, "%H:%i"), interval 10 minute), "%H:%i"), "") as end_time
				 , (substring_index(a.class_time, ':', 1) * 60) + (substring_index(a.class_time, ':', -1)) as startMin
				 , (substring_index(ifnull(date_format(date_add(str_to_date(a.class_time, "%H:%i"), interval 10 minute), "%H:%i"), ""), ':', 1) * 60) 
				   + (substring_index(ifnull(date_format(date_add(str_to_date(a.class_time, "%H:%i"), interval 10 minute), "%H:%i"), ""), ':', -1)) as endMin
			from leveltest a
			where a.class_time is not null 
			and a.user_student_no = #{user_student_no}
			and a.study_date = #{choosedDate}
		) z		
	</select>	
	<update id="updateClassLogByClassDate" parameterType="hashmap">
		update class_log
		set study_date = #{choosedDate}
		where class_log_no = #{class_log_no}
	</update>	
	
	<select id="getLeveltestInfo" resultType="hashmap" parameterType="String">
		select l.leveltest_no, l.leveltest_language as language, l.user_teacher_no, l.user_student_no, s.student_name
		     , concat(l.leveltest_language, ' 레벨 테스트') as product_name, l.class_time as start_time
		     , ifnull(date_format(date_add(str_to_date(l.class_time, "%H:%i"), interval 10 minute), "%H:%i"), "") as end_time
		     , (substring_index(l.class_time, ':', 1) * 60) + (substring_index(l.class_time, ':', -1)) as startMin 
		     , (substring_index(ifnull(date_format(date_add(str_to_date(l.class_time, "%H:%i"), interval 10 minute), "%H:%i"), ""), ':', 1) * 60) 
				   + (substring_index(ifnull(date_format(date_add(str_to_date(l.class_time, "%H:%i"), interval 10 minute), "%H:%i"), ""), ':', -1)) as endMin 
		from leveltest l
		inner join user_student s on l.user_student_no = s.user_student_no
		and l.leveltest_no = #{leveltest_no}
	</select>
	<update id="updateLeveltestByClassDate" parameterType="hashmap">
		update leveltest
		set study_date = #{choosedDate}
		where leveltest_no = #{leveltest_no}
	</update>
	
	<!-- 수업날짜 일괄변경 cancel -->
	<update id="cancelClassLog" parameterType="hashmap">
		update class_score
		set study_status = 2
		where class_log_no = #{class_log_no}
	</update>
	<update id="cancelLeveltestByClassDate" parameterType="hashmap">
		update leveltest
		set study_status = 2
		where leveltest_no = #{leveltest_no}
	</update>

</mapper>